package CQRS.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import CQRS.behavior.IComponentWithRepositoryReferences__BehaviorDescriptor;
import CQRS.behavior.QueryContainer__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class QueryContainerRemoveRequiredRepositoriesVisibilityOfAllQueriesIntention_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public QueryContainerRemoveRequiredRepositoriesVisibilityOfAllQueriesIntention_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:ff36ef3b-9652-473a-8811-c1d101cc2db3(CQRS.intentions)", "7215197606727109588"));
  }

  @Override
  public String getPresentation() {
    return "QueryContainerRemoveRequiredRepositoriesVisibilityOfAllQueriesIntention";
  }

  @Override
  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }

    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Remove 'requires' declaration from all queries";
    }

    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      IComponentWithRepositoryReferences__BehaviorDescriptor.resetChildRepositoryReferences_idd$u27T68Vq.invoke(node);
    }

    @Override
    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      if (!(isApplicableToNode(node, editorContext))) {
        return false;
      }
      return true;
    }

    private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
      return (boolean) QueryContainer__BehaviorDescriptor.isQueriesBlock_id6gxxZVtebNx.invoke(node) && Sequence.fromIterable(QueryContainer__BehaviorDescriptor.queries_id5SyewCaMpun.invoke(node)).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getBoolean(it, PROPS.shouldDisplayReferences$PJ7j);
        }
      });
    }


    @Override
    public IntentionDescriptor getDescriptor() {
      return QueryContainerRemoveRequiredRepositoriesVisibilityOfAllQueriesIntention_Intention.this;
    }

  }

  private static final class PROPS {
    /*package*/ static final SProperty shouldDisplayReferences$PJ7j = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce505e12ecL, 0x54ffa6ce525323cbL, "shouldDisplayReferences");
  }
}
