package CQRS.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.openapi.intentions.ParameterizedIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CQRS.behavior.IDtoDerivable__BehaviorDescriptor;
import CQRS.behavior.IElementOfBoundedContext__BehaviorDescriptor;
import CQRS.behavior.BoundedContext__BehaviorDescriptor;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import jetbrains.mps.lang.smodel.EnumerationLiteralsIndex;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class IDtoDerivable_CreateFlatteningRule_Intention extends AbstractIntentionDescriptor implements IntentionFactory {

  public IDtoDerivable_CreateFlatteningRule_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:ff36ef3b-9652-473a-8811-c1d101cc2db3(CQRS.intentions)", "5677076387074842054"));
  }

  @Override
  public String getPresentation() {
    return "IDtoDerivable_CreateFlatteningRule";
  }

  @Override
  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    List<IntentionExecutable> list = ListSequence.fromList(new ArrayList<IntentionExecutable>());
    List<SEnumerationLiteral> paramList = parameter(node, context);
    if (paramList != null) {
      for (SEnumerationLiteral param : paramList) {
        ListSequence.fromList(list).addElement(new IntentionImplementation(param));
      }
    }
    return list;
  }
  private List<SEnumerationLiteral> parameter(final SNode node, final EditorContext editorContext) {
    return SEnumOperations.getMembers(MetaAdapterFactory.getEnumeration(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x5d9cf3447c0f9e31L, "CQRS.structure.DtoDerivationRuleUsage"));
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable implements ParameterizedIntentionExecutable {
    private SEnumerationLiteral myParameter;
    public IntentionImplementation(SEnumerationLiteral parameter) {
      myParameter = parameter;
    }

    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Create '" + SEnumOperations.getMemberPresentation(myParameter) + "' dto flattening rule";
    }

    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode flatteningRule = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f985L, "CQRS.structure.DtoFlatteningRule"));
      SPropertyOperations.setEnum(flatteningRule, PROPS.usage$2GTC, myParameter);
      SLinkOperations.setTarget(flatteningRule, LINKS.derivableReference$gfNO, IDtoDerivable__BehaviorDescriptor.toDtoDerivableReference_id4LpUh3T0tG4.invoke(node));

      // TODO Hier vllt noch einbauen, dass es zuerst in in einen Flattening Rule Container eingef√ºgt werden und nicht einfach drunter
      SNode boundedContext = IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(node);
      int index = (int) BoundedContext__BehaviorDescriptor.indexOf_id3FBObrohI14.invoke(boundedContext, node);
      SLinkOperations.getChildren(boundedContext, LINKS.components$8ymK).add(index + 1, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb964344649a2L, "CQRS.structure.EmptyLine")));
      SLinkOperations.getChildren(boundedContext, LINKS.components$8ymK).add(index + 2, flatteningRule);
    }

    @Override
    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      if (!(isApplicableToNode(node, editorContext))) {
        return false;
      }
      return true;
    }

    private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
      switch (enumSwitchIndex.indexNullable(myParameter)) {
        case 0:
          return (BoundedContext__BehaviorDescriptor.findImplicitDtoFlattteningRuleFor_id4V91Il6n74D.invoke(IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(node), node) == null);
        case 1:
          return (BoundedContext__BehaviorDescriptor.findExplicitDtoFlattteningRuleFor_id4V91Il6mZZ3.invoke(IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(node), node) == null);
        default:
          return false;
      }
    }


    @Override
    public IntentionDescriptor getDescriptor() {
      return IDtoDerivable_CreateFlatteningRule_Intention.this;
    }

    public Object getParameter() {
      return myParameter;
    }
  }
  private static final EnumerationLiteralsIndex enumSwitchIndex = EnumerationLiteralsIndex.build(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x5d9cf3447c0f9e31L, 0x5d9cf3447c0f9e32L, 0x5d9cf3447c0f9e33L);

  private static final class PROPS {
    /*package*/ static final SProperty usage$2GTC = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f983L, 0x5d9cf3447c0f9e36L, "usage");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink derivableReference$gfNO = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L, 0x3cfd707898583364L, "derivableReference");
    /*package*/ static final SContainmentLink components$8ymK = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x49ba7df3e302f916L, 0x4cfae7e92982f50eL, "components");
  }
}
