package CQRS.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.openapi.intentions.ParameterizedIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import CQRS.behavior.IElementOfBoundedContext__BehaviorDescriptor;
import CQRS.behavior.BoundedContext__BehaviorDescriptor;
import CQRS.behavior.AggregateRoot__BehaviorDescriptor;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class AggregateRepositoryCreationIntention_Intention extends AbstractIntentionDescriptor implements IntentionFactory {

  public AggregateRepositoryCreationIntention_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:ff36ef3b-9652-473a-8811-c1d101cc2db3(CQRS.intentions)", "6124797423280927319"));
  }

  @Override
  public String getPresentation() {
    return "AggregateRepositoryCreationIntention";
  }

  @Override
  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    List<IntentionExecutable> list = ListSequence.fromList(new ArrayList<IntentionExecutable>());
    List<Boolean> paramList = parameter(node, context);
    if (paramList != null) {
      for (boolean param : paramList) {
        ListSequence.fromList(list).addElement(new IntentionImplementation(param));
      }
    }
    return list;
  }
  private List<Boolean> parameter(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromListAndArray(new ArrayList<Boolean>(), true, false);
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable implements ParameterizedIntentionExecutable {
    private boolean myParameter;
    public IntentionImplementation(boolean parameter) {
      myParameter = parameter;
    }

    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Create " + ((myParameter ? "id" : "")) + " repository";
    }

    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode aggregateRootReference = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f2L, "CQRS.structure.AggregateRootReference"));
      SLinkOperations.setTarget(aggregateRootReference, LINKS.aggregate$D_P$, node);

      SNode agrgegateRootRepository = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL, "CQRS.structure.AggregateRootRepository"));
      SLinkOperations.setTarget(agrgegateRootRepository, LINKS.aggregateReference$1ZNc, aggregateRootReference);
      SPropertyOperations.set(agrgegateRootRepository, PROPS.isIdRepository$Umet, myParameter);

      SNode boundedContext = IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(node);

      int index = (int) BoundedContext__BehaviorDescriptor.indexOf_id3FBObrohI14.invoke(boundedContext, node);
      SLinkOperations.getChildren(boundedContext, LINKS.components$8ymK).add(index + 1, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb964344649a2L, "CQRS.structure.EmptyLine")));
      SLinkOperations.getChildren(boundedContext, LINKS.components$8ymK).add(index + 2, agrgegateRootRepository);
    }

    @Override
    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      if (!(isApplicableToNode(node, editorContext))) {
        return false;
      }
      return true;
    }

    private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
      return !((boolean) AggregateRoot__BehaviorDescriptor.hasDefinedRepository_id2Bsub$KTQ$T.invoke(node));
    }


    @Override
    public IntentionDescriptor getDescriptor() {
      return AggregateRepositoryCreationIntention_Intention.this;
    }

    public Object getParameter() {
      return myParameter;
    }
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink aggregate$D_P$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f2L, 0x4f0a0db9ac16f8f3L, "aggregate");
    /*package*/ static final SContainmentLink aggregateReference$1ZNc = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL, 0x5e223a0a09fe3269L, "aggregateReference");
    /*package*/ static final SContainmentLink components$8ymK = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x49ba7df3e302f916L, 0x4cfae7e92982f50eL, "components");
  }

  private static final class PROPS {
    /*package*/ static final SProperty isIdRepository$Umet = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL, 0x73da5086441fb1a2L, "isIdRepository");
  }
}
