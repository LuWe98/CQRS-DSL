package CQRS.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.openapi.intentions.ParameterizedIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import CQRS.util.EditorContextUtils;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import java.util.Objects;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import jetbrains.mps.lang.smodel.EnumerationLiteralsIndex;
import org.jetbrains.mps.openapi.language.SProperty;

public final class DtoFlattening_ChangeNameConvention_intention_Intention extends AbstractIntentionDescriptor implements IntentionFactory {

  public DtoFlattening_ChangeNameConvention_intention_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:ff36ef3b-9652-473a-8811-c1d101cc2db3(CQRS.intentions)", "757976835751995061"));
  }

  @Override
  public String getPresentation() {
    return "DtoFlattening_ChangeNameConvention_intention";
  }

  @Override
  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    List<IntentionExecutable> list = ListSequence.fromList(new ArrayList<IntentionExecutable>());
    List<SEnumerationLiteral> paramList = parameter(node, context);
    if (paramList != null) {
      for (SEnumerationLiteral param : paramList) {
        ListSequence.fromList(list).addElement(new IntentionImplementation(param));
      }
    }
    return list;
  }
  private List<SEnumerationLiteral> parameter(final SNode node, final EditorContext editorContext) {
    return SEnumOperations.getMembers(MetaAdapterFactory.getEnumeration(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789afeffa9L, "CQRS.structure.FlatteningRuleNameConvention"));
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable implements ParameterizedIntentionExecutable {
    private SEnumerationLiteral myParameter;
    public IntentionImplementation(SEnumerationLiteral parameter) {
      myParameter = parameter;
    }

    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      switch (enumSwitchIndex.indexNullable(myParameter)) {
        case 0:
          return "Remove suffix / prefix";
        case 1:
          return "With prefix";
        case 2:
          return "With suffix";
        default:
          return null;
      }
    }

    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SEnumerationLiteral previoudNameConvention = SPropertyOperations.getEnum(node, PROPS.nameConvention$LtCG);
      SPropertyOperations.setEnum(node, PROPS.nameConvention$LtCG, myParameter);

      switch (enumSwitchIndex1.indexNullable(myParameter)) {
        case 0:
        case 1:
          if (!(SEnumOperations.isMember(previoudNameConvention, 0x3cfd70789afeffaaL))) {
            return;
          }
          SelectionUtil.selectCell(editorContext, node, "placeholderCellId");
          break;
        case 2:
          if (EditorContextUtils.isSelectedCellChildOf(editorContext, "nameConventionBlockId")) {
            SelectionUtil.selectCell(editorContext, node, SelectionManager.FIRST_CELL);
          }
          break;
      }
    }

    @Override
    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      if (!(isApplicableToNode(node, editorContext))) {
        return false;
      }
      return true;
    }

    private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
      return !(Objects.equals(SPropertyOperations.getEnum(node, PROPS.nameConvention$LtCG), myParameter));
    }


    @Override
    public IntentionDescriptor getDescriptor() {
      return DtoFlattening_ChangeNameConvention_intention_Intention.this;
    }

    public Object getParameter() {
      return myParameter;
    }
  }
  private static final EnumerationLiteralsIndex enumSwitchIndex = EnumerationLiteralsIndex.build(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789afeffa9L, 0x3cfd70789afeffaaL, 0x3cfd70789afeffabL, 0x3cfd70789afeffaeL);
  private static final EnumerationLiteralsIndex enumSwitchIndex1 = EnumerationLiteralsIndex.build(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789afeffa9L, 0x3cfd70789afeffabL, 0x3cfd70789afeffaeL, 0x3cfd70789afeffaaL);

  private static final class PROPS {
    /*package*/ static final SProperty nameConvention$LtCG = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f985L, 0x3cfd70789aff025eL, "nameConvention");
  }
}
