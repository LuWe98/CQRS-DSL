package CQRS.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionAspectDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.HashMap;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class IntentionsDescriptor extends AbstractIntentionAspectDescriptor {
  private static final IntentionFactory[] EMPTY_ARRAY = new IntentionFactory[0];
  private Map<SAbstractConcept, IntentionFactory[]> myCached = new HashMap<SAbstractConcept, IntentionFactory[]>();

  public IntentionsDescriptor() {
  }

  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SAbstractConcept concept) {
    if (myCached.containsKey(concept)) {
      return Arrays.asList(myCached.get(concept));
    }

    IntentionFactory[] intentions = EMPTY_ARRAY;
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        if (true) {
          // concept
          intentions = new IntentionFactory[3];
          intentions[0] = new AggregateRootCommandContainerCreationIntention_Intention();
          intentions[1] = new EventContainerCreationIntention_Intention();
          intentions[2] = new AggregateRepositoryCreationIntention_Intention();
        }
        break;
      case 1:
        if (true) {
          // concept
          intentions = new IntentionFactory[1];
          intentions[0] = new AggregateRootRepositoryConvertRepositoryTypeIntention_Intention();
        }
        break;
      case 2:
        if (true) {
          // concept
          intentions = new IntentionFactory[2];
          intentions[0] = new CommandToggleRequiredRepositoriesIntention_Intention();
          intentions[1] = new Command_MergeRequiredRepositoriesIntoContainer_Intention();
        }
        break;
      case 3:
        if (true) {
          // concept
          intentions = new IntentionFactory[5];
          intentions[0] = new CommandContainer_ToggleRequiredRepositories_Intention_Intention();
          intentions[1] = new CommandContainerAddRequiredRepositoriesToAllCommandsIntention_Intention();
          intentions[2] = new CommandContainerRemoveRequiredRepositoriesToAllCommandsIntention_Intention();
          intentions[3] = new CommandContainerTypeTransformationIntention_Intention();
          intentions[4] = new CommandContainer_ToggleForAggregateDeclaration_Intention_Intention();
        }
        break;
      case 4:
        if (true) {
          // concept
          intentions = new IntentionFactory[2];
          intentions[0] = new CreateDtoRepositoryIntention_Intention();
          intentions[1] = new Dto_DeriveFrom_Intention_Intention();
        }
        break;
      case 5:
        if (true) {
          // concept
          intentions = new IntentionFactory[1];
          intentions[0] = new DtoFlattening_ChangeNameConvention_intention_Intention();
        }
        break;
      case 6:
        if (true) {
          // concept
          intentions = new IntentionFactory[1];
          intentions[0] = new DeriveIdOfEntity_Intention();
        }
        break;
      case 7:
        if (true) {
          // concept
          intentions = new IntentionFactory[2];
          intentions[0] = new EventToggleRequiredRepositoriesIntention_Intention();
          intentions[1] = new Event_MergeRequiredRepositoriesIntoContainer_Intention();
        }
        break;
      case 8:
        if (true) {
          // concept
          intentions = new IntentionFactory[2];
          intentions[0] = new EventContainerTypeTransformationIntention_Intention();
          intentions[1] = new EventContainerToggleRequiresRepositoryReferencesIntention_Intention();
        }
        break;
      case 9:
        if (true) {
          // concept
          intentions = new IntentionFactory[1];
          intentions[0] = new ChangeParameterArrangementIntention_Intention();
        }
        break;
      case 10:
        if (true) {
          // concept
          intentions = new IntentionFactory[2];
          intentions[0] = new ReferencesArrangementIntention_Intention();
          intentions[1] = new MergeRequiredRepositoriesOfChildrenIntoContainer_Intention();
        }
        break;
      case 11:
        if (true) {
          // concept
          intentions = new IntentionFactory[1];
          intentions[0] = new ToggleComponentKeywordIntention_Intention();
        }
        break;
      case 12:
        if (true) {
          // concept
          intentions = new IntentionFactory[2];
          intentions[0] = new ShowKeywordsOfAllChildren_Intention();
          intentions[1] = new HideKeywordsOfAllChildren_Intention();
        }
        break;
      case 13:
        if (true) {
          // concept
          intentions = new IntentionFactory[2];
          intentions[0] = new IDtoDerivable_CreateDtoDerivition_Intention_Intention();
          intentions[1] = new IDtoDerivable_CreateFlatteningRule_Intention();
        }
        break;
      case 14:
        if (true) {
          // concept
          intentions = new IntentionFactory[4];
          intentions[0] = new IgnoredVariablesArrangementIntention_Intention();
          intentions[1] = new UsedDerivationRulesArrangementIntention_Intention();
          intentions[2] = new IDtoDerivitionToggleIgnoreVariablesVisibility_Intention();
          intentions[3] = new IDtoDerivitionToggleUsedRulesVisibility_Intention();
        }
        break;
      case 15:
        if (true) {
          // concept
          intentions = new IntentionFactory[1];
          intentions[0] = new ToggleDerivationRuleUsage_Intention();
        }
        break;
      case 16:
        if (true) {
          // concept
          intentions = new IntentionFactory[2];
          intentions[0] = new ImportStatementAddGenericTypeIntention_Intention();
          intentions[1] = new ImportStatementRemoveGenericTypesIntention_Intention();
        }
        break;
      case 17:
        if (true) {
          // concept
          intentions = new IntentionFactory[2];
          intentions[0] = new MethodChangeVisibilityIntention_Intention();
          intentions[1] = new MethodAddReturnValueIntention_Intention();
        }
        break;
      case 18:
        if (true) {
          // concept
          intentions = new IntentionFactory[1];
          intentions[0] = new PropertyGetterCreationIntention_Intention();
        }
        break;
      case 19:
        if (true) {
          // concept
          intentions = new IntentionFactory[2];
          intentions[0] = new QueryToggleRequiredRepositoriesIntention_Intention();
          intentions[1] = new Query_MergeRequiredRepositoriesIntoContainer_Intention();
        }
        break;
      case 20:
        if (true) {
          // concept
          intentions = new IntentionFactory[4];
          intentions[0] = new QueryContainerTypeTransformationIntention_Intention();
          intentions[1] = new QueryContainerToggleRequiresRepositoryReferencesIntention_Intention();
          intentions[2] = new QueryContainerRemoveRequiredRepositoriesVisibilityOfAllQueriesIntention_Intention();
          intentions[3] = new QueryContainerAddRequiredRepositoriesVisibilityOfAllQueriesIntention_Intention();
        }
        break;
      case 21:
        if (true) {
          // concept
          intentions = new IntentionFactory[2];
          intentions[0] = new QueryProcessingSettingChangeQueryContainerTypes_Intention_Intention();
          intentions[1] = new QueryProcessingSettingChangeHandlingSetting_Intention_Intention();
        }
        break;
      case 22:
        if (true) {
          // concept
          intentions = new IntentionFactory[1];
          intentions[0] = new ValueObjectBodyIntentions_Intention();
        }
        break;
      default:
    }
    myCached.put(concept, intentions);
    return Arrays.asList(intentions);
  }

  @NotNull
  @Override
  public Collection<IntentionFactory> getAllIntentions() {
    IntentionFactory[] rv = new IntentionFactory[46];
    rv[0] = new AggregateRootCommandContainerCreationIntention_Intention();
    rv[1] = new PropertyGetterCreationIntention_Intention();
    rv[2] = new MethodChangeVisibilityIntention_Intention();
    rv[3] = new MethodAddReturnValueIntention_Intention();
    rv[4] = new ChangeParameterArrangementIntention_Intention();
    rv[5] = new ValueObjectBodyIntentions_Intention();
    rv[6] = new AggregateRootRepositoryConvertRepositoryTypeIntention_Intention();
    rv[7] = new CommandContainer_ToggleRequiredRepositories_Intention_Intention();
    rv[8] = new CommandToggleRequiredRepositoriesIntention_Intention();
    rv[9] = new QueryContainerTypeTransformationIntention_Intention();
    rv[10] = new QueryContainerToggleRequiresRepositoryReferencesIntention_Intention();
    rv[11] = new QueryToggleRequiredRepositoriesIntention_Intention();
    rv[12] = new QueryContainerRemoveRequiredRepositoriesVisibilityOfAllQueriesIntention_Intention();
    rv[13] = new QueryContainerAddRequiredRepositoriesVisibilityOfAllQueriesIntention_Intention();
    rv[14] = new CommandContainerAddRequiredRepositoriesToAllCommandsIntention_Intention();
    rv[15] = new CommandContainerRemoveRequiredRepositoriesToAllCommandsIntention_Intention();
    rv[16] = new CommandContainerTypeTransformationIntention_Intention();
    rv[17] = new CreateDtoRepositoryIntention_Intention();
    rv[18] = new EventContainerTypeTransformationIntention_Intention();
    rv[19] = new EventContainerToggleRequiresRepositoryReferencesIntention_Intention();
    rv[20] = new EventContainerCreationIntention_Intention();
    rv[21] = new AggregateRepositoryCreationIntention_Intention();
    rv[22] = new ToggleComponentKeywordIntention_Intention();
    rv[23] = new ShowKeywordsOfAllChildren_Intention();
    rv[24] = new HideKeywordsOfAllChildren_Intention();
    rv[25] = new EventToggleRequiredRepositoriesIntention_Intention();
    rv[26] = new ReferencesArrangementIntention_Intention();
    rv[27] = new ImportStatementAddGenericTypeIntention_Intention();
    rv[28] = new ImportStatementRemoveGenericTypesIntention_Intention();
    rv[29] = new QueryProcessingSettingChangeQueryContainerTypes_Intention_Intention();
    rv[30] = new QueryProcessingSettingChangeHandlingSetting_Intention_Intention();
    rv[31] = new Query_MergeRequiredRepositoriesIntoContainer_Intention();
    rv[32] = new Command_MergeRequiredRepositoriesIntoContainer_Intention();
    rv[33] = new Event_MergeRequiredRepositoriesIntoContainer_Intention();
    rv[34] = new MergeRequiredRepositoriesOfChildrenIntoContainer_Intention();
    rv[35] = new IgnoredVariablesArrangementIntention_Intention();
    rv[36] = new UsedDerivationRulesArrangementIntention_Intention();
    rv[37] = new IDtoDerivitionToggleIgnoreVariablesVisibility_Intention();
    rv[38] = new IDtoDerivitionToggleUsedRulesVisibility_Intention();
    rv[39] = new ToggleDerivationRuleUsage_Intention();
    rv[40] = new IDtoDerivable_CreateDtoDerivition_Intention_Intention();
    rv[41] = new Dto_DeriveFrom_Intention_Intention();
    rv[42] = new DtoFlattening_ChangeNameConvention_intention_Intention();
    rv[43] = new IDtoDerivable_CreateFlatteningRule_Intention();
    rv[44] = new CommandContainer_ToggleForAggregateDeclaration_Intention_Intention();
    rv[45] = new DeriveIdOfEntity_Intention();
    return Arrays.asList(rv);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c99L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e243eL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2a075c454595567L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f903L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f985L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8fdL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2438L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da50864411af9fL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb96433e80624L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce505e12ecL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce4ff7203eL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce5022785eL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910f901bdaeL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f983L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16ea31L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643f0517eL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ec6f33L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2444L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3a4bff7934079ff4L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122acef4d6L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f7L)).seal();
}
