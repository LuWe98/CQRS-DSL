package CQRS.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.openapi.intentions.ParameterizedIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CQRS.behavior.IOptionalValidIdentifierWrapper__BehaviorDescriptor;
import CQRS.behavior.IComponentWithNamePlaceholder__BehaviorDescriptor;
import CQRS.util.EditorContextUtils;
import CQRS.behavior.CommandContainer__BehaviorDescriptor;
import java.util.Objects;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class CommandContainer_ToggleForAggregateDeclaration_Intention_Intention extends AbstractIntentionDescriptor implements IntentionFactory {

  public CommandContainer_ToggleForAggregateDeclaration_Intention_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:ff36ef3b-9652-473a-8811-c1d101cc2db3(CQRS.intentions)", "5800372501164318557"));
  }

  @Override
  public String getPresentation() {
    return "CommandContainer_ToggleForAggregateDeclaration_Intention";
  }

  @Override
  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    List<IntentionExecutable> list = ListSequence.fromList(new ArrayList<IntentionExecutable>());
    List<Boolean> paramList = parameter(node, context);
    if (paramList != null) {
      for (boolean param : paramList) {
        ListSequence.fromList(list).addElement(new IntentionImplementation(param));
      }
    }
    return list;
  }
  private List<Boolean> parameter(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromListAndArray(new ArrayList<Boolean>(), true, false);
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable implements ParameterizedIntentionExecutable {
    private boolean myParameter;
    public IntentionImplementation(boolean parameter) {
      myParameter = parameter;
    }

    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return ((myParameter ? "Add" : "Remove")) + " 'for' aggregate declaration";
    }

    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      if (myParameter) {
        SPropertyOperations.set(node, PROPS.shouldDisplayAggregate$eU79, true);
        SelectionUtil.selectLabelCellAnSetCaret(editorContext, node, "forAggregateBlockId", -1);
        return;
      }

      SNodeOperations.deleteNode(SLinkOperations.getTarget(node, LINKS.aggregateReference$V1gV));
      if (!((boolean) IOptionalValidIdentifierWrapper__BehaviorDescriptor.isNameSet_id2RbvdOKU7zU.invoke(SLinkOperations.getTarget(node, LINKS.nameWrapper$X65Q)))) {
        IComponentWithNamePlaceholder__BehaviorDescriptor.setName_id2RbvdOMpYd2.invoke(node, null);
      }

      if (EditorContextUtils.isSelectedCellChildOf(editorContext, "forAggregateBlockId")) {
        if ((boolean) CommandContainer__BehaviorDescriptor.isCommandHandler_id1LTEHzOfCt.invoke(node)) {
          SelectionUtil.selectLabelCellAnSetCaret(editorContext, SLinkOperations.getTarget(node, LINKS.nameWrapper$X65Q), "nameCellId", -1);
          return;
        }
        SelectionUtil.selectLabelCellAnSetCaret(editorContext, node, "containerTypeCellId", -1);
      }

      SPropertyOperations.set(node, PROPS.shouldDisplayAggregate$eU79, false);
    }

    @Override
    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      if (!(isApplicableToNode(node, editorContext))) {
        return false;
      }
      return true;
    }

    private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
      return !(Objects.equals(SPropertyOperations.getBoolean(node, PROPS.shouldDisplayAggregate$eU79), myParameter));
    }


    @Override
    public IntentionDescriptor getDescriptor() {
      return CommandContainer_ToggleForAggregateDeclaration_Intention_Intention.this;
    }

    public Object getParameter() {
      return myParameter;
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty shouldDisplayAggregate$eU79 = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2a075c454595567L, 0x507f100ee0ae3ec7L, "shouldDisplayAggregate");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink aggregateReference$V1gV = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2a075c454595567L, 0x7849637c487da2bcL, "aggregateReference");
    /*package*/ static final SContainmentLink nameWrapper$X65Q = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x71e6ab661db3f2L, 0x2dcb7cdd32004e34L, "nameWrapper");
  }
}
