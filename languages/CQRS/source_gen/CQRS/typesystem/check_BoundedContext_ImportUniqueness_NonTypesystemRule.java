package CQRS.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import CQRS.util.CollectionUtils;
import CQRS.behavior.BoundedContext__BehaviorDescriptor;
import CQRS.behavior.ImportStatement__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class check_BoundedContext_ImportUniqueness_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_BoundedContext_ImportUniqueness_NonTypesystemRule() {
  }
  public void applyRule(final SNode boundedContext, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    CollectionUtils.forEachDuplicateValue(BoundedContext__BehaviorDescriptor.importStatements_id5SyewCcprln.invoke(boundedContext), (SNode i) -> (String) ImportStatement__BehaviorDescriptor.qualifiedName_id3DbZR$OfNHM.invoke(i), (SNode i) -> {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(i, "Import for for qualified name '" + ImportStatement__BehaviorDescriptor.qualifiedName_id3DbZR$OfNHM.invoke(i) + "' has already been defined", "r:536879c6-46f8-4c9c-860d-b388e5bcaaf0(CQRS.typesystem)", "2302485497079295460", null, errorTarget);
      }
    });
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.BoundedContext$RF;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BoundedContext$RF = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x49ba7df3e302f916L, "CQRS.structure.BoundedContext");
  }
}
