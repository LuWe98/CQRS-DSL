package CQRS.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CQRS.helper.VariableWrapper;
import CQRS.behavior.IDtoDerivation__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_Dto_DerivationParameterSignature_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Dto_DerivationParameterSignature_NonTypesystemRule() {
  }
  public void applyRule(final SNode dto, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if ((SLinkOperations.getTarget(dto, LINKS.derivableReference$gfNO) == null)) {
      return;
    }

    final Iterable<VariableWrapper> usedWrappers = IDtoDerivation__BehaviorDescriptor.getUsedVariableWrappers_id1vyzkEMwXLH.invoke(dto);

    ListSequence.fromList(SLinkOperations.getChildren(dto, LINKS.parameters$t6h4)).visitAll(new IVisitor<SNode>() {
      public void visit(final SNode parameter) {
        Iterable<VariableWrapper> wrappersWithSameName = Sequence.fromIterable(usedWrappers).where(new IWhereFilter<VariableWrapper>() {
          public boolean accept(VariableWrapper it) {
            return Objects.equals(it.getVariableName(), SPropertyOperations.getString(parameter, PROPS.name$MnvL));
          }
        });
        if (Sequence.fromIterable(wrappersWithSameName).isNotEmpty()) {
          String duplicateVariables = IterableUtils.join(Sequence.fromIterable(wrappersWithSameName).select(new ISelector<VariableWrapper, String>() {
            public String select(VariableWrapper it) {
              return it.getVariableName();
            }
          }), ",");
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(dto, LINKS.derivableReference$gfNO), "Dto is already defining parameters with the name: " + duplicateVariables, "r:536879c6-46f8-4c9c-860d-b388e5bcaaf0(CQRS.typesystem)", "5501684679001433603", null, errorTarget);
          }
          return;
        }
      }
    });
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Dto$yu;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink derivableReference$gfNO = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L, 0x3cfd707898583364L, "derivableReference");
    /*package*/ static final SContainmentLink parameters$t6h4 = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb96433e80624L, 0x62cb96433e80625L, "parameters");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Dto$yu = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f903L, "CQRS.structure.Dto");
  }
}
