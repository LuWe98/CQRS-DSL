package CQRS.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import CQRS.behavior.AggregateRootRepository__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import CQRS.behavior.IDataType__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_AggregateRootRepository_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_AggregateRootRepository_NonTypesystemRule() {
  }
  public void applyRule(final SNode aggregateRootRepository, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    MethodExtensions.forEachMethodWithSameSignature(AggregateRootRepository__BehaviorDescriptor.methods_id23PrvZQXxsd.invoke(aggregateRootRepository), (SNode method) -> {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(method, "Method signature already defined", "r:536879c6-46f8-4c9c-860d-b388e5bcaaf0(CQRS.typesystem)", "2374925324635237832", null, errorTarget);
      }
    });

    if (!(SPropertyOperations.getBoolean(aggregateRootRepository, PROPS.isIdRepository$Umet)) && !(Sequence.fromIterable(AggregateRootRepository__BehaviorDescriptor.methods_id23PrvZQXxsd.invoke(aggregateRootRepository)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (boolean) IDataType__BehaviorDescriptor.hasSameDatatype_id3DbZR$NHBwn.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(it, LINKS.returnTypeWrapper$BjS0), LINKS.wrappedType$gJ$), SLinkOperations.getTarget(aggregateRootRepository, LINKS.aggregateReference$1ZNc));
      }
    }))) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(aggregateRootRepository, "Aggregate Repository should provide a method which returns ".concat(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(aggregateRootRepository, LINKS.aggregateReference$1ZNc), LINKS.aggregate$D_P$), PROPS.name$MnvL)), "r:536879c6-46f8-4c9c-860d-b388e5bcaaf0(CQRS.typesystem)", "6783047803566127917", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.AggregateRootRepository$qW;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink aggregateReference$1ZNc = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL, 0x5e223a0a09fe3269L, "aggregateReference");
    /*package*/ static final SReferenceLink aggregate$D_P$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f2L, 0x4f0a0db9ac16f8f3L, "aggregate");
    /*package*/ static final SContainmentLink returnTypeWrapper$BjS0 = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643f0517eL, 0x73da50864400d215L, "returnTypeWrapper");
    /*package*/ static final SContainmentLink wrappedType$gJ$ = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x631212aed3936ea2L, 0x631212aed3936ea3L, "wrappedType");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty isIdRepository$Umet = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL, 0x73da5086441fb1a2L, "isIdRepository");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept AggregateRootRepository$qW = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL, "CQRS.structure.AggregateRootRepository");
  }
}
