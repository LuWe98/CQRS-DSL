package CQRS.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import CQRS.behavior.IDtoDerivationRuleReference__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public class check_IDtoDerivation_AreOnlyExplicitRulesUSed_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_IDtoDerivation_AreOnlyExplicitRulesUSed_NonTypesystemRule() {
  }
  public void applyRule(final SNode derivation, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    ListSequence.fromList(SLinkOperations.getChildren(derivation, LINKS.derivationRuleReferences$YFqo)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SEnumOperations.isMember(SPropertyOperations.getEnum(IDtoDerivationRuleReference__BehaviorDescriptor.getReferencedRule_id5YqiGT0mxXR.invoke(it), PROPS.usage$2GTC), 0x5d9cf3447c0f9e32L);
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode reference) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(reference, "Only 'explicit' derivation rules can be used here", "r:536879c6-46f8-4c9c-860d-b388e5bcaaf0(CQRS.typesystem)", "757976835740459694", null, errorTarget);
        }
      }
    });
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.IDtoDerivation$Yg;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink derivationRuleReferences$YFqo = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L, 0x5d9cf3447c21f3d5L, "derivationRuleReferences");
  }

  private static final class PROPS {
    /*package*/ static final SProperty usage$2GTC = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f983L, 0x5d9cf3447c0f9e36L, "usage");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IDtoDerivation$Yg = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L, "CQRS.structure.IDtoDerivation");
  }
}
