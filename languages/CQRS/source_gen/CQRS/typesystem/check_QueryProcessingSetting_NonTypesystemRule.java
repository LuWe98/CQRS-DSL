package CQRS.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import CQRS.behavior.QueryProcessingSetting__BehaviorDescriptor;
import CQRS.behavior.QueryGenerationSettings__BehaviorDescriptor;
import CQRS.behavior.QueryHandlingSetting__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import CQRS.behavior.BoundedContext__BehaviorDescriptor;
import CQRS.behavior.IElementOfBoundedContext__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import CQRS.behavior.QueryContainer__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_QueryProcessingSetting_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_QueryProcessingSetting_NonTypesystemRule() {
  }
  public void applyRule(final SNode settings, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (!(SPropertyOperations.getBoolean(settings, PROPS.useProcessingImplementation$lPWW))) {
      return;
    }

    SNode querySettings = QueryProcessingSetting__BehaviorDescriptor.getQuerySettings_id5qxF18F4gHy.invoke(settings);

    if ((boolean) QueryGenerationSettings__BehaviorDescriptor.isQueryHandlingSettingDefined_id5qxF18ESB_m.invoke(querySettings) && !((boolean) QueryHandlingSetting__BehaviorDescriptor.isSeparatedHandling_id5qxF18FbINt.invoke(QueryGenerationSettings__BehaviorDescriptor.getQueryHandlingSetting_id5qxF18ESB_u.invoke(querySettings)))) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(settings, "'handling' has to be of type 'separated' in order to use a query processing implementation", "r:536879c6-46f8-4c9c-860d-b388e5bcaaf0(CQRS.typesystem)", "6242459752544158375", null, errorTarget);
      }
    }

    if (Sequence.fromIterable(BoundedContext__BehaviorDescriptor.queryContainers_id3DbZR$O3FhA.invoke(IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(settings))).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !((boolean) QueryContainer__BehaviorDescriptor.isQueriesBlock_id6gxxZVtebNx.invoke(it));
      }
    })) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(settings, "Generation of processing is only possible if no 'query service' or 'query handler' are defined", "r:536879c6-46f8-4c9c-860d-b388e5bcaaf0(CQRS.typesystem)", "6242459752546797552", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.QueryProcessingSetting$UD;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty useProcessingImplementation$lPWW = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122acef4d6L, 0x56a1ac122aebcd3fL, "useProcessingImplementation");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept QueryProcessingSetting$UD = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122acef4d6L, "CQRS.structure.QueryProcessingSetting");
  }
}
