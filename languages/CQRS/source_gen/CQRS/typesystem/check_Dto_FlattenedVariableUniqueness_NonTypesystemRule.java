package CQRS.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import CQRS.behavior.IDtoDerivation__BehaviorDescriptor;
import CQRS.helper.VariableWrapper;
import CQRS.util.CollectionUtils;
import CQRS.helper.DerivedVariableWrapper;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_Dto_FlattenedVariableUniqueness_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Dto_FlattenedVariableUniqueness_NonTypesystemRule() {
  }
  public void applyRule(final SNode dto, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (!((boolean) IDtoDerivation__BehaviorDescriptor.isDerived_id3NXs7yomeLh.invoke(dto))) {
      return;
    }

    Iterable<VariableWrapper> wrappers = IDtoDerivation__BehaviorDescriptor.getUsedVariableWrappers_id1vyzkEMwXLH.invoke(dto);

    CollectionUtils.forEachDuplicateValue(wrappers, (VariableWrapper wrapper) -> wrapper.getVariableName(), (VariableWrapper wrapper) -> {
      if (wrapper instanceof DerivedVariableWrapper) {
        DerivedVariableWrapper derivedWrapper = as_hc4zsx_a0a0a0a2a4a1(wrapper, DerivedVariableWrapper.class);
        SNode dtoDerivable = derivedWrapper.findVariableOrigin();
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(dto, "Dto is already defining derived parameters with the name: " + wrapper.getVariableName() + ".\nConsider using a 'suffix' or 'prefix' for flattening rules involving '" + SPropertyOperations.getString(dtoDerivable, PROPS.name$MnvL) + "' or ignore said variable.", "r:536879c6-46f8-4c9c-860d-b388e5bcaaf0(CQRS.typesystem)", "2302485497086980408", null, errorTarget);
        }
      }
    });


  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Dto$yu;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static <T> T as_hc4zsx_a0a0a0a2a4a1(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Dto$yu = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f903L, "CQRS.structure.Dto");
  }
}
