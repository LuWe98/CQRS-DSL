package CQRS.typesystem;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Objects;

public class ListExtensions {
  public ListExtensions() {
  }
  public static <K, V> void forEachDuplicateValue(final Iterable<K> _this, _FunctionTypes._return_P1_E0<? extends V, ? super K> valueProvider, _FunctionTypes._void_P1_E0<? super K> callback) {
    if (Sequence.fromIterable(_this).count() < 2) {
      return;
    }

    Map<V, Integer> valueIndexMap = MapSequence.fromMap(new HashMap<V, Integer>());
    List<K> keys = Sequence.fromIterable(_this).toListSequence();

    for (int i = 0; i < Sequence.fromIterable(_this).count(); i++) {
      K key = ListSequence.fromList(keys).getElement(i);
      V value = valueProvider.invoke(key);

      if (Objects.equals(value, null)) {
        continue;
      }

      if (!(MapSequence.fromMap(valueIndexMap).containsKey(value))) {
        MapSequence.fromMap(valueIndexMap).put(value, i);
      } else {
        callback.invoke(key);
        callback.invoke(ListSequence.fromList(keys).getElement(MapSequence.fromMap(valueIndexMap).get(value)));
      }
    }
  }
}
