package CQRS.typesystem;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class MethodExtensions {
  public MethodExtensions() {
  }
  public static void forEachMethodWithSameSignature(final Iterable<SNode> _this, _FunctionTypes._void_P1_E0<? super SNode> callback) {
    List<SNode> methods = Sequence.fromIterable(_this).toListSequence();
    for (int i = 0; i < ListSequence.fromList(methods).count(); i++) {
      SNode method = ListSequence.fromList(methods).getElement(i);
      if (SPropertyOperations.getString(method, PROPS.name$MnvL) == null) {
        continue;
      }

      for (int j = i + 1; j < ListSequence.fromList(methods).count(); j++) {
        SNode otherMethod = ListSequence.fromList(methods).getElement(j);
        if (SPropertyOperations.getString(otherMethod, PROPS.name$MnvL) == null) {
          continue;
        }

        if (Objects.equals(SPropertyOperations.getString(method, PROPS.name$MnvL), SPropertyOperations.getString(otherMethod, PROPS.name$MnvL)) && MethodExtensions.areParametersTheSame(method, otherMethod)) {
          callback.invoke(method);
          callback.invoke(otherMethod);
        }
      }
    }
  }
  public static boolean areParametersTheSame(final SNode _this, SNode otherMethod) {
    return ParameterExtensions.areParametersTheSame(SLinkOperations.getChildren(_this, LINKS.parameters$t6h4), SLinkOperations.getChildren(otherMethod, LINKS.parameters$t6h4));
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink parameters$t6h4 = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb96433e80624L, 0x62cb96433e80625L, "parameters");
  }
}
