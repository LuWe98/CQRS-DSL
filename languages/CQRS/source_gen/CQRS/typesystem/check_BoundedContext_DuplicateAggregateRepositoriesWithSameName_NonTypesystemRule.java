package CQRS.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.Map;
import java.util.List;
import CQRS.util.CollectionUtils;
import CQRS.behavior.BoundedContext__BehaviorDescriptor;
import CQRS.behavior.IRepository__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Objects;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import CQRS.behavior.AggregateRoot__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class check_BoundedContext_DuplicateAggregateRepositoriesWithSameName_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_BoundedContext_DuplicateAggregateRepositoriesWithSameName_NonTypesystemRule() {
  }
  public void applyRule(final SNode boundedContext, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Map<String, List<SNode>> grouping = CollectionUtils.groupBy(BoundedContext__BehaviorDescriptor.aggregateRoots_id7fqk8p3M$40.invoke(boundedContext), (SNode aggregateRoot) -> (String) IRepository__BehaviorDescriptor.repositoryName_idmdpAJL$$QT.invoke(aggregateRoot));

    for (final String key : MapSequence.fromMap(grouping).keySet()) {
      List<SNode> repositories = MapSequence.fromMap(grouping).get(key);

      if (ListSequence.fromList(repositories).count() > 1 && !(Objects.equals(key, null))) {
        ListSequence.fromList(repositories).visitAll(new IVisitor<SNode>() {
          public void visit(SNode component) {
            if ((boolean) AggregateRoot__BehaviorDescriptor.hasDefinedRepository_id2Bsub$KTQ$T.invoke(component)) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(AggregateRoot__BehaviorDescriptor.repository_id3AwzpICw894.invoke(component), "Another aggregate repository with name '" + key + "' is already defined", "r:536879c6-46f8-4c9c-860d-b388e5bcaaf0(CQRS.typesystem)", "4421886450484416576", null, errorTarget);
              }
            } else {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(component, "The derived repository name '" + key + "' of this aggregate is already explicitly defined", "r:536879c6-46f8-4c9c-860d-b388e5bcaaf0(CQRS.typesystem)", "4421886450486531032", null, errorTarget);
              }
            }
          }
        });
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.BoundedContext$RF;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BoundedContext$RF = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x49ba7df3e302f916L, "CQRS.structure.BoundedContext");
  }
}
