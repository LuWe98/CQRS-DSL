package CQRS.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CQRS.behavior.BoundedContext__BehaviorDescriptor;
import CQRS.behavior.IElementOfBoundedContext__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import CQRS.behavior.IDtoDerivation__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import CQRS.behavior.IDtoDerivableReference__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.NotNullWhereFilter;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class check_Dto_DerivationDependency_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Dto_DerivationDependency_NonTypesystemRule() {
  }
  public void applyRule(final SNode dto, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if ((SLinkOperations.getTarget(dto, LINKS.derivableReference$gfNO) == null)) {
      return;
    }

    final Iterable<SNode> definedDtoDerivables = BoundedContext__BehaviorDescriptor.findUsedDtoDerivables_id4LpUh3TnW_R.invoke(IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(dto));

    Iterable<String> variablesWithDerivableReference = Sequence.fromIterable(IDtoDerivation__BehaviorDescriptor.getUsedVariables_id3NXs7yp5PgA.invoke(dto)).select(new ISelector<SNode, String>() {
      public String select(SNode variable) {
        List<SNode> derivableReferences = SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(variable, LINKS.type$AxAW), CONCEPTS.IDtoDerivableReference$dn, true, new SAbstractConcept[]{});

        String invalidTypeString = IterableUtils.join(ListSequence.fromList(derivableReferences).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return !(Sequence.fromIterable(definedDtoDerivables).contains(IDtoDerivableReference__BehaviorDescriptor.getDtoDerivable_id4LpUh3T0tIy.invoke(it)));
          }
        }).select(new ISelector<SNode, String>() {
          public String select(SNode it) {
            return SPropertyOperations.getString(IDtoDerivableReference__BehaviorDescriptor.getDtoDerivable_id4LpUh3T0tIy.invoke(it), PROPS.name$MnvL);
          }
        }), ", ");

        return ((invalidTypeString == null || invalidTypeString.length() == 0) ? null : SPropertyOperations.getString(variable, PROPS.name$MnvL) + " -> " + invalidTypeString);
      }
    }).where(new NotNullWhereFilter<String>());

    if (Sequence.fromIterable(variablesWithDerivableReference).isEmpty()) {
      return;
    }

    String invalidVariablesWithTypeString = IterableUtils.join(Sequence.fromIterable(variablesWithDerivableReference), "\n");

    {
      final MessageTarget errorTarget = new NodeMessageTarget();
      IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(dto, LINKS.derivableReference$gfNO), "Derived structure has some unresolvable types. \n Create another derived dto or flattening rules for these types or add them to the ignored variable list.\n\n Unresolvable variables:\n" + invalidVariablesWithTypeString, "r:536879c6-46f8-4c9c-860d-b388e5bcaaf0(CQRS.typesystem)", "757976835746009789", null, errorTarget);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Dto$yu;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink derivableReference$gfNO = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L, 0x3cfd707898583364L, "derivableReference");
    /*package*/ static final SContainmentLink type$AxAW = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910fb0ed95eL, 0x4c59e910fe2b0ee9L, "type");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IDtoDerivableReference$dn = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910f8f63541L, "CQRS.structure.IDtoDerivableReference");
    /*package*/ static final SConcept Dto$yu = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f903L, "CQRS.structure.Dto");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
