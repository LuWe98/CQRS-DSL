package CQRS.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import CQRS.behavior.BoundedContext__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import CQRS.behavior.IDtoDerivation__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class check_BoundedContext_CheckDtoDirectDerivitionUniqueness_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_BoundedContext_CheckDtoDirectDerivitionUniqueness_NonTypesystemRule() {
  }
  public void applyRule(final SNode boundedContext, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final Iterable<SNode> derivedDtos = BoundedContext__BehaviorDescriptor.derivedDtos_id4LpUh3WpZ6g.invoke(boundedContext);

    Sequence.fromIterable(derivedDtos).visitAll(new IVisitor<SNode>() {
      public void visit(final SNode dto) {
        Iterable<SNode> duplicateDerivedDtos = Sequence.fromIterable(derivedDtos).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return IDtoDerivation__BehaviorDescriptor.getDtoDerivable_id3NXs7yomd17.invoke(it) == IDtoDerivation__BehaviorDescriptor.getDtoDerivable_id3NXs7yomd17.invoke(dto);
          }
        });
        if (Sequence.fromIterable(duplicateDerivedDtos).count() > 1) {
          Sequence.fromIterable(duplicateDerivedDtos).visitAll(new IVisitor<SNode>() {
            public void visit(SNode it) {
              // TODO Check ob man das hinzuf√ºgen sollte
            }
          });
        }
      }
    });
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.BoundedContext$RF;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BoundedContext$RF = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x49ba7df3e302f916L, "CQRS.structure.BoundedContext");
  }
}
