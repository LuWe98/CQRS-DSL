package CQRS.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CQRS.behavior.QueryContainerMethods__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import CQRS.behavior.QueryContainer__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import CQRS.behavior.Query__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_QueryContainerMethodsReturnTypes_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_QueryContainerMethodsReturnTypes_NonTypesystemRule() {
  }
  public void applyRule(final SNode queryContainerMethods, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final SNode allowedDto = SLinkOperations.getTarget(SLinkOperations.getTarget(QueryContainerMethods__BehaviorDescriptor.dtoRepository_id5A5sGroHXVV.invoke(queryContainerMethods), LINKS.dtoReference$pHOR), LINKS.dto$DOQ$);
    ListSequence.fromList(SLinkOperations.getChildren(queryContainerMethods, LINKS.queryContainerReference$omL$)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode queryContainerReference) {
        SNode queryContainer = SLinkOperations.getTarget(queryContainerReference, LINKS.queryContainer$onw4);
        if (Sequence.fromIterable(QueryContainer__BehaviorDescriptor.queries_id5SyewCaMpun.invoke(queryContainer)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return !((boolean) Query__BehaviorDescriptor.areOnlyValidDtoReferencesUsed_id3aCsR_csrN7.invoke(it, allowedDto));
          }
        })) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(queryContainerReference, "Query " + SEnumOperations.getMemberPresentation(SPropertyOperations.getEnum(queryContainer, PROPS.type$7YBQ)) + " contains queries which return an invalid dto type. Allowed: " + SPropertyOperations.getString(allowedDto, PROPS.name$MnvL), "r:536879c6-46f8-4c9c-860d-b388e5bcaaf0(CQRS.typesystem)", "3650294462797613712", null, errorTarget);
          }
        }
      }
    });
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.QueryContainerMethods$BL;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink dtoReference$pHOR = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867ab796ffL, 0x1f11be867ad98c0bL, "dtoReference");
    /*package*/ static final SReferenceLink dto$DOQ$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f906L, 0x4f0a0db9ac16f907L, "dto");
    /*package*/ static final SContainmentLink queryContainerReference$omL$ = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c89L, 0x642187fedcaf0c8aL, "queryContainerReference");
    /*package*/ static final SReferenceLink queryContainer$onw4 = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c8cL, 0x642187fedcaf0c8dL, "queryContainer");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty type$7YBQ = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3a4bff7934079ff4L, 0x1f11be867ad316efL, "type");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept QueryContainerMethods$BL = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c89L, "CQRS.structure.QueryContainerMethods");
  }
}
