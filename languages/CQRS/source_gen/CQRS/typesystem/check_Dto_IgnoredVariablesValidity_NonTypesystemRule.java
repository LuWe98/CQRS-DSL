package CQRS.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import CQRS.behavior.IDtoDerivation__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import CQRS.behavior.IVariableReference__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_Dto_IgnoredVariablesValidity_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Dto_IgnoredVariablesValidity_NonTypesystemRule() {
  }
  public void applyRule(final SNode dto, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final Iterable<SNode> availableVariables = IDtoDerivation__BehaviorDescriptor.getAvailableVariables_id3NXs7yp5UST.invoke(dto);
    Iterable<SNode> invalidIgnoredVariableReferences = ListSequence.fromList(SLinkOperations.getChildren(dto, LINKS.ignoredVariableReferences$gg2P)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(Sequence.fromIterable(availableVariables).contains(IVariableReference__BehaviorDescriptor.getReferencedVariable_id4LpUh3V3HC0.invoke(it)));
      }
    });
    Sequence.fromIterable(invalidIgnoredVariableReferences).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(it, "Unresolvable variable.", "r:536879c6-46f8-4c9c-860d-b388e5bcaaf0(CQRS.typesystem)", "8702437249780849444", null, errorTarget);
        }
      }
    });
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Dto$yu;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink ignoredVariableReferences$gg2P = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L, 0x3cfd707898583365L, "ignoredVariableReferences");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Dto$yu = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f903L, "CQRS.structure.Dto");
  }
}
