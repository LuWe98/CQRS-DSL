package CQRS.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AggregateRoot;
  private ConceptPresentation props_AggregateRootReference;
  private ConceptPresentation props_AggregateRootRepository;
  private ConceptPresentation props_AggregateRootRepositoryReference;
  private ConceptPresentation props_ArrayType;
  private ConceptPresentation props_BooleanType;
  private ConceptPresentation props_BoundedContext;
  private ConceptPresentation props_ByteType;
  private ConceptPresentation props_CharType;
  private ConceptPresentation props_Command;
  private ConceptPresentation props_CommandContainer;
  private ConceptPresentation props_CommandGenerationSettings;
  private ConceptPresentation props_CommandHandlingSetting;
  private ConceptPresentation props_CommandReference;
  private ConceptPresentation props_CommentLine;
  private ConceptPresentation props_DataTypeWrapper;
  private ConceptPresentation props_Description;
  private ConceptPresentation props_DescriptionLine;
  private ConceptPresentation props_DoubleType;
  private ConceptPresentation props_Dto;
  private ConceptPresentation props_DtoDataTypeRule;
  private ConceptPresentation props_DtoDataTypeRuleContainer;
  private ConceptPresentation props_DtoDataTypeRuleReference;
  private ConceptPresentation props_DtoDerivedVariableReference;
  private ConceptPresentation props_DtoFlatteningRule;
  private ConceptPresentation props_DtoFlatteningRuleContainer;
  private ConceptPresentation props_DtoFlatteningRuleReference;
  private ConceptPresentation props_DtoReference;
  private ConceptPresentation props_DtoRepository;
  private ConceptPresentation props_DtoRepositoryReference;
  private ConceptPresentation props_EmptyLine;
  private ConceptPresentation props_Entity;
  private ConceptPresentation props_EntityReference;
  private ConceptPresentation props_Event;
  private ConceptPresentation props_EventContainer;
  private ConceptPresentation props_EventContainerReference;
  private ConceptPresentation props_EventGenerationSettings;
  private ConceptPresentation props_EventHandlingSetting;
  private ConceptPresentation props_EventReference;
  private ConceptPresentation props_FloatType;
  private ConceptPresentation props_GenerationSettings;
  private ConceptPresentation props_GenericType;
  private ConceptPresentation props_IAggregateRootComponent;
  private ConceptPresentation props_IAggregateRootRepositoryComponent;
  private ConceptPresentation props_IBoundedContextComponent;
  private ConceptPresentation props_ICollectionType;
  private ConceptPresentation props_ICommandComponent;
  private ConceptPresentation props_ICommandContainerComponent;
  private ConceptPresentation props_ICommandGenerationSettingsComponent;
  private ConceptPresentation props_IComponentWithAggregateRootRepositoryReferences;
  private ConceptPresentation props_IComponentWithDtoRepositoryReferences;
  private ConceptPresentation props_IComponentWithNamePlaceholder;
  private ConceptPresentation props_IComponentWithParameters;
  private ConceptPresentation props_IComponentWithRepositoryReferences;
  private ConceptPresentation props_IComponentWithRequiredParameters;
  private ConceptPresentation props_IComponentWithToggleableKeyword;
  private ConceptPresentation props_IContainsComponentsWithToggleableKeywords;
  private ConceptPresentation props_IDataType;
  private ConceptPresentation props_IDtoComponent;
  private ConceptPresentation props_IDtoDataTypeRuleContainerComponent;
  private ConceptPresentation props_IDtoDerivable;
  private ConceptPresentation props_IDtoDerivableReference;
  private ConceptPresentation props_IDtoDerivation;
  private ConceptPresentation props_IDtoDerivationRule;
  private ConceptPresentation props_IDtoDerivationRuleContainer;
  private ConceptPresentation props_IDtoDerivationRuleReference;
  private ConceptPresentation props_IDtoFlatteningRuleContainerComponent;
  private ConceptPresentation props_IDtoRepositoryComponent;
  private ConceptPresentation props_IElementOfBoundedContext;
  private ConceptPresentation props_IEntityComponent;
  private ConceptPresentation props_IEventComponent;
  private ConceptPresentation props_IEventContainerComponent;
  private ConceptPresentation props_IEventGenerationSettingsComponent;
  private ConceptPresentation props_IGeneratorSettingsComponent;
  private ConceptPresentation props_IOptionalValidIdentifier;
  private ConceptPresentation props_IOptionalValidIdentifierWrapper;
  private ConceptPresentation props_IPrimitiveType;
  private ConceptPresentation props_IQueryComponent;
  private ConceptPresentation props_IQueryContainerComponent;
  private ConceptPresentation props_IQueryGenerationSettingsComponent;
  private ConceptPresentation props_IReferenceType;
  private ConceptPresentation props_IRepository;
  private ConceptPresentation props_IRepositoryReference;
  private ConceptPresentation props_IRepositorySubstitude;
  private ConceptPresentation props_IValueObjectComponent;
  private ConceptPresentation props_IVariable;
  private ConceptPresentation props_IVariableReference;
  private ConceptPresentation props_ImportPackage;
  private ConceptPresentation props_ImportStatement;
  private ConceptPresentation props_ImportedType;
  private ConceptPresentation props_IntegerType;
  private ConceptPresentation props_JavaDataType;
  private ConceptPresentation props_KotlinDataType;
  private ConceptPresentation props_ListType;
  private ConceptPresentation props_LongType;
  private ConceptPresentation props_MapType;
  private ConceptPresentation props_Method;
  private ConceptPresentation props_OutputPathPreference;
  private ConceptPresentation props_Parameter;
  private ConceptPresentation props_ParameterReference;
  private ConceptPresentation props_Property;
  private ConceptPresentation props_PropertyReference;
  private ConceptPresentation props_Query;
  private ConceptPresentation props_QueryContainer;
  private ConceptPresentation props_QueryContainerMethods;
  private ConceptPresentation props_QueryContainerReference;
  private ConceptPresentation props_QueryGenerationSettings;
  private ConceptPresentation props_QueryHandlingSetting;
  private ConceptPresentation props_QueryMethods;
  private ConceptPresentation props_QueryProcessingSetting;
  private ConceptPresentation props_QueryReference;
  private ConceptPresentation props_SetType;
  private ConceptPresentation props_ShortType;
  private ConceptPresentation props_StringType;
  private ConceptPresentation props_SubstitudeDataType;
  private ConceptPresentation props_ValueObject;
  private ConceptPresentation props_ValueObjectReference;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AggregateRoot:
        if (props_AggregateRoot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AggregateRoot = cpb.create();
        }
        return props_AggregateRoot;
      case LanguageConceptSwitch.AggregateRootReference:
        if (props_AggregateRootReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f2L, 0x4f0a0db9ac16f8f3L, "aggregate", "", "");
          props_AggregateRootReference = cpb.create();
        }
        return props_AggregateRootReference;
      case LanguageConceptSwitch.AggregateRootRepository:
        if (props_AggregateRootRepository == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("aggregate repository");
          props_AggregateRootRepository = cpb.create();
        }
        return props_AggregateRootRepository;
      case LanguageConceptSwitch.AggregateRootRepositoryReference:
        if (props_AggregateRootRepositoryReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AggregateRootRepositoryReference");
          props_AggregateRootRepositoryReference = cpb.create();
        }
        return props_AggregateRootRepositoryReference;
      case LanguageConceptSwitch.ArrayType:
        if (props_ArrayType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("array");
          props_ArrayType = cpb.create();
        }
        return props_ArrayType;
      case LanguageConceptSwitch.BooleanType:
        if (props_BooleanType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("boolean");
          props_BooleanType = cpb.create();
        }
        return props_BooleanType;
      case LanguageConceptSwitch.BoundedContext:
        if (props_BoundedContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BoundedContext = cpb.create();
        }
        return props_BoundedContext;
      case LanguageConceptSwitch.ByteType:
        if (props_ByteType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("byte");
          props_ByteType = cpb.create();
        }
        return props_ByteType;
      case LanguageConceptSwitch.CharType:
        if (props_CharType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("char");
          props_CharType = cpb.create();
        }
        return props_CharType;
      case LanguageConceptSwitch.Command:
        if (props_Command == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Command = cpb.create();
        }
        return props_Command;
      case LanguageConceptSwitch.CommandContainer:
        if (props_CommandContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("command block");
          props_CommandContainer = cpb.create();
        }
        return props_CommandContainer;
      case LanguageConceptSwitch.CommandGenerationSettings:
        if (props_CommandGenerationSettings == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("command settings");
          props_CommandGenerationSettings = cpb.create();
        }
        return props_CommandGenerationSettings;
      case LanguageConceptSwitch.CommandHandlingSetting:
        if (props_CommandHandlingSetting == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("handling setting");
          props_CommandHandlingSetting = cpb.create();
        }
        return props_CommandHandlingSetting;
      case LanguageConceptSwitch.CommandReference:
        if (props_CommandReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2441L, 0x73da5086440e2442L, "command", "", "");
          props_CommandReference = cpb.create();
        }
        return props_CommandReference;
      case LanguageConceptSwitch.CommentLine:
        if (props_CommentLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("//");
          props_CommentLine = cpb.create();
        }
        return props_CommentLine;
      case LanguageConceptSwitch.DataTypeWrapper:
        if (props_DataTypeWrapper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Wraps an IDataType");
          cpb.rawPresentation("datatype wrapper");
          props_DataTypeWrapper = cpb.create();
        }
        return props_DataTypeWrapper;
      case LanguageConceptSwitch.Description:
        if (props_Description == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Description");
          props_Description = cpb.create();
        }
        return props_Description;
      case LanguageConceptSwitch.DescriptionLine:
        if (props_DescriptionLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DescriptionLine");
          props_DescriptionLine = cpb.create();
        }
        return props_DescriptionLine;
      case LanguageConceptSwitch.DoubleType:
        if (props_DoubleType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("double");
          props_DoubleType = cpb.create();
        }
        return props_DoubleType;
      case LanguageConceptSwitch.Dto:
        if (props_Dto == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Dto = cpb.create();
        }
        return props_Dto;
      case LanguageConceptSwitch.DtoDataTypeRule:
        if (props_DtoDataTypeRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("type rule");
          props_DtoDataTypeRule = cpb.create();
        }
        return props_DtoDataTypeRule;
      case LanguageConceptSwitch.DtoDataTypeRuleContainer:
        if (props_DtoDataTypeRuleContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("dto type rules");
          props_DtoDataTypeRuleContainer = cpb.create();
        }
        return props_DtoDataTypeRuleContainer;
      case LanguageConceptSwitch.DtoDataTypeRuleReference:
        if (props_DtoDataTypeRuleReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x78c544923a1c15a2L, 0x78c544923a1c15a3L, "rule", "", "");
          props_DtoDataTypeRuleReference = cpb.create();
        }
        return props_DtoDataTypeRuleReference;
      case LanguageConceptSwitch.DtoDerivedVariableReference:
        if (props_DtoDerivedVariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x5d9cf3447d900a56L, 0x5d9cf3447d900a59L, "variable", "", "");
          props_DtoDerivedVariableReference = cpb.create();
        }
        return props_DtoDerivedVariableReference;
      case LanguageConceptSwitch.DtoFlatteningRule:
        if (props_DtoFlatteningRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("flattening rule");
          props_DtoFlatteningRule = cpb.create();
        }
        return props_DtoFlatteningRule;
      case LanguageConceptSwitch.DtoFlatteningRuleContainer:
        if (props_DtoFlatteningRuleContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("dto flattening rules");
          props_DtoFlatteningRuleContainer = cpb.create();
        }
        return props_DtoFlatteningRuleContainer;
      case LanguageConceptSwitch.DtoFlatteningRuleReference:
        if (props_DtoFlatteningRuleReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x78c544923a1c15a0L, 0x78c544923a1c15a1L, "rule", "", "");
          props_DtoFlatteningRuleReference = cpb.create();
        }
        return props_DtoFlatteningRuleReference;
      case LanguageConceptSwitch.DtoReference:
        if (props_DtoReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f906L, 0x4f0a0db9ac16f907L, "dto", "", "");
          props_DtoReference = cpb.create();
        }
        return props_DtoReference;
      case LanguageConceptSwitch.DtoRepository:
        if (props_DtoRepository == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("dto repository");
          props_DtoRepository = cpb.create();
        }
        return props_DtoRepository;
      case LanguageConceptSwitch.DtoRepositoryReference:
        if (props_DtoRepositoryReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedbd24164L, 0x642187fedbd2416aL, "dtoRepository", "", "");
          props_DtoRepositoryReference = cpb.create();
        }
        return props_DtoRepositoryReference;
      case LanguageConceptSwitch.EmptyLine:
        if (props_EmptyLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmptyLine");
          props_EmptyLine = cpb.create();
        }
        return props_EmptyLine;
      case LanguageConceptSwitch.Entity:
        if (props_Entity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Entity = cpb.create();
        }
        return props_Entity;
      case LanguageConceptSwitch.EntityReference:
        if (props_EntityReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f900L, 0x4f0a0db9ac16f901L, "entity", "", "");
          props_EntityReference = cpb.create();
        }
        return props_EntityReference;
      case LanguageConceptSwitch.Event:
        if (props_Event == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Event = cpb.create();
        }
        return props_Event;
      case LanguageConceptSwitch.EventContainer:
        if (props_EventContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("event block");
          props_EventContainer = cpb.create();
        }
        return props_EventContainer;
      case LanguageConceptSwitch.EventContainerReference:
        if (props_EventContainerReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce4d64aaaeL, 0x54ffa6ce4d64aaafL, "eventContainer", "", "");
          props_EventContainerReference = cpb.create();
        }
        return props_EventContainerReference;
      case LanguageConceptSwitch.EventGenerationSettings:
        if (props_EventGenerationSettings == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("event settings");
          props_EventGenerationSettings = cpb.create();
        }
        return props_EventGenerationSettings;
      case LanguageConceptSwitch.EventHandlingSetting:
        if (props_EventHandlingSetting == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("handling setting");
          props_EventHandlingSetting = cpb.create();
        }
        return props_EventHandlingSetting;
      case LanguageConceptSwitch.EventReference:
        if (props_EventReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2439L, 0x73da5086440e243cL, "event", "", "");
          props_EventReference = cpb.create();
        }
        return props_EventReference;
      case LanguageConceptSwitch.FloatType:
        if (props_FloatType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("float");
          props_FloatType = cpb.create();
        }
        return props_FloatType;
      case LanguageConceptSwitch.GenerationSettings:
        if (props_GenerationSettings == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("settings");
          props_GenerationSettings = cpb.create();
        }
        return props_GenerationSettings;
      case LanguageConceptSwitch.GenericType:
        if (props_GenericType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_GenericType = cpb.create();
        }
        return props_GenericType;
      case LanguageConceptSwitch.IAggregateRootComponent:
        if (props_IAggregateRootComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IAggregateRootComponent = cpb.create();
        }
        return props_IAggregateRootComponent;
      case LanguageConceptSwitch.IAggregateRootRepositoryComponent:
        if (props_IAggregateRootRepositoryComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IAggregateRootRepositoryComponent = cpb.create();
        }
        return props_IAggregateRootRepositoryComponent;
      case LanguageConceptSwitch.IBoundedContextComponent:
        if (props_IBoundedContextComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IBoundedContextComponent = cpb.create();
        }
        return props_IBoundedContextComponent;
      case LanguageConceptSwitch.ICollectionType:
        if (props_ICollectionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ICollectionType = cpb.create();
        }
        return props_ICollectionType;
      case LanguageConceptSwitch.ICommandComponent:
        if (props_ICommandComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ICommandComponent = cpb.create();
        }
        return props_ICommandComponent;
      case LanguageConceptSwitch.ICommandContainerComponent:
        if (props_ICommandContainerComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ICommandContainerComponent = cpb.create();
        }
        return props_ICommandContainerComponent;
      case LanguageConceptSwitch.ICommandGenerationSettingsComponent:
        if (props_ICommandGenerationSettingsComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ICommandGenerationSettingsComponent = cpb.create();
        }
        return props_ICommandGenerationSettingsComponent;
      case LanguageConceptSwitch.IComponentWithAggregateRootRepositoryReferences:
        if (props_IComponentWithAggregateRootRepositoryReferences == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IComponentWithAggregateRootRepositoryReferences = cpb.create();
        }
        return props_IComponentWithAggregateRootRepositoryReferences;
      case LanguageConceptSwitch.IComponentWithDtoRepositoryReferences:
        if (props_IComponentWithDtoRepositoryReferences == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IComponentWithDtoRepositoryReferences = cpb.create();
        }
        return props_IComponentWithDtoRepositoryReferences;
      case LanguageConceptSwitch.IComponentWithNamePlaceholder:
        if (props_IComponentWithNamePlaceholder == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IComponentWithNamePlaceholder = cpb.create();
        }
        return props_IComponentWithNamePlaceholder;
      case LanguageConceptSwitch.IComponentWithParameters:
        if (props_IComponentWithParameters == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IComponentWithParameters = cpb.create();
        }
        return props_IComponentWithParameters;
      case LanguageConceptSwitch.IComponentWithRepositoryReferences:
        if (props_IComponentWithRepositoryReferences == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IComponentWithRepositoryReferences = cpb.create();
        }
        return props_IComponentWithRepositoryReferences;
      case LanguageConceptSwitch.IComponentWithRequiredParameters:
        if (props_IComponentWithRequiredParameters == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IComponentWithRequiredParameters = cpb.create();
        }
        return props_IComponentWithRequiredParameters;
      case LanguageConceptSwitch.IComponentWithToggleableKeyword:
        if (props_IComponentWithToggleableKeyword == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IComponentWithToggleableKeyword = cpb.create();
        }
        return props_IComponentWithToggleableKeyword;
      case LanguageConceptSwitch.IContainsComponentsWithToggleableKeywords:
        if (props_IContainsComponentsWithToggleableKeywords == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IContainsComponentsWithToggleableKeywords = cpb.create();
        }
        return props_IContainsComponentsWithToggleableKeywords;
      case LanguageConceptSwitch.IDataType:
        if (props_IDataType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDataType = cpb.create();
        }
        return props_IDataType;
      case LanguageConceptSwitch.IDtoComponent:
        if (props_IDtoComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDtoComponent = cpb.create();
        }
        return props_IDtoComponent;
      case LanguageConceptSwitch.IDtoDataTypeRuleContainerComponent:
        if (props_IDtoDataTypeRuleContainerComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDtoDataTypeRuleContainerComponent = cpb.create();
        }
        return props_IDtoDataTypeRuleContainerComponent;
      case LanguageConceptSwitch.IDtoDerivable:
        if (props_IDtoDerivable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDtoDerivable = cpb.create();
        }
        return props_IDtoDerivable;
      case LanguageConceptSwitch.IDtoDerivableReference:
        if (props_IDtoDerivableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDtoDerivableReference = cpb.create();
        }
        return props_IDtoDerivableReference;
      case LanguageConceptSwitch.IDtoDerivation:
        if (props_IDtoDerivation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDtoDerivation = cpb.create();
        }
        return props_IDtoDerivation;
      case LanguageConceptSwitch.IDtoDerivationRule:
        if (props_IDtoDerivationRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDtoDerivationRule = cpb.create();
        }
        return props_IDtoDerivationRule;
      case LanguageConceptSwitch.IDtoDerivationRuleContainer:
        if (props_IDtoDerivationRuleContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDtoDerivationRuleContainer = cpb.create();
        }
        return props_IDtoDerivationRuleContainer;
      case LanguageConceptSwitch.IDtoDerivationRuleReference:
        if (props_IDtoDerivationRuleReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDtoDerivationRuleReference = cpb.create();
        }
        return props_IDtoDerivationRuleReference;
      case LanguageConceptSwitch.IDtoFlatteningRuleContainerComponent:
        if (props_IDtoFlatteningRuleContainerComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDtoFlatteningRuleContainerComponent = cpb.create();
        }
        return props_IDtoFlatteningRuleContainerComponent;
      case LanguageConceptSwitch.IDtoRepositoryComponent:
        if (props_IDtoRepositoryComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDtoRepositoryComponent = cpb.create();
        }
        return props_IDtoRepositoryComponent;
      case LanguageConceptSwitch.IElementOfBoundedContext:
        if (props_IElementOfBoundedContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IElementOfBoundedContext = cpb.create();
        }
        return props_IElementOfBoundedContext;
      case LanguageConceptSwitch.IEntityComponent:
        if (props_IEntityComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IEntityComponent = cpb.create();
        }
        return props_IEntityComponent;
      case LanguageConceptSwitch.IEventComponent:
        if (props_IEventComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IEventComponent = cpb.create();
        }
        return props_IEventComponent;
      case LanguageConceptSwitch.IEventContainerComponent:
        if (props_IEventContainerComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IEventContainerComponent = cpb.create();
        }
        return props_IEventContainerComponent;
      case LanguageConceptSwitch.IEventGenerationSettingsComponent:
        if (props_IEventGenerationSettingsComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IEventGenerationSettingsComponent = cpb.create();
        }
        return props_IEventGenerationSettingsComponent;
      case LanguageConceptSwitch.IGeneratorSettingsComponent:
        if (props_IGeneratorSettingsComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IGeneratorSettingsComponent = cpb.create();
        }
        return props_IGeneratorSettingsComponent;
      case LanguageConceptSwitch.IOptionalValidIdentifier:
        if (props_IOptionalValidIdentifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IOptionalValidIdentifier = cpb.create();
        }
        return props_IOptionalValidIdentifier;
      case LanguageConceptSwitch.IOptionalValidIdentifierWrapper:
        if (props_IOptionalValidIdentifierWrapper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_IOptionalValidIdentifierWrapper = cpb.create();
        }
        return props_IOptionalValidIdentifierWrapper;
      case LanguageConceptSwitch.IPrimitiveType:
        if (props_IPrimitiveType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IPrimitiveType = cpb.create();
        }
        return props_IPrimitiveType;
      case LanguageConceptSwitch.IQueryComponent:
        if (props_IQueryComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IQueryComponent = cpb.create();
        }
        return props_IQueryComponent;
      case LanguageConceptSwitch.IQueryContainerComponent:
        if (props_IQueryContainerComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IQueryContainerComponent = cpb.create();
        }
        return props_IQueryContainerComponent;
      case LanguageConceptSwitch.IQueryGenerationSettingsComponent:
        if (props_IQueryGenerationSettingsComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IQueryGenerationSettingsComponent = cpb.create();
        }
        return props_IQueryGenerationSettingsComponent;
      case LanguageConceptSwitch.IReferenceType:
        if (props_IReferenceType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IReferenceType = cpb.create();
        }
        return props_IReferenceType;
      case LanguageConceptSwitch.IRepository:
        if (props_IRepository == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IRepository = cpb.create();
        }
        return props_IRepository;
      case LanguageConceptSwitch.IRepositoryReference:
        if (props_IRepositoryReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IRepositoryReference = cpb.create();
        }
        return props_IRepositoryReference;
      case LanguageConceptSwitch.IRepositorySubstitude:
        if (props_IRepositorySubstitude == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IRepositorySubstitude = cpb.create();
        }
        return props_IRepositorySubstitude;
      case LanguageConceptSwitch.IValueObjectComponent:
        if (props_IValueObjectComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IValueObjectComponent = cpb.create();
        }
        return props_IValueObjectComponent;
      case LanguageConceptSwitch.IVariable:
        if (props_IVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IVariable = cpb.create();
        }
        return props_IVariable;
      case LanguageConceptSwitch.IVariableReference:
        if (props_IVariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IVariableReference = cpb.create();
        }
        return props_IVariableReference;
      case LanguageConceptSwitch.ImportPackage:
        if (props_ImportPackage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ImportPackage = cpb.create();
        }
        return props_ImportPackage;
      case LanguageConceptSwitch.ImportStatement:
        if (props_ImportStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ImportStatement = cpb.create();
        }
        return props_ImportStatement;
      case LanguageConceptSwitch.ImportedType:
        if (props_ImportedType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL, 0x4f0a0db9ac16f8f0L, "importStatement", "", "");
          props_ImportedType = cpb.create();
        }
        return props_ImportedType;
      case LanguageConceptSwitch.IntegerType:
        if (props_IntegerType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("int");
          props_IntegerType = cpb.create();
        }
        return props_IntegerType;
      case LanguageConceptSwitch.JavaDataType:
        if (props_JavaDataType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("java type");
          props_JavaDataType = cpb.create();
        }
        return props_JavaDataType;
      case LanguageConceptSwitch.KotlinDataType:
        if (props_KotlinDataType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("kotlin type");
          props_KotlinDataType = cpb.create();
        }
        return props_KotlinDataType;
      case LanguageConceptSwitch.ListType:
        if (props_ListType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("list");
          props_ListType = cpb.create();
        }
        return props_ListType;
      case LanguageConceptSwitch.LongType:
        if (props_LongType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("long");
          props_LongType = cpb.create();
        }
        return props_LongType;
      case LanguageConceptSwitch.MapType:
        if (props_MapType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("map");
          props_MapType = cpb.create();
        }
        return props_MapType;
      case LanguageConceptSwitch.Method:
        if (props_Method == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Method = cpb.create();
        }
        return props_Method;
      case LanguageConceptSwitch.OutputPathPreference:
        if (props_OutputPathPreference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("output path");
          props_OutputPathPreference = cpb.create();
        }
        return props_OutputPathPreference;
      case LanguageConceptSwitch.Parameter:
        if (props_Parameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Parameter = cpb.create();
        }
        return props_Parameter;
      case LanguageConceptSwitch.ParameterReference:
        if (props_ParameterReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ec6f30L, 0x73da508643ec6f31L, "parameter", "", "");
          props_ParameterReference = cpb.create();
        }
        return props_ParameterReference;
      case LanguageConceptSwitch.Property:
        if (props_Property == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Property = cpb.create();
        }
        return props_Property;
      case LanguageConceptSwitch.PropertyReference:
        if (props_PropertyReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ec8131L, 0x73da508643ec8132L, "property", "", "");
          props_PropertyReference = cpb.create();
        }
        return props_PropertyReference;
      case LanguageConceptSwitch.Query:
        if (props_Query == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Query = cpb.create();
        }
        return props_Query;
      case LanguageConceptSwitch.QueryContainer:
        if (props_QueryContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("query block");
          props_QueryContainer = cpb.create();
        }
        return props_QueryContainer;
      case LanguageConceptSwitch.QueryContainerMethods:
        if (props_QueryContainerMethods == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("queries methods");
          props_QueryContainerMethods = cpb.create();
        }
        return props_QueryContainerMethods;
      case LanguageConceptSwitch.QueryContainerReference:
        if (props_QueryContainerReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c8cL, 0x642187fedcaf0c8dL, "queryContainer", "", "");
          props_QueryContainerReference = cpb.create();
        }
        return props_QueryContainerReference;
      case LanguageConceptSwitch.QueryGenerationSettings:
        if (props_QueryGenerationSettings == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("query settings");
          props_QueryGenerationSettings = cpb.create();
        }
        return props_QueryGenerationSettings;
      case LanguageConceptSwitch.QueryHandlingSetting:
        if (props_QueryHandlingSetting == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("handling setting");
          props_QueryHandlingSetting = cpb.create();
        }
        return props_QueryHandlingSetting;
      case LanguageConceptSwitch.QueryMethods:
        if (props_QueryMethods == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("query methods");
          props_QueryMethods = cpb.create();
        }
        return props_QueryMethods;
      case LanguageConceptSwitch.QueryProcessingSetting:
        if (props_QueryProcessingSetting == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("processor setting");
          props_QueryProcessingSetting = cpb.create();
        }
        return props_QueryProcessingSetting;
      case LanguageConceptSwitch.QueryReference:
        if (props_QueryReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2447L, 0x73da5086440e2448L, "query", "", "");
          props_QueryReference = cpb.create();
        }
        return props_QueryReference;
      case LanguageConceptSwitch.SetType:
        if (props_SetType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("set");
          props_SetType = cpb.create();
        }
        return props_SetType;
      case LanguageConceptSwitch.ShortType:
        if (props_ShortType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("short");
          props_ShortType = cpb.create();
        }
        return props_ShortType;
      case LanguageConceptSwitch.StringType:
        if (props_StringType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("string");
          props_StringType = cpb.create();
        }
        return props_StringType;
      case LanguageConceptSwitch.SubstitudeDataType:
        if (props_SubstitudeDataType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Substitude IDataType for types which are only resolvable upon generation. ");
          cpb.rawPresentation("SubstitudeDataType");
          props_SubstitudeDataType = cpb.create();
        }
        return props_SubstitudeDataType;
      case LanguageConceptSwitch.ValueObject:
        if (props_ValueObject == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ValueObject = cpb.create();
        }
        return props_ValueObject;
      case LanguageConceptSwitch.ValueObjectReference:
        if (props_ValueObjectReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8faL, 0x4f0a0db9ac16f8fbL, "valueObject", "", "");
          props_ValueObjectReference = cpb.create();
        }
        return props_ValueObjectReference;
    }
    return null;
  }
}
