package CQRS.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.PastePostProcessor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.model.SNode;
import CQRS.behavior.DtoRepository__BehaviorDescriptor;
import CQRS.behavior.QueryMethods__BehaviorDescriptor;
import java.util.List;
import CQRS.util.CollectionUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import CQRS.behavior.Query__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import CQRS.util.ConceptUtils;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public final class CopyPasteHandlers_PastePostProcessor_4 implements PastePostProcessor {
  @Override
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.QueryMethods$oC;
  }
  @Override
  public void postProcessNode(SNode pastedNode) {
    SNode currentNode = DtoRepository__BehaviorDescriptor.findNotPastedQueryMethods_id5jZDGThq8lz.invoke(QueryMethods__BehaviorDescriptor.dtoRepository_id5A5sGroI1gZ.invoke(pastedNode), pastedNode);
    if ((currentNode == null)) {
      return;
    }

    List<SNode> queries = CollectionUtils.merge(SLinkOperations.collect(SLinkOperations.getChildren(currentNode, LINKS.queryRefernces$MO8p), LINKS.query$ROy$), SLinkOperations.collect(SLinkOperations.getChildren(pastedNode, LINKS.queryRefernces$MO8p), LINKS.query$ROy$));
    ListSequence.fromList(SLinkOperations.getChildren(pastedNode, LINKS.queryRefernces$MO8p)).clear();
    ListSequence.fromList(SLinkOperations.getChildren(pastedNode, LINKS.queryRefernces$MO8p)).addSequence(ListSequence.fromList(queries).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return (SNode) Query__BehaviorDescriptor.toReference_id5jZDGThYDzO.invoke(it);
      }
    }));

    SNodeOperations.replaceWithNewChild(currentNode, CONCEPTS.EmptyLine$_9);
    ConceptUtils.removeNextSiblingIfEmptyLine(pastedNode);
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept QueryMethods$oC = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867afde0b7L, "CQRS.structure.QueryMethods");
    /*package*/ static final SConcept EmptyLine$_9 = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb964344649a2L, "CQRS.structure.EmptyLine");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink queryRefernces$MO8p = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867afde0b7L, 0x1f11be867afde0b8L, "queryRefernces");
    /*package*/ static final SReferenceLink query$ROy$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2447L, 0x73da5086440e2448L, "query");
  }
}
