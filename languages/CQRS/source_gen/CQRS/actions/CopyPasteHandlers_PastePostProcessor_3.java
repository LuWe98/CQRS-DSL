package CQRS.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.PastePostProcessor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.model.SNode;
import CQRS.behavior.DtoRepository__BehaviorDescriptor;
import CQRS.behavior.QueryContainerMethods__BehaviorDescriptor;
import java.util.List;
import CQRS.util.CollectionUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import CQRS.behavior.QueryContainer__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import CQRS.util.ConceptUtils;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public final class CopyPasteHandlers_PastePostProcessor_3 implements PastePostProcessor {
  @Override
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.QueryContainerMethods$BL;
  }
  @Override
  public void postProcessNode(SNode pastedNode) {
    SNode currentNode = DtoRepository__BehaviorDescriptor.findNotPastedQueryContainerMethods_id5jZDGThqeMc.invoke(QueryContainerMethods__BehaviorDescriptor.dtoRepository_id5A5sGroHXVV.invoke(pastedNode), pastedNode);
    if ((currentNode == null)) {
      return;
    }

    List<SNode> references = CollectionUtils.merge(SLinkOperations.collect(SLinkOperations.getChildren(currentNode, LINKS.queryContainerReference$omL$), LINKS.queryContainer$onw4), SLinkOperations.collect(SLinkOperations.getChildren(pastedNode, LINKS.queryContainerReference$omL$), LINKS.queryContainer$onw4));
    ListSequence.fromList(SLinkOperations.getChildren(pastedNode, LINKS.queryContainerReference$omL$)).clear();
    ListSequence.fromList(SLinkOperations.getChildren(pastedNode, LINKS.queryContainerReference$omL$)).addSequence(ListSequence.fromList(references).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return (SNode) QueryContainer__BehaviorDescriptor.toReference_id5jZDGThLEoa.invoke(it);
      }
    }));

    SNodeOperations.replaceWithNewChild(currentNode, CONCEPTS.EmptyLine$_9);
    ConceptUtils.removeNextSiblingIfEmptyLine(pastedNode);
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept QueryContainerMethods$BL = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c89L, "CQRS.structure.QueryContainerMethods");
    /*package*/ static final SConcept EmptyLine$_9 = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb964344649a2L, "CQRS.structure.EmptyLine");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink queryContainerReference$omL$ = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c89L, 0x642187fedcaf0c8aL, "queryContainerReference");
    /*package*/ static final SReferenceLink queryContainer$onw4 = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c8cL, 0x642187fedcaf0c8dL, "queryContainer");
  }
}
