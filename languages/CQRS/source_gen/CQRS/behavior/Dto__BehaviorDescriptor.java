package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import CQRS.util.CollectionUtils;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Dto__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f903L, "CQRS.structure.Dto");

  public static final SMethod<SNode> toReference_id4yIxVQ$QHJK = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("toReference").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5237272665262840816L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<SNode>> methods_id1URsbDnWjsX = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("methods").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(2213361687517542205L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> repository_id6gxxZVrZjYk = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("repository").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(7215197606706495380L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<SNode>> getAllParameters_id4yIxVQyI32q = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getAllParameters").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5237272665227014298L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Void> resetDerivedFromBlock_id3NXs7ypjFaC = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("resetDerivedFromBlock").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4394792474653930152L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(toReference_id4yIxVQ$QHJK, methods_id1URsbDnWjsX, repository_id6gxxZVrZjYk, getAllParameters_id4yIxVQyI32q, resetDerivedFromBlock_id3NXs7ypjFaC);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNode toReference_id4yIxVQ$QHJK(@NotNull SNode __thisNode__) {
    SNode reference = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f906L, "CQRS.structure.DtoReference"));
    SLinkOperations.setTarget(reference, LINKS.dto$DOQ$, __thisNode__);
    return reference;
  }
  /*package*/ static Iterable<SNode> methods_id1URsbDnWjsX(@NotNull SNode __thisNode__) {
    return SNodeOperations.ofConcept(SLinkOperations.getChildren(__thisNode__, LINKS.components$c20O), CONCEPTS.Method$mm);
  }
  /*package*/ static SNode repository_id6gxxZVrZjYk(@NotNull SNode __thisNode__) {
    return (SNode) BoundedContext__BehaviorDescriptor.findRepositoryFor_id1WhJCpV8GG7.invoke(IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(__thisNode__), __thisNode__);
  }
  /*package*/ static Iterable<SNode> getAllParameters_id4yIxVQyI32q(@NotNull SNode __thisNode__) {
    return CollectionUtils.merge(SLinkOperations.getChildren(__thisNode__, LINKS.parameters$t6h4), Sequence.fromIterable(IDtoDerivation__BehaviorDescriptor.getUsedVariables_id3NXs7yp5PgA.invoke(__thisNode__)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return (SNode) IVariable__BehaviorDescriptor.toParameter_id4V91Il8jc9j.invoke(it);
      }
    }));
  }
  /*package*/ static void resetDerivedFromBlock_id3NXs7ypjFaC(@NotNull SNode __thisNode__) {
    SLinkOperations.setTarget(__thisNode__, LINKS.derivableReference$gfNO, null);
    SPropertyOperations.set(__thisNode__, PROPS.showDerivedFromBlock$eRH7, false);
    IDtoDerivation__BehaviorDescriptor.clearIgnoredVariables_id3NXs7ypg5IO.invoke(__thisNode__);
    IDtoDerivation__BehaviorDescriptor.resetUsedDerivationRules_id5QsWOhW8B1z.invoke(__thisNode__);
  }

  /*package*/ Dto__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNode) toReference_id4yIxVQ$QHJK(node));
      case 1:
        return (T) ((Iterable<SNode>) methods_id1URsbDnWjsX(node));
      case 2:
        return (T) ((SNode) repository_id6gxxZVrZjYk(node));
      case 3:
        return (T) ((Iterable<SNode>) getAllParameters_id4yIxVQyI32q(node));
      case 4:
        resetDerivedFromBlock_id3NXs7ypjFaC(node);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink dto$DOQ$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f906L, 0x4f0a0db9ac16f907L, "dto");
    /*package*/ static final SContainmentLink components$c20O = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f903L, 0x62cb964347c70b6L, "components");
    /*package*/ static final SContainmentLink parameters$t6h4 = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb96433e80624L, 0x62cb96433e80625L, "parameters");
    /*package*/ static final SContainmentLink derivableReference$gfNO = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L, 0x3cfd707898583364L, "derivableReference");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Method$mm = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643f0517eL, "CQRS.structure.Method");
  }

  private static final class PROPS {
    /*package*/ static final SProperty showDerivedFromBlock$eRH7 = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f903L, 0x3cfd7078994e5299L, "showDerivedFromBlock");
  }
}
