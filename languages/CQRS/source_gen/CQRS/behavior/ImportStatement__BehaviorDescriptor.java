package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import CQRS.util.CollectionUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class ImportStatement__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16ea31L, "CQRS.structure.ImportStatement");

  public static final SMethod<String> qualifiedName_id3DbZR$OfNHM = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("qualifiedName").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4200731973485804402L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<String> qualifiedNameWithAlias_id3FBObrnYNbu = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("qualifiedNameWithAlias").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4244590657546171102L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<SNode>> findImportTypeReferences_idmdpAJLUhGE = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("findImportTypeReferences").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(400088555711961898L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Void> adjustImportStatementReferenceGenericTypes_idmdpAJM7dS5 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("adjustImportStatementReferenceGenericTypes").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(400088555715354117L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Void> adjustImportStatementReferenceGenericTypes_idmdpAJMlvHj = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("adjustImportStatementReferenceGenericTypes").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(400088555719097171L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter(Integer.TYPE, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(qualifiedName_id3DbZR$OfNHM, qualifiedNameWithAlias_id3FBObrnYNbu, findImportTypeReferences_idmdpAJLUhGE, adjustImportStatementReferenceGenericTypes_idmdpAJM7dS5, adjustImportStatementReferenceGenericTypes_idmdpAJMlvHj);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String qualifiedName_id3DbZR$OfNHM(@NotNull SNode __thisNode__) {
    if (ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.packages$CpXG)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Objects.equals(SPropertyOperations.getString(it, PROPS.name$MnvL), null);
      }
    }) || Objects.equals(SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL), null)) {
      return null;
    }
    return IterableUtils.join(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.packages$CpXG)).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(it, PROPS.name$MnvL);
      }
    }), ".").concat(".").concat(SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL));
  }
  @Deprecated
  /*package*/ static String qualifiedNameWithAlias_id3FBObrnYNbu(@NotNull SNode __thisNode__) {
    return ((String) ImportStatement__BehaviorDescriptor.qualifiedName_id3DbZR$OfNHM.invoke(__thisNode__));
  }
  /*package*/ static Iterable<SNode> findImportTypeReferences_idmdpAJLUhGE(@NotNull final SNode __thisNode__) {
    return ListSequence.fromList(SNodeOperations.getNodeDescendants(IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(__thisNode__), CONCEPTS.ImportedType$3u, false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, LINKS.importStatement$D_66) == __thisNode__;
      }
    });
  }
  /*package*/ static void adjustImportStatementReferenceGenericTypes_idmdpAJM7dS5(@NotNull SNode __thisNode__) {
    ImportStatement__BehaviorDescriptor.adjustImportStatementReferenceGenericTypes_idmdpAJMlvHj.invoke(__thisNode__, ((int) 0));
  }
  /*package*/ static void adjustImportStatementReferenceGenericTypes_idmdpAJMlvHj(@NotNull SNode __thisNode__, int diffAdjustment) {
    for (SNode reference : ImportStatement__BehaviorDescriptor.findImportTypeReferences_idmdpAJLUhGE.invoke(__thisNode__)) {
      int difference = (ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.genericTypes$ns1R)).count() + diffAdjustment) - ListSequence.fromList(SLinkOperations.getChildren(reference, LINKS.actualTypes$o6Gi)).count();
      if (difference == 0) {
        continue;
      }

      if (difference < 0) {
        ListSequence.fromList(SLinkOperations.getChildren(reference, LINKS.actualTypes$o6Gi)).removeSequence(ListSequence.fromList(SLinkOperations.getChildren(reference, LINKS.actualTypes$o6Gi)).tail(Math.abs(difference)));
        continue;
      }
      ListSequence.fromList(SLinkOperations.getChildren(reference, LINKS.actualTypes$o6Gi)).addSequence(ListSequence.fromList(CollectionUtils.listOfSize(difference, (Integer index) -> SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c9dL, "CQRS.structure.IDataType"))))));
    }
  }

  /*package*/ ImportStatement__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) qualifiedName_id3DbZR$OfNHM(node));
      case 1:
        return (T) ((String) qualifiedNameWithAlias_id3FBObrnYNbu(node));
      case 2:
        return (T) ((Iterable<SNode>) findImportTypeReferences_idmdpAJLUhGE(node));
      case 3:
        adjustImportStatementReferenceGenericTypes_idmdpAJM7dS5(node);
        return null;
      case 4:
        adjustImportStatementReferenceGenericTypes_idmdpAJMlvHj(node, ((int) (Integer) parameters[0]));
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink packages$CpXG = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16ea31L, 0x73da50864426c351L, "packages");
    /*package*/ static final SReferenceLink importStatement$D_66 = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL, 0x4f0a0db9ac16f8f0L, "importStatement");
    /*package*/ static final SContainmentLink actualTypes$o6Gi = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL, 0x5e223a0a0b9c13cdL, "actualTypes");
    /*package*/ static final SContainmentLink genericTypes$ns1R = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16ea31L, 0x5e223a0a0afcb64aL, "genericTypes");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ImportedType$3u = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL, "CQRS.structure.ImportedType");
  }
}
