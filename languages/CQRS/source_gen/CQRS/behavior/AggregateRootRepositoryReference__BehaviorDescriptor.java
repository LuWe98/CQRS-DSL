package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public final class AggregateRootRepositoryReference__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x593428614a1cdb1aL, "CQRS.structure.AggregateRootRepositoryReference");

  public static final SMethod<SNode> getRepository_id5jZDGTil89u = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getRepository").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6124797423321907806L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> getAggregateRepository_id3fVLq_wyq2G = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getAggregateRepository").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3745804846348476588L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getRepository_id5jZDGTil89u, getAggregateRepository_id3fVLq_wyq2G);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNode getRepository_id5jZDGTil89u(@NotNull SNode __thisNode__) {
    return SLinkOperations.getTarget(__thisNode__, LINKS.aggregate$rv49);
  }
  /*package*/ static SNode getAggregateRepository_id3fVLq_wyq2G(@NotNull SNode __thisNode__) {
    if ((SLinkOperations.getTarget(__thisNode__, LINKS.aggregateRepository$Ozlr) != null)) {
      return SLinkOperations.getTarget(__thisNode__, LINKS.aggregateRepository$Ozlr);
    }

    if ((SLinkOperations.getTarget(__thisNode__, LINKS.aggregate$rv49) != null)) {
      return AggregateRoot__BehaviorDescriptor.repository_id3AwzpICw894.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.aggregate$rv49));
    }

    return null;
  }

  /*package*/ AggregateRootRepositoryReference__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNode) getRepository_id5jZDGTil89u(node));
      case 1:
        return (T) ((SNode) getAggregateRepository_id3fVLq_wyq2G(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink aggregate$rv49 = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x593428614a1cdb1aL, 0x593428614a1d9431L, "aggregate");
    /*package*/ static final SReferenceLink aggregateRepository$Ozlr = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x593428614a1cdb1aL, 0x56a1ac122bfc9f2eL, "aggregateRepository");
  }
}
