package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public final class IDtoDerivable__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910f901bdaeL, "CQRS.structure.IDtoDerivable");

  public static final SMethod<SNode> toDtoDerivableReference_id4LpUh3T0tG4 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("toDtoDerivableReference").modifiers(12, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5501684678916168452L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<SNode>> getVariables_id4LpUh3V6b_Y = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getVariables").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5501684678951221630L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<SNode>> getVariablesWithDtoDerivable_id3NXs7ynXdMI = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getVariablesWithDtoDerivable").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4394792474631265454L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(toDtoDerivableReference_id4LpUh3T0tG4, getVariables_id4LpUh3V6b_Y, getVariablesWithDtoDerivable_id3NXs7ynXdMI);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Iterable<SNode> getVariables_id4LpUh3V6b_Y(@NotNull SNode __thisNode__) {
    return Sequence.fromIterable(Collections.emptyList());
  }
  /*package*/ static Iterable<SNode> getVariablesWithDtoDerivable_id3NXs7ynXdMI(@NotNull SNode __thisNode__) {
    return Sequence.fromIterable(IDtoDerivable__BehaviorDescriptor.getVariables_id4LpUh3V6b_Y.invoke(__thisNode__)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(it, LINKS.type$AxAW), CONCEPTS.IDtoDerivable$t1, true, new SAbstractConcept[]{})).isNotEmpty();
      }
    });
  }

  /*package*/ IDtoDerivable__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 1:
        return (T) ((Iterable<SNode>) getVariables_id4LpUh3V6b_Y(node));
      case 2:
        return (T) ((Iterable<SNode>) getVariablesWithDtoDerivable_id3NXs7ynXdMI(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink type$AxAW = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910fb0ed95eL, 0x4c59e910fe2b0ee9L, "type");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IDtoDerivable$t1 = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910f901bdaeL, "CQRS.structure.IDtoDerivable");
  }
}
