package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public final class DtoRepository__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867ab796ffL, "CQRS.structure.DtoRepository");

  public static final SMethod<SNode> getQueryContainerMethods_id5A5sGroEUrw = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getQueryContainerMethods").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6450688239642322656L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> findNotPastedQueryContainerMethods_id5jZDGThqeMc = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("findNotPastedQueryContainerMethods").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6124797423306468492L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<SNode> getQueryMethods_id5A5sGroEUCm = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getQueryMethods").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6450688239642323478L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> findNotPastedQueryMethods_id5jZDGThq8lz = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("findNotPastedQueryMethods").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6124797423306442083L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Iterable<SNode>> getEmbeddedQueries_id3fVLq_LpTMg = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getEmbeddedQueries").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3745804846631459984L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<SNode>> methods_id3fVLq_LVrz2 = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("methods").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3745804846640249026L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Boolean> hasQueryContainerMethodsDefined_id1LTEH$qKnx = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("hasQueryContainerMethodsDefined").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(32060296166835681L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Boolean> hasQueryMethodsDefined_id1LTEH$qOyo = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("hasQueryMethodsDefined").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(32060296166852760L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<String> getPlaceholderText_id2RbvdOLeryC = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getPlaceholderText").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3299868441434503336L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<String> repositoryName_idmdpAJL$$QT = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("repositoryName").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(400088555706273209L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> toRepositoryReference_id5jZDGTilCJr = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("toRepositoryReference").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6124797423322041307L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getQueryContainerMethods_id5A5sGroEUrw, findNotPastedQueryContainerMethods_id5jZDGThqeMc, getQueryMethods_id5A5sGroEUCm, findNotPastedQueryMethods_id5jZDGThq8lz, getEmbeddedQueries_id3fVLq_LpTMg, methods_id3fVLq_LVrz2, hasQueryContainerMethodsDefined_id1LTEH$qKnx, hasQueryMethodsDefined_id1LTEH$qOyo, getPlaceholderText_id2RbvdOLeryC, repositoryName_idmdpAJL$$QT, toRepositoryReference_id5jZDGTilCJr);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNode getQueryContainerMethods_id5A5sGroEUrw(@NotNull SNode __thisNode__) {
    return SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.components$toBk)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, CONCEPTS.QueryContainerMethods$BL);
      }
    }), CONCEPTS.QueryContainerMethods$BL);
  }
  /*package*/ static SNode findNotPastedQueryContainerMethods_id5jZDGThqeMc(@NotNull SNode __thisNode__, final SNode pastedNode) {
    return Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(__thisNode__, LINKS.components$toBk), CONCEPTS.QueryContainerMethods$BL)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return it != pastedNode;
      }
    });
  }
  /*package*/ static SNode getQueryMethods_id5A5sGroEUCm(@NotNull SNode __thisNode__) {
    return SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.components$toBk)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, CONCEPTS.QueryMethods$oC);
      }
    }), CONCEPTS.QueryMethods$oC);
  }
  /*package*/ static SNode findNotPastedQueryMethods_id5jZDGThq8lz(@NotNull SNode __thisNode__, final SNode pastedNode) {
    return Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(__thisNode__, LINKS.components$toBk), CONCEPTS.QueryMethods$oC)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return it != pastedNode;
      }
    });
  }
  /*package*/ static Iterable<SNode> getEmbeddedQueries_id3fVLq_LpTMg(@NotNull SNode __thisNode__) {
    List<SNode> queries = ListSequence.fromList(new ArrayList<SNode>());

    SNode queryMethods = DtoRepository__BehaviorDescriptor.getQueryMethods_id5A5sGroEUCm.invoke(__thisNode__);
    if ((queryMethods != null)) {
      ListSequence.fromList(queries).addSequence(Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.getChildren(queryMethods, LINKS.queryRefernces$MO8p), LINKS.query$ROy$)));
    }

    SNode queryContainerMethods = DtoRepository__BehaviorDescriptor.getQueryContainerMethods_id5A5sGroEUrw.invoke(__thisNode__);
    if ((queryContainerMethods != null)) {
      ListSequence.fromList(queries).addSequence(Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.getChildren(queryContainerMethods, LINKS.queryContainerReference$omL$), LINKS.queryContainer$onw4)).translate(new ITranslator2<SNode, SNode>() {
        public Iterable<SNode> translate(SNode it) {
          return (Iterable<SNode>) QueryContainer__BehaviorDescriptor.queries_id5SyewCaMpun.invoke(it);
        }
      }));
    }

    return queries;
  }
  /*package*/ static Iterable<SNode> methods_id3fVLq_LVrz2(@NotNull SNode __thisNode__) {
    return SNodeOperations.ofConcept(SLinkOperations.getChildren(__thisNode__, LINKS.components$toBk), CONCEPTS.Method$mm);
  }
  /*package*/ static boolean hasQueryContainerMethodsDefined_id1LTEH$qKnx(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.components$toBk)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, CONCEPTS.QueryContainerMethods$BL);
      }
    });
  }
  /*package*/ static boolean hasQueryMethodsDefined_id1LTEH$qOyo(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.components$toBk)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, CONCEPTS.QueryMethods$oC);
      }
    });
  }
  /*package*/ static String getPlaceholderText_id2RbvdOLeryC(@NotNull SNode __thisNode__) {
    return ((SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.dtoReference$pHOR), LINKS.dto$DOQ$) != null) ? IRepository__BehaviorDescriptor.repositoryName_idmdpAJL$$QT.invoke(__thisNode__) : " - ");
  }
  /*package*/ static String repositoryName_idmdpAJL$$QT(@NotNull SNode __thisNode__) {
    if (((boolean) IComponentWithNamePlaceholder__BehaviorDescriptor.isNameSet_id2RbvdOM0nGV.invoke(__thisNode__))) {
      return IComponentWithNamePlaceholder__BehaviorDescriptor.getName_id2RbvdOM0peT.invoke(__thisNode__);
    }

    if (Objects.equals(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.dtoReference$pHOR), LINKS.dto$DOQ$), PROPS.name$MnvL), null)) {
      return null;
    }

    return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.dtoReference$pHOR), LINKS.dto$DOQ$), PROPS.name$MnvL) + "Repository";
  }
  /*package*/ static SNode toRepositoryReference_id5jZDGTilCJr(@NotNull SNode __thisNode__) {
    SNode reference = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedbd24164L, "CQRS.structure.DtoRepositoryReference"));
    SLinkOperations.setTarget(reference, LINKS.dtoRepository$QKV9, __thisNode__);
    return reference;
  }

  /*package*/ DtoRepository__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNode) getQueryContainerMethods_id5A5sGroEUrw(node));
      case 1:
        return (T) ((SNode) findNotPastedQueryContainerMethods_id5jZDGThqeMc(node, (SNode) parameters[0]));
      case 2:
        return (T) ((SNode) getQueryMethods_id5A5sGroEUCm(node));
      case 3:
        return (T) ((SNode) findNotPastedQueryMethods_id5jZDGThq8lz(node, (SNode) parameters[0]));
      case 4:
        return (T) ((Iterable<SNode>) getEmbeddedQueries_id3fVLq_LpTMg(node));
      case 5:
        return (T) ((Iterable<SNode>) methods_id3fVLq_LVrz2(node));
      case 6:
        return (T) ((Boolean) hasQueryContainerMethodsDefined_id1LTEH$qKnx(node));
      case 7:
        return (T) ((Boolean) hasQueryMethodsDefined_id1LTEH$qOyo(node));
      case 8:
        return (T) ((String) getPlaceholderText_id2RbvdOLeryC(node));
      case 9:
        return (T) ((String) repositoryName_idmdpAJL$$QT(node));
      case 10:
        return (T) ((SNode) toRepositoryReference_id5jZDGTilCJr(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink components$toBk = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867ab796ffL, 0x1f11be867ad9d00dL, "components");
    /*package*/ static final SContainmentLink queryRefernces$MO8p = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867afde0b7L, 0x1f11be867afde0b8L, "queryRefernces");
    /*package*/ static final SReferenceLink query$ROy$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2447L, 0x73da5086440e2448L, "query");
    /*package*/ static final SContainmentLink queryContainerReference$omL$ = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c89L, 0x642187fedcaf0c8aL, "queryContainerReference");
    /*package*/ static final SReferenceLink queryContainer$onw4 = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c8cL, 0x642187fedcaf0c8dL, "queryContainer");
    /*package*/ static final SContainmentLink dtoReference$pHOR = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867ab796ffL, 0x1f11be867ad98c0bL, "dtoReference");
    /*package*/ static final SReferenceLink dto$DOQ$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f906L, 0x4f0a0db9ac16f907L, "dto");
    /*package*/ static final SReferenceLink dtoRepository$QKV9 = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedbd24164L, 0x642187fedbd2416aL, "dtoRepository");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept QueryContainerMethods$BL = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c89L, "CQRS.structure.QueryContainerMethods");
    /*package*/ static final SConcept QueryMethods$oC = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867afde0b7L, "CQRS.structure.QueryMethods");
    /*package*/ static final SConcept Method$mm = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643f0517eL, "CQRS.structure.Method");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
