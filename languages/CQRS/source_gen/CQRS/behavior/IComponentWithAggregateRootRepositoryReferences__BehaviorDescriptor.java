package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class IComponentWithAggregateRootRepositoryReferences__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4dea9f2b9de68ac3L, "CQRS.structure.IComponentWithAggregateRootRepositoryReferences");

  public static final SMethod<Iterable<SNode>> aggregateRootRepositoryReferences_idomljbwCDsp = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("aggregateRootRepositoryReferences").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(438631690720679705L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<SNode>> aggregateRoots_idomljbwD9hx = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("aggregateRoots").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(438631690720810081L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SAbstractConcept> allowedRepositoryReferenceType_idmdpAJN9aTg = new SMethodBuilder<SAbstractConcept>(new SJavaCompoundTypeImpl((Class<SAbstractConcept>) ((Class) Object.class))).name("allowedRepositoryReferenceType").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(400088555732643408L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(aggregateRootRepositoryReferences_idomljbwCDsp, aggregateRoots_idomljbwD9hx, allowedRepositoryReferenceType_idmdpAJN9aTg);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Iterable<SNode> aggregateRootRepositoryReferences_idomljbwCDsp(@NotNull SNode __thisNode__) {
    return SNodeOperations.ofConcept(SLinkOperations.getChildren(__thisNode__, LINKS.repositoryReferences$PHWe), CONCEPTS.AggregateRootRepositoryReference$pq);
  }
  /*package*/ static Iterable<SNode> aggregateRoots_idomljbwD9hx(@NotNull SNode __thisNode__) {
    return Sequence.fromIterable(IComponentWithAggregateRootRepositoryReferences__BehaviorDescriptor.aggregateRootRepositoryReferences_idomljbwCDsp.invoke(__thisNode__)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, LINKS.aggregate$rv49);
      }
    });
  }
  /*package*/ static SAbstractConcept allowedRepositoryReferenceType_idmdpAJN9aTg(@NotNull SNode __thisNode__) {
    return CONCEPTS.AggregateRootRepositoryReference$pq;
  }

  /*package*/ IComponentWithAggregateRootRepositoryReferences__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Iterable<SNode>) aggregateRootRepositoryReferences_idomljbwCDsp(node));
      case 1:
        return (T) ((Iterable<SNode>) aggregateRoots_idomljbwD9hx(node));
      case 2:
        return (T) ((SAbstractConcept) allowedRepositoryReferenceType_idmdpAJN9aTg(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink repositoryReferences$PHWe = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce505e12ecL, 0x54ffa6ce525323c6L, "repositoryReferences");
    /*package*/ static final SReferenceLink aggregate$rv49 = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x593428614a1cdb1aL, 0x593428614a1d9431L, "aggregate");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept AggregateRootRepositoryReference$pq = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x593428614a1cdb1aL, "CQRS.structure.AggregateRootRepositoryReference");
  }
}
