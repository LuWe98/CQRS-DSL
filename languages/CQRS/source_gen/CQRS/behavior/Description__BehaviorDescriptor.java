package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.ArrayList;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public final class Description__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e3d3397dL, "CQRS.structure.Description");

  public static final SMethod<Void> setDescription_id23r34DLBXSJ = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setDescription").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(2367499542986743343L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter((Class<List<String>>) ((Class) Object.class), ""));
  public static final SMethod<Void> setDescription_id23r34DN4NWR = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setDescription").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(2367499543011082039L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createVarArgPrm(String.class, ""));
  public static final SMethod<SNode> ofSize_id23r34DMhXzs = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("ofSize").modifiers(1, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(2367499542997752028L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter(Integer.TYPE, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(setDescription_id23r34DLBXSJ, setDescription_id23r34DN4NWR, ofSize_id23r34DMhXzs);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void setDescription_id23r34DLBXSJ(@NotNull SNode __thisNode__, List<String> lines) {
    Description__BehaviorDescriptor.setDescription_id23r34DN4NWR.invoke(__thisNode__, ListSequence.fromList(lines).toGenericArray(String.class));
  }
  /*package*/ static void setDescription_id23r34DN4NWR(@NotNull SNode __thisNode__, String... lines) {
    for (int i = 0; i < ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.lines$_pS$)).count(); i++) {
      if (i < lines.length) {
        SPropertyOperations.set(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.lines$_pS$)).getElement(i), PROPS.value$IHs$, lines[i]);
        continue;
      }
      SPropertyOperations.set(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.lines$_pS$)).getElement(i), PROPS.value$IHs$, null);
    }
  }
  /*package*/ static SNode ofSize_id23r34DMhXzs(@NotNull SAbstractConcept __thisConcept__, int maxSize) {
    List<SNode> lines = new ArrayList<SNode>();
    for (int i = 0; i < maxSize; i++) {
      SNode descriptionLine = SNodeFactoryOperations.createNewNode(CONCEPTS.DescriptionLine$l7, null);
      SPropertyOperations.set(descriptionLine, PROPS.value$IHs$, null);
      ListSequence.fromList(lines).addElement(descriptionLine);
    }

    SNode description = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e3d3397dL, "CQRS.structure.Description"));
    ListSequence.fromList(SLinkOperations.getChildren(description, LINKS.lines$_pS$)).addSequence(ListSequence.fromList(lines));
    return description;
  }

  /*package*/ Description__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        setDescription_id23r34DLBXSJ(node, (List<String>) parameters[0]);
        return null;
      case 1:
        setDescription_id23r34DN4NWR(node, (String[]) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 2:
        return (T) ((SNode) ofSize_id23r34DMhXzs(concept, ((int) (Integer) parameters[0])));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink lines$_pS$ = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e3d3397dL, 0x6165532e3d3397eL, "lines");
  }

  private static final class PROPS {
    /*package*/ static final SProperty value$IHs$ = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e34e22efL, 0x6165532e34e22f0L, "value");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DescriptionLine$l7 = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e34e22efL, "CQRS.structure.DescriptionLine");
  }
}
