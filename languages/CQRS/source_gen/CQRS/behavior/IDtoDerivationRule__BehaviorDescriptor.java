package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.openapi.editor.EditorComponent;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class IDtoDerivationRule__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f983L, "CQRS.structure.IDtoDerivationRule");

  public static final SMethod<SNode> toReference_id7z5h98TrJPJ = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("toReference").modifiers(12, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(8702437249782840687L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<String> getReferenceName_id1pnQbpD$lGH = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getReferenceName").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1609993669775022893L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter(EditorContext.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(toReference_id7z5h98TrJPJ, getReferenceName_id1pnQbpD$lGH);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String getReferenceName_id1pnQbpD$lGH(@NotNull SNode __thisNode__, EditorContext context) {

    {
      final SNode flatteningRule = __thisNode__;
      if (SNodeOperations.isInstanceOf(flatteningRule, CONCEPTS.DtoFlatteningRule$GR)) {
        SNode derivable = IDtoDerivation__BehaviorDescriptor.getDtoDerivable_id3NXs7yomd17.invoke(flatteningRule);
        String name = ((derivable == null) ? "*Derivable*" : (!(Objects.equals(SPropertyOperations.getString(derivable, PROPS.name$MnvL), null)) ? SPropertyOperations.getString(derivable, PROPS.name$MnvL) : "*Derivable*"));
        return "FR::" + name;
      }
    }

    {
      final SNode typeRule = __thisNode__;
      if (SNodeOperations.isInstanceOf(typeRule, CONCEPTS.DtoDataTypeRule$Go)) {
        if (Objects.equals(SLinkOperations.getTarget(typeRule, LINKS.fromType$BfIG), null) || Objects.equals(SLinkOperations.getTarget(typeRule, LINKS.toType$BgcI), null)) {
          return "TR::*Rule* -> *Rule*";
        }

        EditorComponent editorComponent = context.getEditorComponent();

        EditorCell fromTypeCell = editorComponent.findNodeCell(SLinkOperations.getTarget(typeRule, LINKS.fromType$BfIG));
        EditorCell toTypeCell = editorComponent.findNodeCell(SLinkOperations.getTarget(typeRule, LINKS.toType$BgcI));

        String fromTypeText = (Objects.equals(fromTypeCell, null) ? SNodeOperations.present(SLinkOperations.getTarget(typeRule, LINKS.fromType$BfIG)) : fromTypeCell.renderText().getText());
        String toTypeText = (Objects.equals(toTypeCell, null) ? SNodeOperations.present(SLinkOperations.getTarget(typeRule, LINKS.toType$BgcI)) : toTypeCell.renderText().getText());

        return "TR::" + fromTypeText + " -> " + toTypeText;
      }
    }

    return "!UNSUPPORTED RULE!";
  }

  /*package*/ IDtoDerivationRule__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 1:
        return (T) ((String) getReferenceName_id1pnQbpD$lGH(node, (EditorContext) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DtoFlatteningRule$GR = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f985L, "CQRS.structure.DtoFlatteningRule");
    /*package*/ static final SConcept DtoDataTypeRule$Go = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f984L, "CQRS.structure.DtoDataTypeRule");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink toType$BgcI = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f984L, 0x4c59e910fdc7b220L, "toType");
    /*package*/ static final SContainmentLink fromType$BfIG = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f984L, 0x4c59e910fdc7b21eL, "fromType");
  }
}
