package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class CommandGenerationSettings__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e2ee293bL, "CQRS.structure.CommandGenerationSettings");

  public static final SMethod<Boolean> isCommandHandlingSettingDefined_id5qxF18ES__k = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isCommandHandlingSettingDefined").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6242459752541083988L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> getCommandHandlingSetting_id5qxF18ES__s = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getCommandHandlingSetting").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6242459752541083996L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> getCommandHandlingSettingOrDefault_id3GrpC3f2UKo = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getCommandHandlingSettingOrDefault").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4259110576024431640L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(isCommandHandlingSettingDefined_id5qxF18ES__k, getCommandHandlingSetting_id5qxF18ES__s, getCommandHandlingSettingOrDefault_id3GrpC3f2UKo);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean isCommandHandlingSettingDefined_id5qxF18ES__k(@NotNull SNode __thisNode__) {
    return (CommandGenerationSettings__BehaviorDescriptor.getCommandHandlingSetting_id5qxF18ES__s.invoke(__thisNode__) != null);
  }
  /*package*/ static SNode getCommandHandlingSetting_id5qxF18ES__s(@NotNull SNode __thisNode__) {
    return Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(__thisNode__, LINKS.components$3flu), CONCEPTS.CommandHandlingSetting$mv)).first();
  }
  /*package*/ static SNode getCommandHandlingSettingOrDefault_id3GrpC3f2UKo(@NotNull SNode __thisNode__) {
    SNode setting = CommandGenerationSettings__BehaviorDescriptor.getCommandHandlingSetting_id5qxF18ES__s.invoke(__thisNode__);
    return ((setting != null) ? setting : SNodeFactoryOperations.createNewNode(CONCEPTS.CommandHandlingSetting$mv, null));
  }

  /*package*/ CommandGenerationSettings__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) isCommandHandlingSettingDefined_id5qxF18ES__k(node));
      case 1:
        return (T) ((SNode) getCommandHandlingSetting_id5qxF18ES__s(node));
      case 2:
        return (T) ((SNode) getCommandHandlingSettingOrDefault_id3GrpC3f2UKo(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink components$3flu = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e2ee293bL, 0x56a1ac122ac5a0cbL, "components");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept CommandHandlingSetting$mv = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122ac5a075L, "CQRS.structure.CommandHandlingSetting");
  }
}
