package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class IComponentWithNamePlaceholder__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x71e6ab661db3f2L, "CQRS.structure.IComponentWithNamePlaceholder");

  public static final SMethod<String> getPlaceholderText_id2RbvdOLeryC = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getPlaceholderText").modifiers(12, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3299868441434503336L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Boolean> shouldShowPlaceholder_id2RbvdOL$gIz = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("shouldShowPlaceholder").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3299868441440226211L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Void> onValidLetterTypedOnPlaceholder_id1LTEHA7rg6 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("onValidLetterTypedOnPlaceholder").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(32060296195322886L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter(Character.TYPE, ""), SMethodBuilder.createJavaParameter(EditorContext.class, ""));
  public static final SMethod<Boolean> isNameSet_id2RbvdOM0nGV = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isNameSet").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3299868441447594811L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<String> getName_id2RbvdOM0peT = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getName").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3299868441447601081L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Void> setName_id2RbvdOMpYd2 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setName").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3299868441454306114L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter(String.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getPlaceholderText_id2RbvdOLeryC, shouldShowPlaceholder_id2RbvdOL$gIz, onValidLetterTypedOnPlaceholder_id1LTEHA7rg6, isNameSet_id2RbvdOM0nGV, getName_id2RbvdOM0peT, setName_id2RbvdOMpYd2);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean shouldShowPlaceholder_id2RbvdOL$gIz(@NotNull SNode __thisNode__) {
    return (SLinkOperations.getTarget(__thisNode__, LINKS.nameWrapper$X65Q) == null);
  }
  /*package*/ static void onValidLetterTypedOnPlaceholder_id1LTEHA7rg6(@NotNull SNode __thisNode__, char letter, EditorContext editorContext) {
    SLinkOperations.setNewChild(__thisNode__, LINKS.nameWrapper$X65Q, null);
    SPropertyOperations.set(SLinkOperations.getTarget(__thisNode__, LINKS.nameWrapper$X65Q), PROPS.name$MnvL, String.valueOf(letter));
    SelectionUtil.selectLabelCellAnSetCaret(editorContext, SLinkOperations.getTarget(__thisNode__, LINKS.nameWrapper$X65Q), "nameCellId", -1);
  }
  /*package*/ static boolean isNameSet_id2RbvdOM0nGV(@NotNull SNode __thisNode__) {
    return (boolean) IOptionalValidIdentifierWrapper__BehaviorDescriptor.isNameSet_id2RbvdOKU7zU.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.nameWrapper$X65Q));
  }
  /*package*/ static String getName_id2RbvdOM0peT(@NotNull SNode __thisNode__) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(__thisNode__, LINKS.nameWrapper$X65Q), PROPS.name$MnvL);
  }
  /*package*/ static void setName_id2RbvdOMpYd2(@NotNull SNode __thisNode__, String name) {
    if ((SLinkOperations.getTarget(__thisNode__, LINKS.nameWrapper$X65Q) == null)) {
      SNodeFactoryOperations.setNewChild(__thisNode__, LINKS.nameWrapper$X65Q, null);
    }
    SPropertyOperations.set(SLinkOperations.getTarget(__thisNode__, LINKS.nameWrapper$X65Q), PROPS.name$MnvL, name);
  }

  /*package*/ IComponentWithNamePlaceholder__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 1:
        return (T) ((Boolean) shouldShowPlaceholder_id2RbvdOL$gIz(node));
      case 2:
        onValidLetterTypedOnPlaceholder_id1LTEHA7rg6(node, ((char) (Character) parameters[0]), (EditorContext) parameters[1]);
        return null;
      case 3:
        return (T) ((Boolean) isNameSet_id2RbvdOM0nGV(node));
      case 4:
        return (T) ((String) getName_id2RbvdOM0peT(node));
      case 5:
        setName_id2RbvdOMpYd2(node, (String) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink nameWrapper$X65Q = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x71e6ab661db3f2L, 0x2dcb7cdd32004e34L, "nameWrapper");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
