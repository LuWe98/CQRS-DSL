package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class Method__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643f0517eL, "CQRS.structure.Method");

  public static final SMethod<Boolean> hasReturnType_id2Np_kyaxbHi = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("hasReturnType").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3231778346409179986L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> getReturnType_idp4fykIHzze = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getReturnType").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(451554192062298318L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Void> setReturnType_id1DRRhzre4R$ = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setReturnType").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1907236066041548260L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(hasReturnType_id2Np_kyaxbHi, getReturnType_idp4fykIHzze, setReturnType_id1DRRhzre4R$);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean hasReturnType_id2Np_kyaxbHi(@NotNull SNode __thisNode__) {
    return (SLinkOperations.getTarget(__thisNode__, LINKS.returnTypeWrapper$BjS0) != null) && (SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.returnTypeWrapper$BjS0), LINKS.wrappedType$gJ$) != null) && !(SNodeOperations.getConcept(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.returnTypeWrapper$BjS0), LINKS.wrappedType$gJ$)).isAbstract());
  }
  /*package*/ static SNode getReturnType_idp4fykIHzze(@NotNull SNode __thisNode__) {
    if (((boolean) Method__BehaviorDescriptor.hasReturnType_id2Np_kyaxbHi.invoke(__thisNode__))) {
      return SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.returnTypeWrapper$BjS0), LINKS.wrappedType$gJ$);
    }

    return null;
  }
  /*package*/ static void setReturnType_id1DRRhzre4R$(@NotNull SNode __thisNode__, SNode returnType) {
    SNode wrapper = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x631212aed3936ea2L, "CQRS.structure.DataTypeWrapper"));
    SLinkOperations.setTarget(wrapper, LINKS.wrappedType$gJ$, returnType);
    SLinkOperations.setTarget(__thisNode__, LINKS.returnTypeWrapper$BjS0, wrapper);
  }

  /*package*/ Method__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) hasReturnType_id2Np_kyaxbHi(node));
      case 1:
        return (T) ((SNode) getReturnType_idp4fykIHzze(node));
      case 2:
        setReturnType_id1DRRhzre4R$(node, (SNode) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink returnTypeWrapper$BjS0 = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643f0517eL, 0x73da50864400d215L, "returnTypeWrapper");
    /*package*/ static final SContainmentLink wrappedType$gJ$ = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x631212aed3936ea2L, 0x631212aed3936ea3L, "wrappedType");
  }
}
