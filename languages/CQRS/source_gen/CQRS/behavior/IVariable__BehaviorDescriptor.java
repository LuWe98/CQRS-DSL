package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class IVariable__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910fb0ed95eL, "CQRS.structure.IVariable");

  public static final SMethod<SNode> toVariableReference_id4LpUh3V3H_M = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("toVariableReference").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5501684678950574450L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> toProperty_id4V91Il8jbXp = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("toProperty").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5677076387107487577L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> toParameter_id4V91Il8jc9j = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("toParameter").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5677076387107488339L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<String> getPresentation_id69Qfsw3IoJg = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getPresentation").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(7094926192234040272L).languageId(0x9b92103b95ca8c0cL, 0xceab519525ea4f22L).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(toVariableReference_id4LpUh3V3H_M, toProperty_id4V91Il8jbXp, toParameter_id4V91Il8jc9j, getPresentation_id69Qfsw3IoJg);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNode toVariableReference_id4LpUh3V3H_M(@NotNull SNode __thisNode__) {
    return null;
  }
  /*package*/ static SNode toProperty_id4V91Il8jbXp(@NotNull SNode __thisNode__) {
    SNode property = SNodeFactoryOperations.createNewNode(CONCEPTS.Property$lE, null);
    SPropertyOperations.set(property, PROPS.name$MnvL, SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL));
    SLinkOperations.setTarget(property, LINKS.type$AxAW, SNodeOperations.copyNode(SLinkOperations.getTarget(__thisNode__, LINKS.type$AxAW)));
    return property;
  }
  /*package*/ static SNode toParameter_id4V91Il8jc9j(@NotNull SNode __thisNode__) {
    SNode parameter = SNodeFactoryOperations.createNewNode(CONCEPTS.Parameter$as, null);
    SPropertyOperations.set(parameter, PROPS.name$MnvL, SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL));
    SLinkOperations.setTarget(parameter, LINKS.type$AxAW, SNodeOperations.copyNode(SLinkOperations.getTarget(__thisNode__, LINKS.type$AxAW)));
    return parameter;
  }
  /*package*/ static String getPresentation_id69Qfsw3IoJg(@NotNull SNode __thisNode__, SNode reference) {

    {
      final SNode derivableReference = reference;
      if (SNodeOperations.isInstanceOf(derivableReference, CONCEPTS.DtoDerivedVariableReference$Zp)) {
        return DtoDerivedVariableReference__BehaviorDescriptor.getDerivedVariablePresentation_id25wIjMt0u77.invoke(derivableReference);
      }
    }

    return SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL);
  }

  /*package*/ IVariable__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNode) toVariableReference_id4LpUh3V3H_M(node));
      case 1:
        return (T) ((SNode) toProperty_id4V91Il8jbXp(node));
      case 2:
        return (T) ((SNode) toParameter_id4V91Il8jc9j(node));
      case 3:
        return (T) ((String) getPresentation_id69Qfsw3IoJg(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Property$lE = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ec6f33L, "CQRS.structure.Property");
    /*package*/ static final SConcept Parameter$as = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ca7d84L, "CQRS.structure.Parameter");
    /*package*/ static final SConcept DtoDerivedVariableReference$Zp = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x5d9cf3447d900a56L, "CQRS.structure.DtoDerivedVariableReference");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink type$AxAW = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910fb0ed95eL, 0x4c59e910fe2b0ee9L, "type");
  }
}
