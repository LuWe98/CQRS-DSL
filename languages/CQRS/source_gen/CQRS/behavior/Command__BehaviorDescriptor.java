package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Command__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e243eL, "CQRS.structure.Command");

  public static final SMethod<SNode> toReference_id7IRUqbcjVfX = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("toReference").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(8914850872824935421L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> getCommandContainer_id5$Oa659Yq3n = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getCommandContainer").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6427806966482575575L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Boolean> isInsideCommandContainer_id1jrq3npy$dZ = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isInsideCommandContainer").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1502909481150464895L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Boolean> canToggleKeyword_id5jZDGTfXQ9x = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("canToggleKeyword").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6124797423282250337L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Boolean> canExecuteRequiresTransformation_idomljbxf$Pf = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("canExecuteRequiresTransformation").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(438631690730884431L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter(EditorContext.class, ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(toReference_id7IRUqbcjVfX, getCommandContainer_id5$Oa659Yq3n, isInsideCommandContainer_id1jrq3npy$dZ, canToggleKeyword_id5jZDGTfXQ9x, canExecuteRequiresTransformation_idomljbxf$Pf);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNode toReference_id7IRUqbcjVfX(@NotNull SNode __thisNode__) {
    SNode reference = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2441L, "CQRS.structure.CommandReference"));
    SLinkOperations.setTarget(reference, LINKS.command$RI04, __thisNode__);
    return reference;
  }
  /*package*/ static SNode getCommandContainer_id5$Oa659Yq3n(@NotNull SNode __thisNode__) {
    return SNodeOperations.as(SNodeOperations.getParent(__thisNode__), CONCEPTS.CommandContainer$3C);
  }
  /*package*/ static boolean isInsideCommandContainer_id1jrq3npy$dZ(@NotNull SNode __thisNode__) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(__thisNode__), CONCEPTS.CommandContainer$3C);
  }
  /*package*/ static boolean canToggleKeyword_id5jZDGTfXQ9x(@NotNull SNode __thisNode__) {
    return ((boolean) Command__BehaviorDescriptor.isInsideCommandContainer_id1jrq3npy$dZ.invoke(__thisNode__));
  }
  /*package*/ static boolean canExecuteRequiresTransformation_idomljbxf$Pf(@NotNull SNode __thisNode__, EditorContext editorContext, SNode node) {
    return !(SPropertyOperations.getBoolean(__thisNode__, PROPS.shouldDisplayReferences$PJ7j)) && !((boolean) CommandContainer__BehaviorDescriptor.isCommandHandler_id1LTEHzOfCt.invoke(Command__BehaviorDescriptor.getCommandContainer_id5$Oa659Yq3n.invoke(__thisNode__)));
  }

  /*package*/ Command__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNode) toReference_id7IRUqbcjVfX(node));
      case 1:
        return (T) ((SNode) getCommandContainer_id5$Oa659Yq3n(node));
      case 2:
        return (T) ((Boolean) isInsideCommandContainer_id1jrq3npy$dZ(node));
      case 3:
        return (T) ((Boolean) canToggleKeyword_id5jZDGTfXQ9x(node));
      case 4:
        return (T) ((Boolean) canExecuteRequiresTransformation_idomljbxf$Pf(node, (EditorContext) parameters[0], (SNode) parameters[1]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink command$RI04 = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2441L, 0x73da5086440e2442L, "command");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept CommandContainer$3C = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2a075c454595567L, "CQRS.structure.CommandContainer");
  }

  private static final class PROPS {
    /*package*/ static final SProperty shouldDisplayReferences$PJ7j = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce505e12ecL, 0x54ffa6ce525323cbL, "shouldDisplayReferences");
  }
}
