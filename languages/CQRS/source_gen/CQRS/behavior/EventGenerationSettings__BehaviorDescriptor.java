package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class EventGenerationSettings__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e2ee293eL, "CQRS.structure.EventGenerationSettings");

  public static final SMethod<Boolean> isEventHandlingSettingDefined_id5qxF18ESmSC = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isEventHandlingSettingDefined").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6242459752541023784L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> getEventHandlingSetting_id5qxF18ESmV3 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getEventHandlingSetting").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6242459752541023939L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> getEventHandlingSettingOrDefault_id3GrpC3f2SUA = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getEventHandlingSettingOrDefault").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4259110576024424102L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(isEventHandlingSettingDefined_id5qxF18ESmSC, getEventHandlingSetting_id5qxF18ESmV3, getEventHandlingSettingOrDefault_id3GrpC3f2SUA);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean isEventHandlingSettingDefined_id5qxF18ESmSC(@NotNull SNode __thisNode__) {
    return (EventGenerationSettings__BehaviorDescriptor.getEventHandlingSetting_id5qxF18ESmV3.invoke(__thisNode__) != null);
  }
  /*package*/ static SNode getEventHandlingSetting_id5qxF18ESmV3(@NotNull SNode __thisNode__) {
    return Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(__thisNode__, LINKS.components$vVkX), CONCEPTS.EventHandlingSetting$9A)).first();
  }
  /*package*/ static SNode getEventHandlingSettingOrDefault_id3GrpC3f2SUA(@NotNull SNode __thisNode__) {
    SNode setting = EventGenerationSettings__BehaviorDescriptor.getEventHandlingSetting_id5qxF18ESmV3.invoke(__thisNode__);
    return ((setting != null) ? setting : SNodeFactoryOperations.createNewNode(CONCEPTS.EventHandlingSetting$9A, null));
  }

  /*package*/ EventGenerationSettings__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) isEventHandlingSettingDefined_id5qxF18ESmSC(node));
      case 1:
        return (T) ((SNode) getEventHandlingSetting_id5qxF18ESmV3(node));
      case 2:
        return (T) ((SNode) getEventHandlingSettingOrDefault_id3GrpC3f2SUA(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink components$vVkX = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e2ee293eL, 0x56a1ac122aa03b1bL, "components");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept EventHandlingSetting$9A = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122a7b6f0aL, "CQRS.structure.EventHandlingSetting");
  }
}
