package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Query__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2444L, "CQRS.structure.Query");

  public static final SMethod<SNode> toReference_id5jZDGThYDzO = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("toReference").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6124797423316015348L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> getQueryContainer_id6gxxZVrXJ64 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getQueryContainer").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(7215197606706082180L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Boolean> isInsideQueryContainer_id2Bsub$Lr4Li = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isInsideQueryContainer").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3016418587224853586L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Boolean> areOnlyValidDtoReferencesUsed_id3aCsR_csrN7 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("areOnlyValidDtoReferencesUsed").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3650294462794546375L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> canToggleKeyword_id5jZDGTfXQ9x = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("canToggleKeyword").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6124797423282250337L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Boolean> canExecuteRequiresTransformation_idomljbxf$Pf = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("canExecuteRequiresTransformation").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(438631690730884431L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter(EditorContext.class, ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(toReference_id5jZDGThYDzO, getQueryContainer_id6gxxZVrXJ64, isInsideQueryContainer_id2Bsub$Lr4Li, areOnlyValidDtoReferencesUsed_id3aCsR_csrN7, canToggleKeyword_id5jZDGTfXQ9x, canExecuteRequiresTransformation_idomljbxf$Pf);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNode toReference_id5jZDGThYDzO(@NotNull SNode __thisNode__) {
    SNode reference = SNodeFactoryOperations.createNewNode(CONCEPTS.QueryReference$zj, null);
    SLinkOperations.setTarget(reference, LINKS.query$ROy$, __thisNode__);
    return reference;
  }
  /*package*/ static SNode getQueryContainer_id6gxxZVrXJ64(@NotNull SNode __thisNode__) {
    return SNodeOperations.as(SNodeOperations.getParent(__thisNode__), CONCEPTS.QueryContainer$da);
  }
  /*package*/ static boolean isInsideQueryContainer_id2Bsub$Lr4Li(@NotNull SNode __thisNode__) {
    return (Query__BehaviorDescriptor.getQueryContainer_id6gxxZVrXJ64.invoke(__thisNode__) != null);
  }
  /*package*/ static boolean areOnlyValidDtoReferencesUsed_id3aCsR_csrN7(@NotNull SNode __thisNode__, final SNode allowedDto) {
    return ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(__thisNode__, LINKS.returnType$WTqX), CONCEPTS.DtoReference$zV, true, new SAbstractConcept[]{})).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Objects.equals(SLinkOperations.getTarget(it, LINKS.dto$DOQ$), allowedDto);
      }
    });
  }
  /*package*/ static boolean canToggleKeyword_id5jZDGTfXQ9x(@NotNull SNode __thisNode__) {
    return ((boolean) Query__BehaviorDescriptor.isInsideQueryContainer_id2Bsub$Lr4Li.invoke(__thisNode__));
  }
  /*package*/ static boolean canExecuteRequiresTransformation_idomljbxf$Pf(@NotNull SNode __thisNode__, EditorContext editorContext, SNode node) {
    return !(SPropertyOperations.getBoolean(__thisNode__, PROPS.shouldDisplayReferences$PJ7j)) && (!((boolean) Query__BehaviorDescriptor.isInsideQueryContainer_id2Bsub$Lr4Li.invoke(__thisNode__)) || (boolean) QueryContainer__BehaviorDescriptor.isQueriesBlock_id6gxxZVtebNx.invoke(Query__BehaviorDescriptor.getQueryContainer_id6gxxZVrXJ64.invoke(__thisNode__)));
  }

  /*package*/ Query__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNode) toReference_id5jZDGThYDzO(node));
      case 1:
        return (T) ((SNode) getQueryContainer_id6gxxZVrXJ64(node));
      case 2:
        return (T) ((Boolean) isInsideQueryContainer_id2Bsub$Lr4Li(node));
      case 3:
        return (T) ((Boolean) areOnlyValidDtoReferencesUsed_id3aCsR_csrN7(node, (SNode) parameters[0]));
      case 4:
        return (T) ((Boolean) canToggleKeyword_id5jZDGTfXQ9x(node));
      case 5:
        return (T) ((Boolean) canExecuteRequiresTransformation_idomljbxf$Pf(node, (EditorContext) parameters[0], (SNode) parameters[1]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept QueryReference$zj = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2447L, "CQRS.structure.QueryReference");
    /*package*/ static final SConcept QueryContainer$da = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3a4bff7934079ff4L, "CQRS.structure.QueryContainer");
    /*package*/ static final SConcept DtoReference$zV = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f906L, "CQRS.structure.DtoReference");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink query$ROy$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2447L, 0x73da5086440e2448L, "query");
    /*package*/ static final SContainmentLink returnType$WTqX = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2444L, 0x3a4bff79340ab979L, "returnType");
    /*package*/ static final SReferenceLink dto$DOQ$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f906L, 0x4f0a0db9ac16f907L, "dto");
  }

  private static final class PROPS {
    /*package*/ static final SProperty shouldDisplayReferences$PJ7j = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce505e12ecL, 0x54ffa6ce525323cbL, "shouldDisplayReferences");
  }
}
