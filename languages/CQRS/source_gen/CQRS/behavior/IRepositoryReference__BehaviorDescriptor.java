package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public final class IRepositoryReference__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce505e177aL, "CQRS.structure.IRepositoryReference");

  public static final SMethod<SNode> getRepository_id5jZDGTil89u = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getRepository").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6124797423321907806L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Void> onRepositoryReferencePasted_idmdpAJOmqph = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("onRepositoryReferencePasted").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(400088555752891985L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getRepository_id5jZDGTil89u, onRepositoryReferencePasted_idmdpAJOmqph);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNode getRepository_id5jZDGTil89u(@NotNull SNode __thisNode__) {
    return null;
  }
  /*package*/ static void onRepositoryReferencePasted_idmdpAJOmqph(@NotNull SNode __thisNode__) {
    SNode component = SNodeOperations.getNodeAncestor(__thisNode__, CONCEPTS.IComponentWithRepositoryReferences$Ob, false, false);
    if ((component == null)) {
      return;
    }

    if (!(SNodeOperations.getConcept(__thisNode__).equals(IComponentWithRepositoryReferences__BehaviorDescriptor.allowedRepositoryReferenceType_idmdpAJN9aTg.invoke(component)))) {
      SNodeOperations.deleteNode(__thisNode__);
      return;
    }

    SNode otherRepositoryReference = IComponentWithRepositoryReferences__BehaviorDescriptor.findOtherRepositoryReferenceFor_idmdpAJOdxPO.invoke(component, __thisNode__);
    if ((otherRepositoryReference != null)) {
      SNodeOperations.deleteNode(otherRepositoryReference);
    }
    IComponentWithRepositoryReferences__BehaviorDescriptor.removeReferences_id5jZDGTikSPF.invoke(component, IComponentWithRepositoryReferences__BehaviorDescriptor.findRepositoriesInParentContainer_idd$u27T5a$O.invoke(component));
  }

  /*package*/ IRepositoryReference__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNode) getRepository_id5jZDGTil89u(node));
      case 1:
        onRepositoryReferencePasted_idmdpAJOmqph(node);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IComponentWithRepositoryReferences$Ob = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce505e12ecL, "CQRS.structure.IComponentWithRepositoryReferences");
  }
}
