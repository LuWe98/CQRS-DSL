package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import CQRS.helper.VariableWrapper;
import java.util.Set;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.Collections;
import CQRS.helper.SimpleVariableWrapper;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import CQRS.helper.DerivedVariableWrapper;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class IDtoDerivation__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L, "CQRS.structure.IDtoDerivation");

  public static final SMethod<Boolean> isDto_id5QsWOhW7Oe$ = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isDto").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6745533817359909796L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Boolean> isFlatteningRule_id5QsWOhW7QXj = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isFlatteningRule").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6745533817359920979L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Boolean> isDerived_id3NXs7yomeLh = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isDerived").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4394792474637823057L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> getDtoDerivable_id3NXs7yomd17 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getDtoDerivable").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4394792474637815879L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<SNode>> getDerivedVariables_id1vyzkEMqauO = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getDerivedVariables").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1721093359569250228L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<SNode>> getIgnoredVariables_id3NXs7yomsZY = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getIgnoredVariables").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4394792474637881342L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Void> clearIgnoredVariables_id3NXs7ypg5IO = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("clearIgnoredVariables").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4394792474652990388L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Void> resetIgnoredVariables_id3NXs7ypgbbL = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("resetIgnoredVariables").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4394792474653012721L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Void> clearUsedDerivationRules_id1pnQbpDKcyV = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("clearUsedDerivationRules").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1609993669778131131L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Void> resetUsedDerivationRules_id5QsWOhW8B1z = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("resetUsedDerivationRules").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6745533817360117859L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<SNode>> usedDerivationRules_id5YqiGT0qq9q = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("usedDerivationRules").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6888900829720978010L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<SNode>> findUsedTypeRules_id3L7_qKL_k$z = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("findUsedTypeRules").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4343604932420913443L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<SNode>> findUsedFlatteningRules_id5QsWOhW8P2M = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("findUsedFlatteningRules").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6745533817360175282L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> findUsedFlatteningRuleFor_id5QsWOhW8V8e = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("findUsedFlatteningRuleFor").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6745533817360200206L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Iterable<VariableWrapper>> getAvailableVariableWrappers_id1vyzkEMqlbX = new SMethodBuilder<Iterable<VariableWrapper>>(new SJavaCompoundTypeImpl((Class<Iterable<VariableWrapper>>) ((Class) Object.class))).name("getAvailableVariableWrappers").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1721093359569294077L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  /*package*/ static final SMethod<Iterable<VariableWrapper>> getAvailableVariableWrappers_id1vyzkEMYbtk = new SMethodBuilder<Iterable<VariableWrapper>>(new SJavaCompoundTypeImpl((Class<Iterable<VariableWrapper>>) ((Class) Object.class))).name("getAvailableVariableWrappers").modifiers(0, AccessPrivileges.PRIVATE).concept(CONCEPT).baseMethodId(1721093359578691412L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter((Class<Set<SNode>>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<Iterable<SNode>>) ((Class) Object.class), ""));
  /*package*/ static final SMethod<Iterable<VariableWrapper>> getUsedVariableWrappers_id7z5h98TcaB1 = new SMethodBuilder<Iterable<VariableWrapper>>(new SJavaCompoundTypeImpl((Class<Iterable<VariableWrapper>>) ((Class) Object.class))).name("getUsedVariableWrappers").modifiers(0, AccessPrivileges.PRIVATE).concept(CONCEPT).baseMethodId(8702437249778756033L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter((Class<Set<SNode>>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<Iterable<SNode>>) ((Class) Object.class), ""));
  public static final SMethod<Iterable<VariableWrapper>> getUsedVariableWrappers_id1vyzkEMwXLH = new SMethodBuilder<Iterable<VariableWrapper>>(new SJavaCompoundTypeImpl((Class<Iterable<VariableWrapper>>) ((Class) Object.class))).name("getUsedVariableWrappers").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1721093359571033197L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<SNode>> getAvailableVariables_id3NXs7yp5UST = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getAvailableVariables").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4394792474650324537L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<SNode>> getUsedVariables_id3NXs7yp5PgA = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getUsedVariables").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4394792474650301478L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<VariableWrapper>> getAvailableVariableWrappersOf_id25wIjMt02_q = new SMethodBuilder<Iterable<VariableWrapper>>(new SJavaCompoundTypeImpl((Class<Iterable<VariableWrapper>>) ((Class) Object.class))).name("getAvailableVariableWrappersOf").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(2405125870999054682L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  /*package*/ static final SMethod<Iterable<VariableWrapper>> getAvailableVariableWrappersOf_id1vyzkEMxjUh = new SMethodBuilder<Iterable<VariableWrapper>>(new SJavaCompoundTypeImpl((Class<Iterable<VariableWrapper>>) ((Class) Object.class))).name("getAvailableVariableWrappersOf").modifiers(0, AccessPrivileges.PRIVATE).concept(CONCEPT).baseMethodId(1721093359571123857L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<Set<SNode>>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<Iterable<SNode>>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(isDto_id5QsWOhW7Oe$, isFlatteningRule_id5QsWOhW7QXj, isDerived_id3NXs7yomeLh, getDtoDerivable_id3NXs7yomd17, getDerivedVariables_id1vyzkEMqauO, getIgnoredVariables_id3NXs7yomsZY, clearIgnoredVariables_id3NXs7ypg5IO, resetIgnoredVariables_id3NXs7ypgbbL, clearUsedDerivationRules_id1pnQbpDKcyV, resetUsedDerivationRules_id5QsWOhW8B1z, usedDerivationRules_id5YqiGT0qq9q, findUsedTypeRules_id3L7_qKL_k$z, findUsedFlatteningRules_id5QsWOhW8P2M, findUsedFlatteningRuleFor_id5QsWOhW8V8e, getAvailableVariableWrappers_id1vyzkEMqlbX, getAvailableVariableWrappers_id1vyzkEMYbtk, getUsedVariableWrappers_id7z5h98TcaB1, getUsedVariableWrappers_id1vyzkEMwXLH, getAvailableVariables_id3NXs7yp5UST, getUsedVariables_id3NXs7yp5PgA, getAvailableVariableWrappersOf_id25wIjMt02_q, getAvailableVariableWrappersOf_id1vyzkEMxjUh);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean isDto_id5QsWOhW7Oe$(@NotNull SNode __thisNode__) {
    return SNodeOperations.isInstanceOf(__thisNode__, CONCEPTS.Dto$yu);
  }
  /*package*/ static boolean isFlatteningRule_id5QsWOhW7QXj(@NotNull SNode __thisNode__) {
    return SNodeOperations.isInstanceOf(__thisNode__, CONCEPTS.DtoFlatteningRule$GR);
  }
  /*package*/ static boolean isDerived_id3NXs7yomeLh(@NotNull SNode __thisNode__) {
    return (SLinkOperations.getTarget(__thisNode__, LINKS.derivableReference$gfNO) != null);
  }
  /*package*/ static SNode getDtoDerivable_id3NXs7yomd17(@NotNull SNode __thisNode__) {
    return (SNode) IDtoDerivableReference__BehaviorDescriptor.getDtoDerivable_id4LpUh3T0tIy.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.derivableReference$gfNO));
  }
  /*package*/ static Iterable<SNode> getDerivedVariables_id1vyzkEMqauO(@NotNull SNode __thisNode__) {
    return (Iterable<SNode>) IDtoDerivable__BehaviorDescriptor.getVariables_id4LpUh3V6b_Y.invoke(IDtoDerivation__BehaviorDescriptor.getDtoDerivable_id3NXs7yomd17.invoke(__thisNode__));
  }
  /*package*/ static Iterable<SNode> getIgnoredVariables_id3NXs7yomsZY(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.ignoredVariableReferences$gg2P)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return (SNode) IVariableReference__BehaviorDescriptor.getReferencedVariable_id4LpUh3V3HC0.invoke(it);
      }
    });
  }
  /*package*/ static void clearIgnoredVariables_id3NXs7ypg5IO(@NotNull SNode __thisNode__) {
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.ignoredVariableReferences$gg2P)).clear();
  }
  /*package*/ static void resetIgnoredVariables_id3NXs7ypgbbL(@NotNull SNode __thisNode__) {
    IDtoDerivation__BehaviorDescriptor.clearIgnoredVariables_id3NXs7ypg5IO.invoke(__thisNode__);
    SPropertyOperations.set(__thisNode__, PROPS.showIgnoredVariables$glFd, false);
  }
  /*package*/ static void clearUsedDerivationRules_id1pnQbpDKcyV(@NotNull SNode __thisNode__) {
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.derivationRuleReferences$YFqo)).clear();
  }
  /*package*/ static void resetUsedDerivationRules_id5QsWOhW8B1z(@NotNull SNode __thisNode__) {
    IDtoDerivation__BehaviorDescriptor.clearUsedDerivationRules_id1pnQbpDKcyV.invoke(__thisNode__);
    SPropertyOperations.set(__thisNode__, PROPS.showDerivationRules$QFN9, false);
  }
  /*package*/ static Iterable<SNode> usedDerivationRules_id5YqiGT0qq9q(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.derivationRuleReferences$YFqo)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return (SNode) IDtoDerivationRuleReference__BehaviorDescriptor.getReferencedRule_id5YqiGT0mxXR.invoke(it);
      }
    });
  }
  /*package*/ static Iterable<SNode> findUsedTypeRules_id3L7_qKL_k$z(@NotNull SNode __thisNode__) {
    return SNodeOperations.ofConcept(IDtoDerivation__BehaviorDescriptor.usedDerivationRules_id5YqiGT0qq9q.invoke(__thisNode__), CONCEPTS.DtoDataTypeRule$Go);
  }
  /*package*/ static Iterable<SNode> findUsedFlatteningRules_id5QsWOhW8P2M(@NotNull SNode __thisNode__) {
    return SNodeOperations.ofConcept(IDtoDerivation__BehaviorDescriptor.usedDerivationRules_id5YqiGT0qq9q.invoke(__thisNode__), CONCEPTS.DtoFlatteningRule$GR);
  }
  /*package*/ static SNode findUsedFlatteningRuleFor_id5QsWOhW8V8e(@NotNull SNode __thisNode__, final SNode derivable) {
    return Sequence.fromIterable(IDtoDerivation__BehaviorDescriptor.findUsedFlatteningRules_id5QsWOhW8P2M.invoke(__thisNode__)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return IDtoDerivation__BehaviorDescriptor.getDtoDerivable_id3NXs7yomd17.invoke(it) == derivable;
      }
    });
  }
  /*package*/ static Iterable<VariableWrapper> getAvailableVariableWrappers_id1vyzkEMqlbX(@NotNull SNode __thisNode__) {
    return ((Iterable<VariableWrapper>) IDtoDerivation__BehaviorDescriptor.getAvailableVariableWrappers_id1vyzkEMYbtk.invokeSpecial(__thisNode__, SetSequence.fromSet(new HashSet<SNode>()), BoundedContext__BehaviorDescriptor.dtoImplicitFlattteningRules_id5QsWOhWb1wA.invoke(IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(__thisNode__))));
  }
  /*package*/ static Iterable<VariableWrapper> getAvailableVariableWrappers_id1vyzkEMYbtk(@NotNull SNode __thisNode__, Set<SNode> forbiddenDerivables, Iterable<SNode> implicitFlattteningRules) {
    if (!((boolean) IDtoDerivation__BehaviorDescriptor.isDerived_id3NXs7yomeLh.invoke(__thisNode__))) {
      return Sequence.fromIterable(Collections.emptyList());
    }

    List<SNode> variables = Sequence.fromIterable(IDtoDerivable__BehaviorDescriptor.getVariables_id4LpUh3V6b_Y.invoke(IDtoDerivation__BehaviorDescriptor.getDtoDerivable_id3NXs7yomd17.invoke(__thisNode__))).toListSequence();
    final Iterable<SNode> derivableVariables = ListSequence.fromList(variables).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, LINKS.type$AxAW), CONCEPTS.IDtoDerivableReference$dn);
      }
    });

    if (Sequence.fromIterable(derivableVariables).isEmpty()) {
      return ListSequence.fromList(variables).select(new ISelector<SNode, SimpleVariableWrapper>() {
        public SimpleVariableWrapper select(SNode it) {
          return SimpleVariableWrapper.of(it);
        }
      });
    }

    List<VariableWrapper> resultVariables = ListSequence.fromList(new ArrayList<VariableWrapper>());
    Iterable<SimpleVariableWrapper> nonDerivedVariables = ListSequence.fromList(variables).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(Sequence.fromIterable(derivableVariables).contains(it));
      }
    }).select(new ISelector<SNode, SimpleVariableWrapper>() {
      public SimpleVariableWrapper select(SNode it) {
        return SimpleVariableWrapper.of(it);
      }
    });
    ListSequence.fromList(resultVariables).addSequence(Sequence.fromIterable(nonDerivedVariables));

    // TODO Das vllt noch weiter nach oben machen
    SetSequence.fromSet(forbiddenDerivables).addElement(IDtoDerivation__BehaviorDescriptor.getDtoDerivable_id3NXs7yomd17.invoke(__thisNode__));

    for (final SNode derivableVariable : derivableVariables) {
      final SNode derivable = IDtoDerivableReference__BehaviorDescriptor.getDtoDerivable_id4LpUh3T0tIy.invoke(SNodeOperations.cast(SLinkOperations.getTarget(derivableVariable, LINKS.type$AxAW), CONCEPTS.IDtoDerivableReference$dn));

      boolean areMultipleDerivablesOfSameTypePresent = Sequence.fromIterable(derivableVariables).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return it != derivableVariable && IDtoDerivableReference__BehaviorDescriptor.getDtoDerivable_id4LpUh3T0tIy.invoke(SNodeOperations.cast(SLinkOperations.getTarget(it, LINKS.type$AxAW), CONCEPTS.IDtoDerivableReference$dn)) == derivable;
        }
      });

      if (areMultipleDerivablesOfSameTypePresent) {
        ListSequence.fromList(resultVariables).addElement(SimpleVariableWrapper.of(derivableVariable));
        continue;
      }

      final Wrappers._T<SNode> flatteningRule = new Wrappers._T<SNode>(IDtoDerivation__BehaviorDescriptor.findUsedFlatteningRuleFor_id5QsWOhW8V8e.invoke(__thisNode__, derivable));
      if ((flatteningRule.value == null)) {
        flatteningRule.value = Sequence.fromIterable(implicitFlattteningRules).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return IDtoDerivation__BehaviorDescriptor.getDtoDerivable_id3NXs7yomd17.invoke(it) == derivable;
          }
        });
      }

      if ((flatteningRule.value != null) && !(SetSequence.fromSet(forbiddenDerivables).contains(derivable))) {
        SetSequence.fromSet(forbiddenDerivables).addElement(derivable);
        Iterable<VariableWrapper> wrappers = IDtoDerivation__BehaviorDescriptor.getUsedVariableWrappers_id7z5h98TcaB1.invoke(flatteningRule.value, forbiddenDerivables, implicitFlattteningRules);

        ListSequence.fromList(resultVariables).addSequence(Sequence.fromIterable(wrappers).select(new ISelector<VariableWrapper, DerivedVariableWrapper>() {
          public DerivedVariableWrapper select(VariableWrapper wrapper) {
            return DerivedVariableWrapper.of(flatteningRule.value, wrapper);
          }
        }));
        continue;
      }

      ListSequence.fromList(resultVariables).addElement(SimpleVariableWrapper.of(derivableVariable));
    }

    return resultVariables;
  }
  /*package*/ static Iterable<VariableWrapper> getUsedVariableWrappers_id7z5h98TcaB1(@NotNull SNode __thisNode__, Set<SNode> forbiddenDerivables, Iterable<SNode> implicitFlattteningRules) {
    final Iterable<SNode> ignoredVariables = IDtoDerivation__BehaviorDescriptor.getIgnoredVariables_id3NXs7yomsZY.invoke(__thisNode__);
    return Sequence.fromIterable(IDtoDerivation__BehaviorDescriptor.getAvailableVariableWrappers_id1vyzkEMYbtk.invokeSpecial(__thisNode__, forbiddenDerivables, implicitFlattteningRules)).where(new IWhereFilter<VariableWrapper>() {
      public boolean accept(VariableWrapper it) {
        return !(Sequence.fromIterable(ignoredVariables).contains(it.getWrappedVariable()));
      }
    });
  }
  /*package*/ static Iterable<VariableWrapper> getUsedVariableWrappers_id1vyzkEMwXLH(@NotNull SNode __thisNode__) {
    final Iterable<SNode> ignoredVariables = IDtoDerivation__BehaviorDescriptor.getIgnoredVariables_id3NXs7yomsZY.invoke(__thisNode__);
    return Sequence.fromIterable(IDtoDerivation__BehaviorDescriptor.getAvailableVariableWrappers_id1vyzkEMqlbX.invoke(__thisNode__)).where(new IWhereFilter<VariableWrapper>() {
      public boolean accept(VariableWrapper it) {
        return !(Sequence.fromIterable(ignoredVariables).contains(it.getWrappedVariable()));
      }
    });
  }
  /*package*/ static Iterable<SNode> getAvailableVariables_id3NXs7yp5UST(@NotNull SNode __thisNode__) {
    return Sequence.fromIterable(IDtoDerivation__BehaviorDescriptor.getAvailableVariableWrappers_id1vyzkEMqlbX.invoke(__thisNode__)).select(new ISelector<VariableWrapper, SNode>() {
      public SNode select(VariableWrapper it) {
        return it.getWrappedVariable();
      }
    });
  }
  /*package*/ static Iterable<SNode> getUsedVariables_id3NXs7yp5PgA(@NotNull SNode __thisNode__) {
    return Sequence.fromIterable(IDtoDerivation__BehaviorDescriptor.getUsedVariableWrappers_id1vyzkEMwXLH.invoke(__thisNode__)).select(new ISelector<VariableWrapper, SNode>() {
      public SNode select(VariableWrapper it) {
        return it.getWrappedVariable();
      }
    });
  }
  /*package*/ static Iterable<VariableWrapper> getAvailableVariableWrappersOf_id25wIjMt02_q(@NotNull SNode __thisNode__, SNode variable) {
    return ((Iterable<VariableWrapper>) IDtoDerivation__BehaviorDescriptor.getAvailableVariableWrappersOf_id1vyzkEMxjUh.invokeSpecial(__thisNode__, variable, SetSequence.fromSet(new HashSet<SNode>()), BoundedContext__BehaviorDescriptor.dtoImplicitFlattteningRules_id5QsWOhWb1wA.invoke(IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(__thisNode__))));
  }
  /*package*/ static Iterable<VariableWrapper> getAvailableVariableWrappersOf_id1vyzkEMxjUh(@NotNull SNode __thisNode__, SNode variable, Set<SNode> forbiddenDerivables, Iterable<SNode> implicitFlattteningRules) {
    // TODO Das vllt noch besser implementieren.
    if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(variable, LINKS.type$AxAW), CONCEPTS.IDtoDerivableReference$dn))) {
      return ListSequence.fromListAndArray(new ArrayList<VariableWrapper>(), SimpleVariableWrapper.of(variable));
    }

    SetSequence.fromSet(forbiddenDerivables).addElement(IDtoDerivation__BehaviorDescriptor.getDtoDerivable_id3NXs7yomd17.invoke(__thisNode__));

    final SNode derivable = IDtoDerivableReference__BehaviorDescriptor.getDtoDerivable_id4LpUh3T0tIy.invoke(SNodeOperations.cast(SLinkOperations.getTarget(variable, LINKS.type$AxAW), CONCEPTS.IDtoDerivableReference$dn));

    final Wrappers._T<SNode> flatteningRule = new Wrappers._T<SNode>(IDtoDerivation__BehaviorDescriptor.findUsedFlatteningRuleFor_id5QsWOhW8V8e.invoke(__thisNode__, derivable));
    if ((flatteningRule.value == null)) {
      flatteningRule.value = Sequence.fromIterable(implicitFlattteningRules).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return IDtoDerivation__BehaviorDescriptor.getDtoDerivable_id3NXs7yomd17.invoke(it) == derivable;
        }
      });
    }

    if ((flatteningRule.value != null) && !(SetSequence.fromSet(forbiddenDerivables).contains(derivable))) {
      Iterable<VariableWrapper> wrappers = IDtoDerivation__BehaviorDescriptor.getAvailableVariableWrappers_id1vyzkEMYbtk.invoke(flatteningRule.value, forbiddenDerivables, implicitFlattteningRules);
      return Sequence.fromIterable(wrappers).select(new ISelector<VariableWrapper, DerivedVariableWrapper>() {
        public DerivedVariableWrapper select(VariableWrapper wrapper) {
          return DerivedVariableWrapper.of(flatteningRule.value, wrapper);
        }
      });
    }

    return ListSequence.fromListAndArray(new ArrayList<VariableWrapper>(), SimpleVariableWrapper.of(variable));
  }

  /*package*/ IDtoDerivation__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) isDto_id5QsWOhW7Oe$(node));
      case 1:
        return (T) ((Boolean) isFlatteningRule_id5QsWOhW7QXj(node));
      case 2:
        return (T) ((Boolean) isDerived_id3NXs7yomeLh(node));
      case 3:
        return (T) ((SNode) getDtoDerivable_id3NXs7yomd17(node));
      case 4:
        return (T) ((Iterable<SNode>) getDerivedVariables_id1vyzkEMqauO(node));
      case 5:
        return (T) ((Iterable<SNode>) getIgnoredVariables_id3NXs7yomsZY(node));
      case 6:
        clearIgnoredVariables_id3NXs7ypg5IO(node);
        return null;
      case 7:
        resetIgnoredVariables_id3NXs7ypgbbL(node);
        return null;
      case 8:
        clearUsedDerivationRules_id1pnQbpDKcyV(node);
        return null;
      case 9:
        resetUsedDerivationRules_id5QsWOhW8B1z(node);
        return null;
      case 10:
        return (T) ((Iterable<SNode>) usedDerivationRules_id5YqiGT0qq9q(node));
      case 11:
        return (T) ((Iterable<SNode>) findUsedTypeRules_id3L7_qKL_k$z(node));
      case 12:
        return (T) ((Iterable<SNode>) findUsedFlatteningRules_id5QsWOhW8P2M(node));
      case 13:
        return (T) ((SNode) findUsedFlatteningRuleFor_id5QsWOhW8V8e(node, (SNode) parameters[0]));
      case 14:
        return (T) ((Iterable<VariableWrapper>) getAvailableVariableWrappers_id1vyzkEMqlbX(node));
      case 15:
        return (T) ((Iterable<VariableWrapper>) getAvailableVariableWrappers_id1vyzkEMYbtk(node, (Set<SNode>) parameters[0], (Iterable<SNode>) parameters[1]));
      case 16:
        return (T) ((Iterable<VariableWrapper>) getUsedVariableWrappers_id7z5h98TcaB1(node, (Set<SNode>) parameters[0], (Iterable<SNode>) parameters[1]));
      case 17:
        return (T) ((Iterable<VariableWrapper>) getUsedVariableWrappers_id1vyzkEMwXLH(node));
      case 18:
        return (T) ((Iterable<SNode>) getAvailableVariables_id3NXs7yp5UST(node));
      case 19:
        return (T) ((Iterable<SNode>) getUsedVariables_id3NXs7yp5PgA(node));
      case 20:
        return (T) ((Iterable<VariableWrapper>) getAvailableVariableWrappersOf_id25wIjMt02_q(node, (SNode) parameters[0]));
      case 21:
        return (T) ((Iterable<VariableWrapper>) getAvailableVariableWrappersOf_id1vyzkEMxjUh(node, (SNode) parameters[0], (Set<SNode>) parameters[1], (Iterable<SNode>) parameters[2]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Dto$yu = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f903L, "CQRS.structure.Dto");
    /*package*/ static final SConcept DtoFlatteningRule$GR = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f985L, "CQRS.structure.DtoFlatteningRule");
    /*package*/ static final SConcept DtoDataTypeRule$Go = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f984L, "CQRS.structure.DtoDataTypeRule");
    /*package*/ static final SInterfaceConcept IDtoDerivableReference$dn = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910f8f63541L, "CQRS.structure.IDtoDerivableReference");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink derivableReference$gfNO = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L, 0x3cfd707898583364L, "derivableReference");
    /*package*/ static final SContainmentLink ignoredVariableReferences$gg2P = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L, 0x3cfd707898583365L, "ignoredVariableReferences");
    /*package*/ static final SContainmentLink derivationRuleReferences$YFqo = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L, 0x5d9cf3447c21f3d5L, "derivationRuleReferences");
    /*package*/ static final SContainmentLink type$AxAW = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910fb0ed95eL, 0x4c59e910fe2b0ee9L, "type");
  }

  private static final class PROPS {
    /*package*/ static final SProperty showIgnoredVariables$glFd = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L, 0x3cfd707898583368L, "showIgnoredVariables");
    /*package*/ static final SProperty showDerivationRules$QFN9 = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L, 0x3cfd70789a0b2c59L, "showDerivationRules");
  }
}
