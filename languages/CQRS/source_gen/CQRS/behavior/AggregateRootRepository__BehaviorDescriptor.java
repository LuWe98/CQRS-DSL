package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.util.Objects;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public final class AggregateRootRepository__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL, "CQRS.structure.AggregateRootRepository");

  public static final SMethod<Iterable<SNode>> methods_id23PrvZQXxsd = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("methods").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(2374925324635215629L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Iterable<SNode>> publicMethods_id1DRRhzvh2wu = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("publicMethods").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1907236066109433886L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<String> repositoryName_id5qxF18G6I2Y = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("repositoryName").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(6242459752561565886L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<SNode> toReference_id3fVLq_sH2wi = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("toReference").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3745804846284154898L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<String> getPlaceholderText_id2RbvdOLeryC = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getPlaceholderText").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3299868441434503336L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(methods_id23PrvZQXxsd, publicMethods_id1DRRhzvh2wu, repositoryName_id5qxF18G6I2Y, toReference_id3fVLq_sH2wi, getPlaceholderText_id2RbvdOLeryC);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Iterable<SNode> methods_id23PrvZQXxsd(@NotNull SNode __thisNode__) {
    return SNodeOperations.ofConcept(SLinkOperations.getChildren(__thisNode__, LINKS.components$liQK), CONCEPTS.Method$mm);
  }
  /*package*/ static Iterable<SNode> publicMethods_id1DRRhzvh2wu(@NotNull SNode __thisNode__) {
    return Sequence.fromIterable(AggregateRootRepository__BehaviorDescriptor.methods_id23PrvZQXxsd.invoke(__thisNode__)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SEnumOperations.isMember(SPropertyOperations.getEnum(it, PROPS.modifier$TTVg), 0x2a075c4547294cdL);
      }
    });
  }
  /*package*/ static String repositoryName_id5qxF18G6I2Y(@NotNull SNode __thisNode__) {
    return (((boolean) IComponentWithNamePlaceholder__BehaviorDescriptor.isNameSet_id2RbvdOM0nGV.invoke(__thisNode__)) ? IComponentWithNamePlaceholder__BehaviorDescriptor.getName_id2RbvdOM0peT.invoke(__thisNode__) : IComponentWithNamePlaceholder__BehaviorDescriptor.getPlaceholderText_id2RbvdOLeryC.invoke(__thisNode__));
  }
  /*package*/ static SNode toReference_id3fVLq_sH2wi(@NotNull SNode __thisNode__) {
    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x593428614a1cdb1aL, "CQRS.structure.AggregateRootRepositoryReference"));
    SLinkOperations.setTarget(node, LINKS.aggregate$rv49, SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.aggregateReference$1ZNc), LINKS.aggregate$D_P$));
    SLinkOperations.setTarget(node, LINKS.aggregateRepository$Ozlr, __thisNode__);
    return node;
  }
  /*package*/ static String getPlaceholderText_id2RbvdOLeryC(@NotNull SNode __thisNode__) {
    return (!(Objects.equals(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.aggregateReference$1ZNc), LINKS.aggregate$D_P$), PROPS.name$MnvL), null)) ? SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.aggregateReference$1ZNc), LINKS.aggregate$D_P$), PROPS.name$MnvL) + "Repository" : " - ");
  }

  /*package*/ AggregateRootRepository__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Iterable<SNode>) methods_id23PrvZQXxsd(node));
      case 1:
        return (T) ((Iterable<SNode>) publicMethods_id1DRRhzvh2wu(node));
      case 2:
        return (T) ((String) repositoryName_id5qxF18G6I2Y(node));
      case 3:
        return (T) ((SNode) toReference_id3fVLq_sH2wi(node));
      case 4:
        return (T) ((String) getPlaceholderText_id2RbvdOLeryC(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink components$liQK = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL, 0x2a075c4548404a1L, "components");
    /*package*/ static final SReferenceLink aggregate$rv49 = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x593428614a1cdb1aL, 0x593428614a1d9431L, "aggregate");
    /*package*/ static final SContainmentLink aggregateReference$1ZNc = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL, 0x5e223a0a09fe3269L, "aggregateReference");
    /*package*/ static final SReferenceLink aggregate$D_P$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f2L, 0x4f0a0db9ac16f8f3L, "aggregate");
    /*package*/ static final SReferenceLink aggregateRepository$Ozlr = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x593428614a1cdb1aL, 0x56a1ac122bfc9f2eL, "aggregateRepository");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Method$mm = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643f0517eL, "CQRS.structure.Method");
  }

  private static final class PROPS {
    /*package*/ static final SProperty modifier$TTVg = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643f0517eL, 0x2a075c4547294d8L, "modifier");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
