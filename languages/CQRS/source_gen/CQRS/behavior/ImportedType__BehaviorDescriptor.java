package CQRS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Objects;
import CQRS.util.JavaTypeCheckUtils;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;

public final class ImportedType__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL, "CQRS.structure.ImportedType");

  public static final SMethod<String> getName_id4p0keayJ2pN = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getName").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5062134915487508083L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<String> qualifiedName_idSXYyTWcNId = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("qualifiedName").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1026251367669513101L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Integer> typeCount_idSXYyTVHlmk = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("typeCount").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1026251367661262228L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Integer> expectedTypeCount_idSXYyTVHqCv = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("expectedTypeCount").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1026251367661283871L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Boolean> expectsGenericTypes_id3aCsR_d7tlX = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("expectsGenericTypes").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3650294462805824893L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Boolean> isTypeCountCorrect_idSXYyTVHx5I = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isTypeCountCorrect").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1026251367661310318L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Boolean> areAllTypesSet_idSXYyTVHHg3 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("areAllTypesSet").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1026251367661360131L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2();
  public static final SMethod<Boolean> hasSameDatatype_id3DbZR$NHBwn = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("hasSameDatatype").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4200731973476841495L).languageId(0x9401426cad0a8857L, 0xfe04f903cef2451dL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getName_id4p0keayJ2pN, qualifiedName_idSXYyTWcNId, typeCount_idSXYyTVHlmk, expectedTypeCount_idSXYyTVHqCv, expectsGenericTypes_id3aCsR_d7tlX, isTypeCountCorrect_idSXYyTVHx5I, areAllTypesSet_idSXYyTVHHg3, hasSameDatatype_id3DbZR$NHBwn);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String getName_id4p0keayJ2pN(@NotNull SNode __thisNode__) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(__thisNode__, LINKS.importStatement$D_66), PROPS.name$MnvL);
  }
  /*package*/ static String qualifiedName_idSXYyTWcNId(@NotNull SNode __thisNode__) {
    return (String) ImportStatement__BehaviorDescriptor.qualifiedName_id3DbZR$OfNHM.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.importStatement$D_66));
  }
  /*package*/ static int typeCount_idSXYyTVHlmk(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.actualTypes$o6Gi)).count();
  }
  /*package*/ static int expectedTypeCount_idSXYyTVHqCv(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.importStatement$D_66), LINKS.genericTypes$ns1R)).count();
  }
  /*package*/ static boolean expectsGenericTypes_id3aCsR_d7tlX(@NotNull SNode __thisNode__) {
    return ((int) ImportedType__BehaviorDescriptor.expectedTypeCount_idSXYyTVHqCv.invoke(__thisNode__)) != 0;
  }
  /*package*/ static boolean isTypeCountCorrect_idSXYyTVHx5I(@NotNull SNode __thisNode__) {
    return ((int) ImportedType__BehaviorDescriptor.typeCount_idSXYyTVHlmk.invoke(__thisNode__)) == ((int) ImportedType__BehaviorDescriptor.expectedTypeCount_idSXYyTVHqCv.invoke(__thisNode__));
  }
  /*package*/ static boolean areAllTypesSet_idSXYyTVHHg3(@NotNull SNode __thisNode__) {
    return ((boolean) ImportedType__BehaviorDescriptor.isTypeCountCorrect_idSXYyTVHx5I.invoke(__thisNode__)) && ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.actualTypes$o6Gi)).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(it)), CONCEPTS.IDataType$Sx));
      }
    });
  }
  /*package*/ static boolean hasSameDatatype_id3DbZR$NHBwn(@NotNull SNode __thisNode__, SNode otherDataType) {
    {
      final SNode importType = otherDataType;
      if (SNodeOperations.isInstanceOf(importType, CONCEPTS.ImportedType$3u)) {
        return Objects.equals(ImportStatement__BehaviorDescriptor.qualifiedName_id3DbZR$OfNHM.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.importStatement$D_66)), ImportStatement__BehaviorDescriptor.qualifiedName_id3DbZR$OfNHM.invoke(SLinkOperations.getTarget(importType, LINKS.importStatement$D_66)));
      }
    }

    {
      final SNode javaType = otherDataType;
      if (SNodeOperations.isInstanceOf(javaType, CONCEPTS.JavaDataType$MU)) {
        return JavaTypeCheckUtils.doesJavaTypeMatchImportType(SLinkOperations.getTarget(javaType, LINKS.actualType$WqWC), __thisNode__);
      }
    }

    return false;
  }

  /*package*/ ImportedType__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) getName_id4p0keayJ2pN(node));
      case 1:
        return (T) ((String) qualifiedName_idSXYyTWcNId(node));
      case 2:
        return (T) ((Integer) typeCount_idSXYyTVHlmk(node));
      case 3:
        return (T) ((Integer) expectedTypeCount_idSXYyTVHqCv(node));
      case 4:
        return (T) ((Boolean) expectsGenericTypes_id3aCsR_d7tlX(node));
      case 5:
        return (T) ((Boolean) isTypeCountCorrect_idSXYyTVHx5I(node));
      case 6:
        return (T) ((Boolean) areAllTypesSet_idSXYyTVHHg3(node));
      case 7:
        return (T) ((Boolean) hasSameDatatype_id3DbZR$NHBwn(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink importStatement$D_66 = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL, 0x4f0a0db9ac16f8f0L, "importStatement");
    /*package*/ static final SContainmentLink actualTypes$o6Gi = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL, 0x5e223a0a0b9c13cdL, "actualTypes");
    /*package*/ static final SContainmentLink genericTypes$ns1R = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16ea31L, 0x5e223a0a0afcb64aL, "genericTypes");
    /*package*/ static final SContainmentLink actualType$WqWC = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x53a29a8dae148659L, 0x53a29a8dae14865eL, "actualType");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IDataType$Sx = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c9dL, "CQRS.structure.IDataType");
    /*package*/ static final SConcept ImportedType$3u = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL, "CQRS.structure.ImportedType");
    /*package*/ static final SConcept JavaDataType$MU = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x53a29a8dae148659L, "CQRS.structure.JavaDataType");
  }
}
