package CQRS.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import jetbrains.mps.openapi.editor.descriptor.EditorHintsProvider;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;
import java.util.Arrays;
import jetbrains.mps.editor.runtime.descriptor.ConceptEditorHintImpl;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.NamedMenuId;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.openapi.editor.cells.KeyMap;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase implements EditorHintsProvider {
  private Collection<ConceptEditorHint> myHints = Arrays.<ConceptEditorHint>asList(new ConceptEditorHintImpl("1_bounded_context", "Bounded Context Hint", true, "CQRS.editor.EmptyLineHints.1_bounded_context"), new ConceptEditorHintImpl("1_aggregate_root", "Aggregate Root Hint", true, "CQRS.editor.EmptyLineHints.1_aggregate_root"), new ConceptEditorHintImpl("1_entity", "Entity Hint", true, "CQRS.editor.EmptyLineHints.1_entity"), new ConceptEditorHintImpl("1_event_container", "Event Container Hint", true, "CQRS.editor.EmptyLineHints.1_event_container"), new ConceptEditorHintImpl("ignoredVariablesContextHint", "", true, "CQRS.editor.UseEditorHints.ignoredVariablesContextHint"));
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AggregateRoot_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AggregateRootReference_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AggregateRootRepository_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new AggregateRootRepositoryReference_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new BoundedContext_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Command_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new CommandContainer_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new CommandGenerationSettings_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new CommandHandlingSetting_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new CommandReference_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new CommentLine_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new DataTypeWrapper_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Description_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new DescriptionLine_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new Dto_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new DtoDataTypeRule_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new DtoDataTypeRuleContainer_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new DtoDataTypeRuleReference_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new DtoDerivedVariableReference_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new DtoFlatteningRule_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new DtoFlatteningRuleContainer_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new DtoFlatteningRuleReference_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new DtoReference_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new DtoRepository_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new DtoRepositoryReference_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new EmptyLine_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new Entity_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new EntityReference_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new Event_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new EventContainer_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new EventContainerReference_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new EventGenerationSettings_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new EventHandlingSetting_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new EventReference_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new GenerationSettings_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new GenericType_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new ICollectionType_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new IDataType_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new IDtoDerivableReference_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new IDtoDerivationRuleReference_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new IEntityComponent_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new IOptionalValidIdentifierWrapper_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new IPrimitiveType_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new IRepositoryReference_Editor());
      case 44:
        return Arrays.asList(new ConceptEditor[]{new IVariableReference_Editor(), new IVariableReference_ignoredVariablesContextHint_Editor()});
      case 45:
        return Collections.<ConceptEditor>singletonList(new ImportPackage_Editor());
      case 46:
        return Collections.<ConceptEditor>singletonList(new ImportStatement_Editor());
      case 47:
        return Collections.<ConceptEditor>singletonList(new ImportedType_Editor());
      case 48:
        return Collections.<ConceptEditor>singletonList(new JavaDataType_Editor());
      case 49:
        return Collections.<ConceptEditor>singletonList(new KotlinDataType_Editor());
      case 50:
        return Collections.<ConceptEditor>singletonList(new MapType_Editor());
      case 51:
        return Collections.<ConceptEditor>singletonList(new Method_Editor());
      case 52:
        return Collections.<ConceptEditor>singletonList(new OutputPathPreference_Editor());
      case 53:
        return Collections.<ConceptEditor>singletonList(new Parameter_Editor());
      case 54:
        return Collections.<ConceptEditor>singletonList(new ParameterReference_Editor());
      case 55:
        return Collections.<ConceptEditor>singletonList(new Property_Editor());
      case 56:
        return Collections.<ConceptEditor>singletonList(new PropertyReference_Editor());
      case 57:
        return Collections.<ConceptEditor>singletonList(new Query_Editor());
      case 58:
        return Collections.<ConceptEditor>singletonList(new QueryContainer_Editor());
      case 59:
        return Collections.<ConceptEditor>singletonList(new QueryContainerMethods_Editor());
      case 60:
        return Collections.<ConceptEditor>singletonList(new QueryContainerReference_Editor());
      case 61:
        return Collections.<ConceptEditor>singletonList(new QueryGenerationSettings_Editor());
      case 62:
        return Collections.<ConceptEditor>singletonList(new QueryHandlingSetting_Editor());
      case 63:
        return Collections.<ConceptEditor>singletonList(new QueryMethods_Editor());
      case 64:
        return Collections.<ConceptEditor>singletonList(new QueryProcessingSetting_Editor());
      case 65:
        return Collections.<ConceptEditor>singletonList(new QueryReference_Editor());
      case 66:
        return Collections.<ConceptEditor>singletonList(new ValueObject_Editor());
      case 67:
        return Collections.<ConceptEditor>singletonList(new ValueObjectReference_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_0(String editorComponentId) {
    if ("CQRS.editor.Dto_DerivationLayout_EditorComponent".equals(editorComponentId)) {
      return Collections.singletonList(new Dto_DerivationLayout_EditorComponent());
    }
    return Collections.emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_1(String editorComponentId) {
    if ("CQRS.editor.DtoFlatteningRule_DerivationLayout_EditorComponent".equals(editorComponentId)) {
      return Collections.singletonList(new DtoFlatteningRule_DerivationLayout_EditorComponent());
    }
    return Collections.emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_2(String editorComponentId) {
    if ("CQRS.editor.IComponentWithAggregateRepositoryReferencesEditorComponent".equals(editorComponentId)) {
      return Collections.singletonList(new IComponentWithAggregateRepositoryReferencesEditorComponent());
    }
    return Collections.emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_3(String editorComponentId) {
    if ("CQRS.editor.IComponentWithDtoRepositoryReferencesEditorComponent".equals(editorComponentId)) {
      return Collections.singletonList(new IComponentWithDtoRepositoryReferencesEditorComponent());
    }
    return Collections.emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_4(String editorComponentId) {
    switch (editorComponentId) {
      case "CQRS.editor.IComponentWithNamePlaceholder_EditorComponent":
        return Collections.singletonList(new IComponentWithNamePlaceholder_EditorComponent());
      case "CQRS.editor.IComponentWithNamePlaceholder_StringLiteral_EditorComponent":
        return Collections.singletonList(new IComponentWithNamePlaceholder_StringLiteral_EditorComponent());
    }
    return Collections.emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_5(String editorComponentId) {
    if ("CQRS.editor.IComponentWithParametersParameterLayout".equals(editorComponentId)) {
      return Collections.singletonList(new IComponentWithParametersParameterLayout());
    }
    return Collections.emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_6(String editorComponentId) {
    switch (editorComponentId) {
      case "CQRS.editor.IComponentWithRepositoryReferencesAndRequiresKeyword_EditorComponent":
        return Collections.singletonList(new IComponentWithRepositoryReferencesAndRequiresKeyword_EditorComponent());
      case "CQRS.editor.IComponentWithRepositoryReferences_EditorComponent":
        return Collections.singletonList(new IComponentWithRepositoryReferences_EditorComponent());
    }
    return Collections.emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_7(String editorComponentId) {
    switch (editorComponentId) {
      case "CQRS.editor.IDtoDerivation_IgnoredVariables_EditorComponent":
        return Collections.singletonList(new IDtoDerivation_IgnoredVariables_EditorComponent());
      case "CQRS.editor.IDtoDerivation_UsedDerivationRules_EditorComponent":
        return Collections.singletonList(new IDtoDerivation_UsedDerivationRules_EditorComponent());
    }
    return Collections.emptyList();
  }
  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return getDeclaredEC_0(editorComponentId);
      case 1:
        return getDeclaredEC_1(editorComponentId);
      case 2:
        return getDeclaredEC_2(editorComponentId);
      case 3:
        return getDeclaredEC_3(editorComponentId);
      case 4:
        return getDeclaredEC_4(editorComponentId);
      case 5:
        return getDeclaredEC_5(editorComponentId);
      case 6:
        return getDeclaredEC_6(editorComponentId);
      case 7:
        return getDeclaredEC_7(editorComponentId);
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorHint> getHints() {
    return myHints;
  }

  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredNamedTransformationMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.AggregateRootRepositoryKeywordTranformationMenu":
              return Arrays.asList(new TransformationMenu[]{new AggregateRootRepositoryKeywordTranformationMenu()});
            default:
          }
        }
        break;
      case 1:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.CommandContainerCommandContainerTypeTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new CommandContainerCommandContainerTypeTransformationMenu()});
            case "CQRS.editor.CommandContainer_RequiresAndForAggregate_TransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new CommandContainer_RequiresAndForAggregate_TransformationMenu()});
            default:
          }
        }
        break;
      case 2:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.DtoBodyCreation_TransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new DtoBodyCreation_TransformationMenu()});
            default:
          }
        }
        break;
      case 3:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.DtoFlatDerivationRule_NameConvention_TransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new DtoFlatDerivationRule_NameConvention_TransformationMenu()});
            default:
          }
        }
        break;
      case 4:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.EventContainerTypeTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new EventContainerTypeTransformationMenu()});
            default:
          }
        }
        break;
      case 5:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.ConstructorLeftTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new ConstructorLeftTransformationMenu()});
            case "CQRS.editor.ConstructorRightTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new ConstructorRightTransformationMenu()});
            case "CQRS.editor.InitialParameterLeftTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new InitialParameterLeftTransformationMenu()});
            default:
          }
        }
        break;
      case 6:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.IComponentWithRepositoryReferences_RequiresTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new IComponentWithRepositoryReferences_RequiresTransformationMenu()});
            default:
          }
        }
        break;
      case 7:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.DataTypeTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new DataTypeTransformationMenu()});
            default:
          }
        }
        break;
      case 8:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.IDtoDerivableReference_TransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new IDtoDerivableReference_TransformationMenu()});
            default:
          }
        }
        break;
      case 9:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.IDtoDerivable_UseDerivationRules_TransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new IDtoDerivable_UseDerivationRules_TransformationMenu()});
            case "CQRS.editor.IDtoDerivation_IgnoredVariablesTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new IDtoDerivation_IgnoredVariablesTransformationMenu()});
            case "CQRS.editor.IDtoDerivition_IgnoredVariablesTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new IDtoDerivition_IgnoredVariablesTransformationMenu()});
            default:
          }
        }
        break;
      case 10:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.IVariableReference_IgnoredVariables_TransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new IVariableReference_IgnoredVariables_TransformationMenu()});
            default:
          }
        }
        break;
      case 11:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.ImportAsAliasTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new ImportAsAliasTransformationMenu()});
            case "CQRS.editor.ImportStatementGenericTypeTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new ImportStatementGenericTypeTransformationMenu()});
            default:
          }
        }
        break;
      case 12:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.ImportStatementReferenceCreateTypeArgumentsTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new ImportStatementReferenceCreateTypeArgumentsTransformationMenu()});
            default:
          }
        }
        break;
      case 13:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.MethodClosingBracesTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new MethodClosingBracesTransformationMenu()});
            case "CQRS.editor.MethodInitialParameterRightTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new MethodInitialParameterRightTransformationMenu()});
            default:
          }
        }
        break;
      case 14:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.PropertyGetter_TransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new PropertyGetter_TransformationMenu()});
            default:
          }
        }
        break;
      case 15:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.QueryContainerQueryKeywordTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new QueryContainerQueryKeywordTransformationMenu()});
            default:
          }
        }
        break;
      case 16:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.ValueObjectBodyTransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new ValueObjectBodyTransformationMenu()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new AggregateRootReference_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new AggregateRootRepositoryReference_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new CommandReference_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new DataTypeWrapper_SubstituteMenu());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new Description_SubstituteMenu());
      case 5:
        return Collections.<SubstituteMenu>singletonList(new DescriptionLine_SubstituteMenu());
      case 6:
        return Collections.<SubstituteMenu>singletonList(new DtoDataTypeRuleReference_SubstituteMenu());
      case 7:
        return Collections.<SubstituteMenu>singletonList(new DtoDerivedVariableReference_SubstituteMenu());
      case 8:
        return Collections.<SubstituteMenu>singletonList(new DtoFlatteningRuleReference_SubstituteMenu());
      case 9:
        return Collections.<SubstituteMenu>singletonList(new DtoReference_SubstituteMenu());
      case 10:
        return Collections.<SubstituteMenu>singletonList(new DtoRepositoryReference_SubstituteMenu());
      case 11:
        return Collections.<SubstituteMenu>singletonList(new EmptyLine_SubstituteMenu());
      case 12:
        return Collections.<SubstituteMenu>singletonList(new EntityReference_SubstituteMenu());
      case 13:
        return Collections.<SubstituteMenu>singletonList(new EventContainerReference_SubstituteMenu());
      case 14:
        return Collections.<SubstituteMenu>singletonList(new EventReference_SubstituteMenu());
      case 15:
        return Collections.<SubstituteMenu>singletonList(new GenericType_SubstituteMenu());
      case 16:
        return Collections.<SubstituteMenu>singletonList(new IAggregateRootComponent_SubstituteMenu());
      case 17:
        return Collections.<SubstituteMenu>singletonList(new IAggregateRootRepositoryComponent_SubstituteMenu());
      case 18:
        return Collections.<SubstituteMenu>singletonList(new IBoundedContextComponent_SubstituteMenu());
      case 19:
        return Collections.<SubstituteMenu>singletonList(new ICommandGenerationSettingsComponent_SubstituteMenu());
      case 20:
        return Collections.<SubstituteMenu>singletonList(new IDtoComponent_SubstituteMenu());
      case 21:
        return Collections.<SubstituteMenu>singletonList(new IDtoDataTypeRuleContainerComponent_SubstituteMenu());
      case 22:
        return Collections.<SubstituteMenu>singletonList(new IDtoDerivable_SubstituteMenu());
      case 23:
        return Collections.<SubstituteMenu>singletonList(new IDtoDerivationRuleReference_SubstituteMenu());
      case 24:
        return Collections.<SubstituteMenu>singletonList(new IDtoFlatteningRuleContainerComponent_SubstituteMenu());
      case 25:
        return Collections.<SubstituteMenu>singletonList(new IDtoRepositoryComponent_SubstituteMenu());
      case 26:
        return Collections.<SubstituteMenu>singletonList(new IEntityComponent_SubstituteMenu());
      case 27:
        return Collections.<SubstituteMenu>singletonList(new IEventGenerationSettingsComponent_SubstituteMenu());
      case 28:
        return Collections.<SubstituteMenu>singletonList(new IGeneratorSettingsComponent_SubstituteMenu());
      case 29:
        return Collections.<SubstituteMenu>singletonList(new IOptionalValidIdentifierWrapper_SubstituteMenu());
      case 30:
        return Collections.<SubstituteMenu>singletonList(new IPrimitiveType_SubstituteMenu());
      case 31:
        return Collections.<SubstituteMenu>singletonList(new IQueryGenerationSettingsComponent_SubstituteMenu());
      case 32:
        return Collections.<SubstituteMenu>singletonList(new IRepositoryReference_SubstituteMenu());
      case 33:
        return Collections.<SubstituteMenu>singletonList(new IValueObjectComponent_SubstituteMenu());
      case 34:
        return Collections.<SubstituteMenu>singletonList(new ImportedType_SubstituteMenu());
      case 35:
        return Collections.<SubstituteMenu>singletonList(new ParameterReference_SubstituteMenu());
      case 36:
        return Collections.<SubstituteMenu>singletonList(new PropertyReference_SubstituteMenu());
      case 37:
        return Collections.<SubstituteMenu>singletonList(new QueryContainerReference_SubstituteMenu());
      case 38:
        return Collections.<SubstituteMenu>singletonList(new QueryReference_SubstituteMenu());
      case 39:
        return Collections.<SubstituteMenu>singletonList(new SubstitudeDataType_SubstituteMenu());
      case 40:
        return Collections.<SubstituteMenu>singletonList(new ValueObjectReference_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredNamedSubstituteMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (conceptIndex4.index(cncpt)) {
      case 0:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.IgnoredVariablesSubstitudeMenu":
              return Arrays.asList(new SubstituteMenu[]{new IgnoredVariablesSubstitudeMenu()});
            default:
          }
        }
        break;
      case 1:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.MethodCreationKeywordsSubstiudeMenu":
              return Arrays.asList(new SubstituteMenu[]{new MethodCreationKeywordsSubstiudeMenu()});
            default:
          }
        }
        break;
      case 2:
        if (true) {
          switch (menuId.getFqName()) {
            case "CQRS.editor.PropertyCreationKeywords_SubstitudeMenu":
              return Arrays.asList(new SubstituteMenu[]{new PropertyCreationKeywords_SubstitudeMenu()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<SubstituteMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<KeyMap> getDeclaredKeyMaps() {
    return Arrays.<KeyMap>asList(new IComponentWithNamePlaceholder_KeyMap());
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c99L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x593428614a1cdb1aL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x49ba7df3e302f916L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e243eL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2a075c454595567L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e2ee293bL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122ac5a075L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2441L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb964345d71a2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x631212aed3936ea2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e3d3397dL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e34e22efL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f903L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f984L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910fdd145f8L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x78c544923a1c15a2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x5d9cf3447d900a56L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f985L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789940548dL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x78c544923a1c15a0L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f906L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867ab796ffL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedbd24164L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb964344649a2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8fdL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f900L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2438L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da50864411af9fL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce4d64aaaeL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e2ee293eL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122a7b6f0aL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2439L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x58d666bf1654206L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x5e223a0a0afc9663L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cbdL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c9dL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910f8f63541L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x5d9cf3447c732a76L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ef0772L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2dcb7cdd2f0bdc0fL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c9fL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce505e177aL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910fafca7b2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8e3L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16ea31L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x53a29a8dae148659L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2da8ed8a0510a207L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x783dbe7d5ebb3779L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643f0517eL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x76b18bc8df40cea1L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ca7d84L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ec6f30L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ec6f33L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ec8131L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2444L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3a4bff7934079ff4L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c89L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c8cL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e2ee2941L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122ac5a076L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867afde0b7L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122acef4d6L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2447L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f7L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8faL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f903L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f985L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4dea9f2b9de68ac3L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedbd2416cL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x71e6ab661db3f2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb96433e80624L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce505e12ecL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2a075c454595567L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f903L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f985L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da50864411af9fL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb96433e80624L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce505e12ecL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c9dL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910f8f63541L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910fafca7b2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16ea31L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643f0517eL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ec6f33L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3a4bff7934079ff4L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f7L)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x593428614a1cdb1aL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2441L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x631212aed3936ea2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e3d3397dL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e34e22efL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x78c544923a1c15a2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x5d9cf3447d900a56L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x78c544923a1c15a0L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f906L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedbd24164L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb964344649a2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f900L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce4d64aaaeL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2439L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x5e223a0a0afc9663L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2a075c45497102dL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x75be8047bc84329eL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6375c6ceebab8368L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122ac59249L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb964347c709cL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0xa84dfea89294288L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910f901bdaeL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x5d9cf3447c732a76L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0xa84dfea89294285L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867ad9aec4L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ef0772L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122a7b6f09L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e2ee2937L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2dcb7cdd2f0bdc0fL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c9fL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122ac59248L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce505e177aL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb96433094734L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ec6f30L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ec8131L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c8cL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2447L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910fbf94f5aL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8faL)).seal();
  private static final ConceptSwitchIndex conceptIndex4 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910fafca7b2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643f0517eL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ec6f33L)).seal();
}
