package CQRS.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.transformation.TransformationMenuBase;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.editor.menus.transformation.MenuLocations;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.editor.menus.MenuPart;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.editor.menus.transformation.WrapSubstituteMenuTransformationMenuPart;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuLookup;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuLookup;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.lang.editor.menus.transformation.SubstituteMenuItemAsActionItem;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteCompletionActionItem;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.editor.runtime.menus.SubstituteItemProxy;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CQRS.behavior.IDtoDerivableReference__BehaviorDescriptor;
import CQRS.behavior.IDtoDerivation__BehaviorDescriptor;
import jetbrains.mps.openapi.editor.menus.style.EditorMenuItemStyle;
import jetbrains.mps.editor.runtime.menus.EditorMenuItemModifyingCustomizationContext;
import jetbrains.mps.editor.runtime.completion.CompletionItemInformation;
import jetbrains.mps.editor.runtime.menus.EditorMenuItemCompositeCustomizationContext;
import jetbrains.mps.editor.runtime.completion.CompletionMenuItemCustomizationContext;
import jetbrains.mps.openapi.editor.menus.style.EditorMenuItemCustomizer;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class IDtoDerivableReference_TransformationMenu extends TransformationMenuBase {
  private final Set<String> myLocations = SetSequence.fromSetAndArray(new HashSet<String>(), MenuLocations.SUBSTITUTE);
  @Override
  public boolean isApplicableToLocation(@NotNull String location) {
    return SetSequence.fromSet(myLocations).contains(location);
  }

  @NotNull
  @Override
  public List<TransformationMenuItem> createMenuItems(@NotNull TransformationMenuContext context) {
    context.getEditorMenuTrace().pushTraceInfo();
    context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("named transformation menu " + "IDtoDerivableReference_TransformationMenu", new SNodePointer("r:9b8b8719-a560-486b-9a35-0c285c344856(CQRS.editor)", "5501684678935521533")));
    try {
      return super.createMenuItems(context);
    } finally {
      context.getEditorMenuTrace().popTraceInfo();
    }
  }

  @Override
  @NotNull
  protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts(TransformationMenuContext _context) {
    List<MenuPart<TransformationMenuItem, TransformationMenuContext>> result = new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>();
    if (ListSequence.fromListAndArray(new ArrayList<String>(), MenuLocations.SUBSTITUTE).contains(_context.getMenuLocation())) {
      result.add(new TMP_WrapSM_j8vtv3_a0());
    }
    return result;
  }

  public class TMP_WrapSM_j8vtv3_a0 extends WrapSubstituteMenuTransformationMenuPart {
    @NotNull
    @Override
    public List<TransformationMenuItem> createItems(@NotNull TransformationMenuContext context) {
      context.getEditorMenuTrace().pushTraceInfo();
      context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("wrap substitute menu " + "default substitute menu for " + "IDtoDerivableReference", new SNodePointer("r:9b8b8719-a560-486b-9a35-0c285c344856(CQRS.editor)", "5501684678935521543")));
      try {
        return super.createItems(context);
      } finally {
        context.getEditorMenuTrace().popTraceInfo();
      }
    }

    @Nullable
    @Override
    protected SubstituteMenuLookup getSubstituteMenuLookup(TransformationMenuContext _context) {
      final EditorContext editorContext = _context.getEditorContext();
      SAbstractConcept conceptToFindMenuFor = getConceptToFindMenuFor(_context);
      return new DefaultSubstituteMenuLookup(LanguageRegistry.getInstance(editorContext.getRepository()), conceptToFindMenuFor);
    }
    private SAbstractConcept getConceptToFindMenuFor(TransformationMenuContext _context) {
      return CONCEPTS.IDtoDerivableReference$dn;
    }


    private class SMIasTMI extends SubstituteMenuItemAsActionItem implements SubstituteCompletionActionItem {

      private final SNode targetNode;
      private final TransformationMenuContext _context;
      private final SubstituteItemProxy wrappedItem;

      public SMIasTMI(SubstituteMenuItem substituteItem, SNode targetNode, TransformationMenuContext tctx) {
        super(substituteItem);
        this.targetNode = targetNode;
        this._context = tctx;
        wrappedItem = new SubstituteItemProxy(substituteItem);
      }

      @Override
      public void execute(@NotNull String pattern) {
        SNode createdNode = getSubstituteItem().createNode(pattern);
        {
          final SNode derivation = _context.getNode();
          if (SNodeOperations.isInstanceOf(derivation, CONCEPTS.IDtoDerivation$Yg)) {
            SLinkOperations.setTarget(derivation, LINKS.derivableReference$gfNO, createdNode);
          }
        }

        {
          final SNode reference = _context.getNode();
          if (SNodeOperations.isInstanceOf(reference, CONCEPTS.IDtoDerivableReference$dn)) {
            if (IDtoDerivableReference__BehaviorDescriptor.getDtoDerivable_id4LpUh3T0tIy.invoke(reference) != IDtoDerivableReference__BehaviorDescriptor.getDtoDerivable_id4LpUh3T0tIy.invoke(createdNode)) {
              SNode derivation = SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.IDtoDerivation$Yg, true, false);
              IDtoDerivation__BehaviorDescriptor.clearIgnoredVariables_id3NXs7ypg5IO.invoke(derivation);
              IDtoDerivation__BehaviorDescriptor.clearUsedDerivationRules_id1pnQbpDKcyV.invoke(derivation);
            }
            SNodeOperations.replaceWithAnother(_context.getNode(), createdNode);
          }
        }
      }

      @Override
      public void customize(String pattern, EditorMenuItemStyle style) {
        super.customize(pattern, style);
        if (targetNode != null) {
          EditorMenuItemModifyingCustomizationContext context = new EditorMenuItemModifyingCustomizationContext(targetNode, null, null, null);
          CompletionItemInformation completionItemInformation = new CompletionItemInformation(null, null, getMatchingText(pattern), getShortDescriptionText(pattern));
          EditorMenuItemCompositeCustomizationContext compositeContext = new EditorMenuItemCompositeCustomizationContext(context, new CompletionMenuItemCustomizationContext(completionItemInformation));
          for (EditorMenuItemCustomizer customizer : _context.getCustomizers()) {
            customizer.customize(style, compositeContext);
          }

        }
      }

      @Override
      public String getShortDescriptionText(@NotNull String pattern) {
        SAbstractConcept cncpt = wrappedItem.getOutputConcept();
        switch (conceptIndex.index(cncpt)) {
          case 0:
            return "aggregate root";
          case 1:
            return "entity";
          case 2:
            return "value object";
          default:
            return "";
        }
      }
    }


    @Override
    protected TransformationMenuItem createTransformationItem(final SNode targetNode, final SubstituteMenuItem item, final TransformationMenuContext _context) {
      return new SMIasTMI(item, targetNode, _context);
    }
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f900L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8faL)).seal();

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IDtoDerivableReference$dn = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910f8f63541L, "CQRS.structure.IDtoDerivableReference");
    /*package*/ static final SInterfaceConcept IDtoDerivation$Yg = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L, "CQRS.structure.IDtoDerivation");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink derivableReference$gfNO = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3cfd70789857e2b7L, 0x3cfd707898583364L, "derivableReference");
  }
}
