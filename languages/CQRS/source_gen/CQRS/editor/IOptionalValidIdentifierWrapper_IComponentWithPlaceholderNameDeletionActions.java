package CQRS.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import CQRS.behavior.QueryContainer__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.editor.runtime.deletionApprover.DeletionApproverUtil;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.cells.CellAction;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import java.util.Objects;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class IOptionalValidIdentifierWrapper_IComponentWithPlaceholderNameDeletionActions {

  /*package*/ static AbstractCellAction createAction_DELETE(final SNode node) {
    return new AbstractCellAction() {
      public void execute(EditorContext editorContext) {
        this.execute_internal(editorContext, node);
      }
      public void execute_internal(EditorContext editorContext, SNode node) {
        SNode component = SNodeOperations.getNodeAncestor(node, CONCEPTS.IComponentWithNamePlaceholder$bn, true, false);

        if ((boolean) QueryContainer__BehaviorDescriptor.isQueriesBlock_id6gxxZVtebNx.invoke(SNodeOperations.as(component, CONCEPTS.QueryContainer$da)) || SNodeOperations.isInstanceOf(component, CONCEPTS.DtoRepository$kM) || SNodeOperations.isInstanceOf(component, CONCEPTS.AggregateRootRepository$qW) || SNodeOperations.isInstanceOf(component, CONCEPTS.EventContainer$Aq) || SNodeOperations.isInstanceOf(component, CONCEPTS.DtoFlatteningRule$GR)) {
          SNodeOperations.deleteNode(SLinkOperations.getTarget(component, LINKS.nameWrapper$X65Q));
          SelectionUtil.selectCell(editorContext, component, "placeholderCellId");
          return;
        }

        {
          final SNode commandContainer = component;
          if (SNodeOperations.isInstanceOf(commandContainer, CONCEPTS.CommandContainer$3C)) {
            if (SPropertyOperations.getBoolean(commandContainer, PROPS.shouldDisplayAggregate$eU79)) {
              SNodeOperations.deleteNode(SLinkOperations.getTarget(commandContainer, LINKS.nameWrapper$X65Q));
              SelectionUtil.selectCell(editorContext, commandContainer, "placeholderCellId");
              return;
            }
          }
        }

        if (DeletionApproverUtil.approve(editorContext, component)) {
          return;
        }
        SNodeOperations.deleteNode(component);
      }
      @Override
      public boolean canExecute(EditorContext editorContext) {
        return this.canExecute_internal(editorContext, node);
      }
      public boolean canExecute_internal(EditorContext editorContext, SNode node) {
        return (SNodeOperations.getNodeAncestor(node, CONCEPTS.IComponentWithNamePlaceholder$bn, true, false) != null);
      }

    };
  }

  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    CellAction originalDelete = editorCell.getAction(CellActionType.DELETE);
    CellAction originalBackspace = editorCell.getAction(CellActionType.BACKSPACE);

    // set actions that were actually defined
    setDefinedCellActions(editorCell, node, context);

    // If we set a DELETE action but no BACKSPACE action,
    // use the DELETE action for BACKSPACE as well.
    CellAction delete = editorCell.getAction(CellActionType.DELETE);
    CellAction backspace = editorCell.getAction(CellActionType.BACKSPACE);
    if (delete != originalDelete && backspace == originalBackspace) {
      editorCell.setAction(CellActionType.BACKSPACE, delete);
    }
    if (delete != originalDelete) {
      editorCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET, OB);
    }
    if (backspace != originalBackspace) {
      editorCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_BACKSPACE_SET, OB);
    }
  }

  private static final Object OB = new Object();

  public static void setDefinedCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    // set cell actions from all imported action maps

    // set cell actions defined directly in this action map
    editorCell.setAction(CellActionType.DELETE, createAction_DELETE(node));
  }

  public static void setDefinedCellActionsOfType(EditorCell editorCell, SNode node, EditorContext context, CellActionType actionType) {

    // set cell action(s) of the given type from imported action maps

    // set cell action of the given type defined directly in this action map
    if (Objects.equals(actionType, CellActionType.DELETE)) {
      editorCell.setAction(actionType, createAction_DELETE(node));
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IComponentWithNamePlaceholder$bn = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x71e6ab661db3f2L, "CQRS.structure.IComponentWithNamePlaceholder");
    /*package*/ static final SConcept QueryContainer$da = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3a4bff7934079ff4L, "CQRS.structure.QueryContainer");
    /*package*/ static final SConcept DtoRepository$kM = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867ab796ffL, "CQRS.structure.DtoRepository");
    /*package*/ static final SConcept AggregateRootRepository$qW = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL, "CQRS.structure.AggregateRootRepository");
    /*package*/ static final SConcept EventContainer$Aq = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da50864411af9fL, "CQRS.structure.EventContainer");
    /*package*/ static final SConcept DtoFlatteningRule$GR = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f985L, "CQRS.structure.DtoFlatteningRule");
    /*package*/ static final SConcept CommandContainer$3C = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2a075c454595567L, "CQRS.structure.CommandContainer");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink nameWrapper$X65Q = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x71e6ab661db3f2L, 0x2dcb7cdd32004e34L, "nameWrapper");
  }

  private static final class PROPS {
    /*package*/ static final SProperty shouldDisplayAggregate$eU79 = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2a075c454595567L, 0x507f100ee0ae3ec7L, "shouldDisplayAggregate");
  }
}
