package CQRS.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.substitute.SubstituteMenuBase;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.menus.substitute.ConstraintsFilteringSubstituteMenuPartDecorator;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.editor.menus.ParameterizedMenuPart;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.lang.editor.menus.substitute.SingleItemSubstituteMenuPart;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.EditorMenuTraceInfo;
import CQRS.behavior.Query__BehaviorDescriptor;
import jetbrains.mps.editor.runtime.completion.CompletionItemInformation;
import jetbrains.mps.smodel.presentation.NodePresentationUtil;
import jetbrains.mps.smodel.runtime.IconResource;
import jetbrains.mps.smodel.runtime.IconResourceUtil;
import CQRS.behavior.IComponentWithNamePlaceholder__BehaviorDescriptor;
import CQRS.behavior.QueryContainer__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import CQRS.behavior.IElementOfBoundedContext__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CQRS.behavior.QueryMethods__BehaviorDescriptor;
import CQRS.behavior.BoundedContext__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class QueryReference_SubstituteMenu extends SubstituteMenuBase {
  @NotNull
  @Override
  protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts(final SubstituteMenuContext _context) {
    List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> result = new ArrayList<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>();
    result.add(new ConstraintsFilteringSubstituteMenuPartDecorator(new SMP_Param_i8uaii_a(), CONCEPTS.QueryReference$zj));
    return result;
  }

  @NotNull
  @Override
  public List<SubstituteMenuItem> createMenuItems(@NotNull SubstituteMenuContext context) {
    context.getEditorMenuTrace().pushTraceInfo();
    context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("default substitute menu for " + "QueryReference", new SNodePointer("r:9b8b8719-a560-486b-9a35-0c285c344856(CQRS.editor)", "4534216578413565438")));
    try {
      return super.createMenuItems(context);
    } finally {
      context.getEditorMenuTrace().popTraceInfo();
    }
  }


  private class SMP_Param_i8uaii_a extends ParameterizedMenuPart<SNode, SubstituteMenuItem, SubstituteMenuContext> {
    @NotNull
    @Override
    protected List<SubstituteMenuItem> createItems(SNode parameter, SubstituteMenuContext context) {
      return new SMP_Action_i8uaii_a0(parameter).createItems(context);
    }
    @NotNull
    @Override
    public List<SubstituteMenuItem> createItems(@NotNull SubstituteMenuContext context) {
      context.getEditorMenuTrace().pushTraceInfo();
      context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("parameterized substitute menu part", new SNodePointer("r:9b8b8719-a560-486b-9a35-0c285c344856(CQRS.editor)", "4534216578413565443")));
      try {
        return super.createItems(context);
      } finally {
        context.getEditorMenuTrace().popTraceInfo();
      }
    }
    @Nullable
    @Override
    protected Iterable<? extends SNode> getParameters(SubstituteMenuContext _context) {
      if (SNodeOperations.isInstanceOf(_context.getParentNode(), CONCEPTS.QueryMethods$oC)) {
        return QueryReference_SubstituteMenu.this._additional_provideQueriesFor(SNodeOperations.cast(_context.getParentNode(), CONCEPTS.QueryMethods$oC), _context.getCurrentTargetNode());
      }

      return Sequence.fromIterable(Collections.emptyList());
    }
    private class SMP_Action_i8uaii_a0 extends SingleItemSubstituteMenuPart {
      private final SNode myParameterObject;
      public SMP_Action_i8uaii_a0(SNode parameterObject) {
        myParameterObject = parameterObject;
      }

      @Nullable
      @Override
      protected SubstituteMenuItem createItem(SubstituteMenuContext _context) {
        Item item = new Item(_context);
        String description;
        try {
          description = "Substitute item: " + item.getMatchingText("");
          description += ". Parameter object: " + myParameterObject;
        } catch (Throwable t) {
          Logger.getLogger(getClass()).error("Exception while executing getMatchingText() of the item " + item, t);
          return null;
        }

        _context.getEditorMenuTrace().pushTraceInfo();
        try {
          _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase(description, new SNodePointer("r:9b8b8719-a560-486b-9a35-0c285c344856(CQRS.editor)", "4534216578413565754")));
          item.setTraceInfo(_context.getEditorMenuTrace().getTraceInfo());
        } finally {
          _context.getEditorMenuTrace().popTraceInfo();
        }

        return item;
      }
      private class Item extends DefaultSubstituteMenuItem {
        private final SubstituteMenuContext _context;
        private EditorMenuTraceInfo myTraceInfo;
        public Item(SubstituteMenuContext context) {
          super(CONCEPTS.QueryReference$zj, context);
          _context = context;
        }

        private void setTraceInfo(EditorMenuTraceInfo traceInfo) {
          myTraceInfo = traceInfo;
        }

        @Nullable
        @Override
        public SNode createNode(@NotNull String pattern) {
          return (SNode) Query__BehaviorDescriptor.toReference_id5jZDGThYDzO.invoke(myParameterObject);
        }

        @Override
        public EditorMenuTraceInfo getTraceInfo() {
          return myTraceInfo;
        }
        @NotNull
        protected CompletionItemInformation createInformation(String pattern) {
          return new CompletionItemInformation(myParameterObject, CONCEPTS.QueryReference$zj, getMatchingText(pattern), getDescriptionText(pattern));
        }
        @Nullable
        @Override
        public String getMatchingText(@NotNull String pattern) {
          if (myParameterObject instanceof SNode) {
            return NodePresentationUtil.visibleMatchingText((SNode) myParameterObject, null);
          }
          return "" + myParameterObject;
        }
        @Nullable
        @Override
        public IconResource getIcon(@NotNull String pattern) {
          if (myParameterObject instanceof SNode) {
            return IconResourceUtil.getIconResourceForNode(((SNode) myParameterObject));
          }
          return null;
        }
        @Nullable
        @Override
        public String getDescriptionText(@NotNull String pattern) {
          if (!((boolean) Query__BehaviorDescriptor.isInsideQueryContainer_id2Bsub$Lr4Li.invoke(myParameterObject))) {
            return "query";
          }
          SNode queryContainer = Query__BehaviorDescriptor.getQueryContainer_id6gxxZVrXJ64.invoke(myParameterObject);

          String containerDisplayName = ((boolean) IComponentWithNamePlaceholder__BehaviorDescriptor.isNameSet_id2RbvdOM0nGV.invoke(queryContainer) ? IComponentWithNamePlaceholder__BehaviorDescriptor.getName_id2RbvdOM0peT.invoke(queryContainer) : ((boolean) QueryContainer__BehaviorDescriptor.isQueriesBlock_id6gxxZVtebNx.invoke(queryContainer) ? IComponentWithNamePlaceholder__BehaviorDescriptor.getPlaceholderText_id2RbvdOLeryC.invoke(queryContainer) : "query " + SEnumOperations.getMemberPresentation(SPropertyOperations.getEnum(queryContainer, PROPS.type$7YBQ))));
          return "query of " + containerDisplayName;
        }
      }
    }

  }
  private Iterable<SNode> _additional_provideQueriesFor(SNode node, final SNode target) {
    SNode boundedContext = IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(node);
    final SNode allowedDto = SLinkOperations.getTarget(SLinkOperations.getTarget(QueryMethods__BehaviorDescriptor.dtoRepository_id5A5sGroI1gZ.invoke(node), LINKS.dtoReference$pHOR), LINKS.dto$DOQ$);

    Iterable<SNode> queries = BoundedContext__BehaviorDescriptor.queries_id3VGLvhEjcqo.invoke(boundedContext);
    final Iterable<SNode> referencedQueries = BoundedContext__BehaviorDescriptor.findReferencedQueriesInDtoRepositories_id3VGLvhF3LIJ.invoke(boundedContext);

    return Sequence.fromIterable(queries).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode query) {
        return query == SLinkOperations.getTarget(target, LINKS.query$ROy$) || (!(Sequence.fromIterable(referencedQueries).contains(query)) && (boolean) Query__BehaviorDescriptor.areOnlyValidDtoReferencesUsed_id3aCsR_csrN7.invoke(query, allowedDto));
      }
    });
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept QueryReference$zj = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2447L, "CQRS.structure.QueryReference");
    /*package*/ static final SConcept QueryMethods$oC = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867afde0b7L, "CQRS.structure.QueryMethods");
  }

  private static final class PROPS {
    /*package*/ static final SProperty type$7YBQ = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3a4bff7934079ff4L, 0x1f11be867ad316efL, "type");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink dtoReference$pHOR = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867ab796ffL, 0x1f11be867ad98c0bL, "dtoReference");
    /*package*/ static final SReferenceLink dto$DOQ$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f906L, 0x4f0a0db9ac16f907L, "dto");
    /*package*/ static final SReferenceLink query$ROy$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2447L, 0x73da5086440e2448L, "query");
  }
}
