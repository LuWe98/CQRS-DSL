package CQRS.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.substitute.SubstituteMenuBase;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.menus.substitute.ConstraintsFilteringSubstituteMenuPartDecorator;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.editor.menus.ParameterizedMenuPart;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.lang.editor.menus.substitute.SingleItemSubstituteMenuPart;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.EditorMenuTraceInfo;
import CQRS.behavior.BoundedContext__BehaviorDescriptor;
import CQRS.behavior.IElementOfBoundedContext__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.editor.runtime.completion.CompletionItemInformation;
import jetbrains.mps.smodel.runtime.IconResource;
import jetbrains.mps.smodel.runtime.IconResourceUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import CQRS.behavior.QueryContainer__BehaviorDescriptor;
import CQRS.behavior.QueryContainerMethods__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import CQRS.behavior.Query__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class QueryContainerReference_SubstituteMenu extends SubstituteMenuBase {
  @NotNull
  @Override
  protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts(final SubstituteMenuContext _context) {
    List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> result = new ArrayList<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>();
    result.add(new ConstraintsFilteringSubstituteMenuPartDecorator(new SMP_Param_pjtcg3_a(), CONCEPTS.QueryContainerReference$De));
    return result;
  }

  @NotNull
  @Override
  public List<SubstituteMenuItem> createMenuItems(@NotNull SubstituteMenuContext context) {
    context.getEditorMenuTrace().pushTraceInfo();
    context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("default substitute menu for " + "QueryContainerReference", new SNodePointer("r:9b8b8719-a560-486b-9a35-0c285c344856(CQRS.editor)", "32060296167431499")));
    try {
      return super.createMenuItems(context);
    } finally {
      context.getEditorMenuTrace().popTraceInfo();
    }
  }


  private class SMP_Param_pjtcg3_a extends ParameterizedMenuPart<SNode, SubstituteMenuItem, SubstituteMenuContext> {
    @NotNull
    @Override
    protected List<SubstituteMenuItem> createItems(SNode parameter, SubstituteMenuContext context) {
      return new SMP_Action_pjtcg3_a0(parameter).createItems(context);
    }
    @NotNull
    @Override
    public List<SubstituteMenuItem> createItems(@NotNull SubstituteMenuContext context) {
      context.getEditorMenuTrace().pushTraceInfo();
      context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("parameterized substitute menu part", new SNodePointer("r:9b8b8719-a560-486b-9a35-0c285c344856(CQRS.editor)", "32060296167952681")));
      try {
        return super.createItems(context);
      } finally {
        context.getEditorMenuTrace().popTraceInfo();
      }
    }
    @Nullable
    @Override
    protected Iterable<? extends SNode> getParameters(SubstituteMenuContext _context) {
      {
        final SNode node = _context.getParentNode();
        if (SNodeOperations.isInstanceOf(node, CONCEPTS.QueryContainerMethods$BL)) {
          return QueryContainerReference_SubstituteMenu.this._additional_provideQueryContainersFor(node, _context.getCurrentTargetNode());
        }
      }

      return Sequence.fromIterable(Collections.emptyList());
    }
    private class SMP_Action_pjtcg3_a0 extends SingleItemSubstituteMenuPart {
      private final SNode myParameterObject;
      public SMP_Action_pjtcg3_a0(SNode parameterObject) {
        myParameterObject = parameterObject;
      }

      @Nullable
      @Override
      protected SubstituteMenuItem createItem(SubstituteMenuContext _context) {
        Item item = new Item(_context);
        String description;
        try {
          description = "Substitute item: " + item.getMatchingText("");
          description += ". Parameter object: " + myParameterObject;
        } catch (Throwable t) {
          Logger.getLogger(getClass()).error("Exception while executing getMatchingText() of the item " + item, t);
          return null;
        }

        _context.getEditorMenuTrace().pushTraceInfo();
        try {
          _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase(description, new SNodePointer("r:9b8b8719-a560-486b-9a35-0c285c344856(CQRS.editor)", "32060296167952907")));
          item.setTraceInfo(_context.getEditorMenuTrace().getTraceInfo());
        } finally {
          _context.getEditorMenuTrace().popTraceInfo();
        }

        return item;
      }
      private class Item extends DefaultSubstituteMenuItem {
        private final SubstituteMenuContext _context;
        private EditorMenuTraceInfo myTraceInfo;
        public Item(SubstituteMenuContext context) {
          super(CONCEPTS.QueryContainerReference$De, context);
          _context = context;
        }

        private void setTraceInfo(EditorMenuTraceInfo traceInfo) {
          myTraceInfo = traceInfo;
        }

        @Nullable
        @Override
        public SNode createNode(@NotNull String pattern) {
          BoundedContext__BehaviorDescriptor.removeReferencedQueriesOf_id3VGLvhFaU4h.invoke(IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(myParameterObject), myParameterObject);

          SNode reference = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c8cL, "CQRS.structure.QueryContainerReference"));
          SLinkOperations.setTarget(reference, LINKS.queryContainer$onw4, myParameterObject);
          return reference;
        }

        @Override
        public EditorMenuTraceInfo getTraceInfo() {
          return myTraceInfo;
        }
        @NotNull
        protected CompletionItemInformation createInformation(String pattern) {
          return new CompletionItemInformation(myParameterObject, CONCEPTS.QueryContainerReference$De, getMatchingText(pattern), getDescriptionText(pattern));
        }
        @Nullable
        @Override
        public IconResource getIcon(@NotNull String pattern) {
          if (myParameterObject instanceof SNode) {
            return IconResourceUtil.getIconResourceForNode(((SNode) myParameterObject));
          }
          return null;
        }
        @Nullable
        @Override
        public String getDescriptionText(@NotNull String pattern) {
          return "query " + SEnumOperations.getMemberPresentation(SPropertyOperations.getEnum(myParameterObject, PROPS.type$7YBQ));
        }
        @Nullable
        @Override
        public String getMatchingText(@NotNull String pattern) {
          return (String) QueryContainer__BehaviorDescriptor.getQueryContainerName_id2RbvdOKU0GT.invoke(myParameterObject);
        }
      }
    }

  }
  private Iterable<SNode> _additional_provideQueryContainersFor(SNode node, final SNode currentTargetNode) {
    SNode boundedContext = IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(node);
    final SNode allowedDto = SLinkOperations.getTarget(SLinkOperations.getTarget(QueryContainerMethods__BehaviorDescriptor.dtoRepository_id5A5sGroHXVV.invoke(node), LINKS.dtoReference$pHOR), LINKS.dto$DOQ$);

    Iterable<SNode> queryContainers = BoundedContext__BehaviorDescriptor.queryContainers_id3DbZR$O3FhA.invoke(boundedContext);
    final Iterable<SNode> referencedContainers = BoundedContext__BehaviorDescriptor.findReferencedQueryContainersInDtoRepositories_id5A5sGroEGrB.invoke(boundedContext);

    return Sequence.fromIterable(queryContainers).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode queryContainer) {
        return queryContainer == SLinkOperations.getTarget(currentTargetNode, LINKS.queryContainer$onw4) || (!(Sequence.fromIterable(referencedContainers).contains(queryContainer)) && Sequence.fromIterable(QueryContainer__BehaviorDescriptor.queries_id5SyewCaMpun.invoke(queryContainer)).all(new IWhereFilter<SNode>() {
          public boolean accept(SNode query) {
            return (boolean) Query__BehaviorDescriptor.areOnlyValidDtoReferencesUsed_id3aCsR_csrN7.invoke(query, allowedDto);
          }
        }));
      }
    });
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept QueryContainerReference$De = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c8cL, "CQRS.structure.QueryContainerReference");
    /*package*/ static final SConcept QueryContainerMethods$BL = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c89L, "CQRS.structure.QueryContainerMethods");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink queryContainer$onw4 = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x642187fedcaf0c8cL, 0x642187fedcaf0c8dL, "queryContainer");
    /*package*/ static final SContainmentLink dtoReference$pHOR = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867ab796ffL, 0x1f11be867ad98c0bL, "dtoReference");
    /*package*/ static final SReferenceLink dto$DOQ$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f906L, 0x4f0a0db9ac16f907L, "dto");
  }

  private static final class PROPS {
    /*package*/ static final SProperty type$7YBQ = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3a4bff7934079ff4L, 0x1f11be867ad316efL, "type");
  }
}
