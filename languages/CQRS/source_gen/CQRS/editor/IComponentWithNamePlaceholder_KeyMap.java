package CQRS.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.KeyMapImpl;
import jetbrains.mps.openapi.editor.cells.KeyMapAction;
import jetbrains.mps.editor.runtime.cells.KeyMapActionImpl;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import CQRS.behavior.IComponentWithNamePlaceholder__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class IComponentWithNamePlaceholder_KeyMap extends KeyMapImpl {
  public IComponentWithNamePlaceholder_KeyMap() {
    this.setApplicableToEveryModel(false);
    KeyMapAction action;
    action = new IComponentWithNamePlaceholder_KeyMap_Action0();
    this.putAction("none", "a", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action1();
    this.putAction("shift", "A", action);
    this.putAction("none", "A", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action2();
    this.putAction("none", "b", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action3();
    this.putAction("shift", "B", action);
    this.putAction("none", "B", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action4();
    this.putAction("none", "c", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action5();
    this.putAction("shift", "C", action);
    this.putAction("none", "C", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action6();
    this.putAction("none", "d", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action7();
    this.putAction("shift", "D", action);
    this.putAction("none", "D", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action8();
    this.putAction("none", "e", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action9();
    this.putAction("shift", "E", action);
    this.putAction("none", "E", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action10();
    this.putAction("none", "f", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action11();
    this.putAction("shift", "F", action);
    this.putAction("none", "F", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action12();
    this.putAction("none", "g", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action13();
    this.putAction("shift", "G", action);
    this.putAction("none", "G", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action14();
    this.putAction("none", "h", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action15();
    this.putAction("shift", "H", action);
    this.putAction("none", "H", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action16();
    this.putAction("none", "i", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action17();
    this.putAction("shift", "I", action);
    this.putAction("none", "I", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action18();
    this.putAction("none", "j", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action19();
    this.putAction("shift", "J", action);
    this.putAction("none", "J", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action20();
    this.putAction("none", "k", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action21();
    this.putAction("shift", "K", action);
    this.putAction("none", "K", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action22();
    this.putAction("none", "l", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action23();
    this.putAction("shift", "L", action);
    this.putAction("none", "L", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action24();
    this.putAction("none", "m", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action25();
    this.putAction("shift", "M", action);
    this.putAction("none", "M", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action26();
    this.putAction("none", "n", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action27();
    this.putAction("shift", "N", action);
    this.putAction("none", "N", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action28();
    this.putAction("none", "o", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action29();
    this.putAction("shift", "O", action);
    this.putAction("none", "O", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action30();
    this.putAction("none", "p", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action31();
    this.putAction("shift", "P", action);
    this.putAction("none", "P", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action32();
    this.putAction("none", "q", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action33();
    this.putAction("shift", "Q", action);
    this.putAction("none", "Q", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action34();
    this.putAction("none", "r", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action35();
    this.putAction("shift", "R", action);
    this.putAction("none", "R", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action36();
    this.putAction("none", "s", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action37();
    this.putAction("shift", "S", action);
    this.putAction("none", "S", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action38();
    this.putAction("none", "t", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action39();
    this.putAction("shift", "T", action);
    this.putAction("none", "T", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action40();
    this.putAction("none", "u", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action41();
    this.putAction("shift", "U", action);
    this.putAction("none", "U", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action42();
    this.putAction("none", "v", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action43();
    this.putAction("shift", "V", action);
    this.putAction("none", "V", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action44();
    this.putAction("none", "w", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action45();
    this.putAction("shift", "W", action);
    this.putAction("none", "W", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action46();
    this.putAction("none", "x", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action47();
    this.putAction("shift", "X", action);
    this.putAction("none", "X", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action48();
    this.putAction("none", "y", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action49();
    this.putAction("shift", "Y", action);
    this.putAction("none", "Y", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action50();
    this.putAction("none", "z", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action51();
    this.putAction("shift", "Z", action);
    this.putAction("none", "Z", action);
    action = new IComponentWithNamePlaceholder_KeyMap_Action52();
    this.putAction("shift", "_", action);
    this.putAction("none", "_", action);
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action0 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action0() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'a'), editorContext);
    }
    public String getKeyStroke() {
      return "none a";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action1 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action1() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'A'), editorContext);
    }
    public String getKeyStroke() {
      return "shift A";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action2 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action2() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'b'), editorContext);
    }
    public String getKeyStroke() {
      return "none b";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action3 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action3() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'B'), editorContext);
    }
    public String getKeyStroke() {
      return "shift B";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action4 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action4() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'c'), editorContext);
    }
    public String getKeyStroke() {
      return "none c";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action5 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action5() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'C'), editorContext);
    }
    public String getKeyStroke() {
      return "shift C";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action6 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action6() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'd'), editorContext);
    }
    public String getKeyStroke() {
      return "none d";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action7 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action7() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'D'), editorContext);
    }
    public String getKeyStroke() {
      return "shift D";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action8 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action8() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'e'), editorContext);
    }
    public String getKeyStroke() {
      return "none e";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action9 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action9() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'E'), editorContext);
    }
    public String getKeyStroke() {
      return "shift E";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action10 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action10() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'f'), editorContext);
    }
    public String getKeyStroke() {
      return "none f";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action11 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action11() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'F'), editorContext);
    }
    public String getKeyStroke() {
      return "shift F";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action12 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action12() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'g'), editorContext);
    }
    public String getKeyStroke() {
      return "none g";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action13 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action13() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'G'), editorContext);
    }
    public String getKeyStroke() {
      return "shift G";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action14 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action14() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'h'), editorContext);
    }
    public String getKeyStroke() {
      return "none h";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action15 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action15() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'H'), editorContext);
    }
    public String getKeyStroke() {
      return "shift H";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action16 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action16() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'i'), editorContext);
    }
    public String getKeyStroke() {
      return "none i";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action17 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action17() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'I'), editorContext);
    }
    public String getKeyStroke() {
      return "shift I";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action18 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action18() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'j'), editorContext);
    }
    public String getKeyStroke() {
      return "none j";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action19 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action19() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'J'), editorContext);
    }
    public String getKeyStroke() {
      return "shift J";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action20 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action20() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'k'), editorContext);
    }
    public String getKeyStroke() {
      return "none k";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action21 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action21() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'K'), editorContext);
    }
    public String getKeyStroke() {
      return "shift K";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action22 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action22() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'l'), editorContext);
    }
    public String getKeyStroke() {
      return "none l";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action23 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action23() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'L'), editorContext);
    }
    public String getKeyStroke() {
      return "shift L";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action24 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action24() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'm'), editorContext);
    }
    public String getKeyStroke() {
      return "none m";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action25 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action25() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'M'), editorContext);
    }
    public String getKeyStroke() {
      return "shift M";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action26 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action26() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'n'), editorContext);
    }
    public String getKeyStroke() {
      return "none n";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action27 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action27() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'N'), editorContext);
    }
    public String getKeyStroke() {
      return "shift N";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action28 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action28() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'o'), editorContext);
    }
    public String getKeyStroke() {
      return "none o";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action29 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action29() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'O'), editorContext);
    }
    public String getKeyStroke() {
      return "shift O";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action30 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action30() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'p'), editorContext);
    }
    public String getKeyStroke() {
      return "none p";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action31 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action31() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'P'), editorContext);
    }
    public String getKeyStroke() {
      return "shift P";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action32 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action32() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'q'), editorContext);
    }
    public String getKeyStroke() {
      return "none q";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action33 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action33() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'Q'), editorContext);
    }
    public String getKeyStroke() {
      return "shift Q";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action34 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action34() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'r'), editorContext);
    }
    public String getKeyStroke() {
      return "none r";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action35 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action35() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'R'), editorContext);
    }
    public String getKeyStroke() {
      return "shift R";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action36 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action36() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 's'), editorContext);
    }
    public String getKeyStroke() {
      return "none s";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action37 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action37() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'S'), editorContext);
    }
    public String getKeyStroke() {
      return "shift S";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action38 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action38() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 't'), editorContext);
    }
    public String getKeyStroke() {
      return "none t";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action39 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action39() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'T'), editorContext);
    }
    public String getKeyStroke() {
      return "shift T";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action40 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action40() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'u'), editorContext);
    }
    public String getKeyStroke() {
      return "none u";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action41 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action41() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'U'), editorContext);
    }
    public String getKeyStroke() {
      return "shift U";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action42 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action42() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'v'), editorContext);
    }
    public String getKeyStroke() {
      return "none v";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action43 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action43() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'V'), editorContext);
    }
    public String getKeyStroke() {
      return "shift V";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action44 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action44() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'w'), editorContext);
    }
    public String getKeyStroke() {
      return "none w";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action45 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action45() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'W'), editorContext);
    }
    public String getKeyStroke() {
      return "shift W";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action46 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action46() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'x'), editorContext);
    }
    public String getKeyStroke() {
      return "none x";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action47 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action47() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'X'), editorContext);
    }
    public String getKeyStroke() {
      return "shift X";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action48 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action48() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'y'), editorContext);
    }
    public String getKeyStroke() {
      return "none y";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action49 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action49() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'Y'), editorContext);
    }
    public String getKeyStroke() {
      return "shift Y";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action50 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action50() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'z'), editorContext);
    }
    public String getKeyStroke() {
      return "none z";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action51 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action51() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) 'Z'), editorContext);
    }
    public String getKeyStroke() {
      return "shift Z";
    }
  }
  public static class IComponentWithNamePlaceholder_KeyMap_Action52 extends KeyMapActionImpl {
    public IComponentWithNamePlaceholder_KeyMap_Action52() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, CONCEPTS.IComponentWithNamePlaceholder$bn))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      IComponentWithNamePlaceholder__BehaviorDescriptor.onValidLetterTypedOnPlaceholder_id1LTEHA7rg6.invoke(node, ((char) '_'), editorContext);
    }
    public String getKeyStroke() {
      return "shift _";
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IComponentWithNamePlaceholder$bn = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x71e6ab661db3f2L, "CQRS.structure.IComponentWithNamePlaceholder");
  }
}
