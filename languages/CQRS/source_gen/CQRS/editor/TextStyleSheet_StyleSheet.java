package CQRS.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.style.AbstractStyleClass;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.editor.runtime.descriptor.EditorBuilderEnvironment;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.util.Pair;
import java.awt.Color;
import CQRS.helper.KeywordColorUtils;
import jetbrains.mps.nodeEditor.MPSColors;

public class TextStyleSheet_StyleSheet {
  public static class KeywordStyleStyleClass extends AbstractStyleClass {
    public KeywordStyleStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public KeywordStyleStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, (!(getStyleRegistry().isDarkTheme()) ? _StyleParameter_QueryFunction_rq5mlp_a0a().o1 : _StyleParameter_QueryFunction_rq5mlp_a0a().o2));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    }

    private Pair<Color, Color> _StyleParameter_QueryFunction_rq5mlp_a0a() {
      return KeywordColorUtils.getKeywordColors();
    }
  }
  public static class OptionalKeywordStyleStyleClass extends AbstractStyleClass {
    public OptionalKeywordStyleStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public OptionalKeywordStyleStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, (!(getStyleRegistry().isDarkTheme()) ? _StyleParameter_QueryFunction_rq5mlp_a0b().o1 : _StyleParameter_QueryFunction_rq5mlp_a0b().o2));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    }

    private Pair<Color, Color> _StyleParameter_QueryFunction_rq5mlp_a0b() {
      return KeywordColorUtils.getOptionalKeywordColors();
    }
  }
  public static class GenericTypeStyleStyleClass extends AbstractStyleClass {
    public GenericTypeStyleStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public GenericTypeStyleStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, (!(getStyleRegistry().isDarkTheme()) ? _StyleParameter_QueryFunction_rq5mlp_a0c().o1 : _StyleParameter_QueryFunction_rq5mlp_a0c().o2));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    }

    private Pair<Color, Color> _StyleParameter_QueryFunction_rq5mlp_a0c() {
      return KeywordColorUtils.getGenericTypeColors();
    }
  }
  public static class PrimitiveDataTypeKeywordStyleStyleClass extends AbstractStyleClass {
    public PrimitiveDataTypeKeywordStyleStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public PrimitiveDataTypeKeywordStyleStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, (!(getStyleRegistry().isDarkTheme()) ? _StyleParameter_QueryFunction_rq5mlp_a0d().o1 : _StyleParameter_QueryFunction_rq5mlp_a0d().o2));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    }

    private Pair<Color, Color> _StyleParameter_QueryFunction_rq5mlp_a0d() {
      return KeywordColorUtils.getPrimitiveTypeColors();
    }
  }
  public static class CollectionDataTypeKeywordStyleStyleClass extends AbstractStyleClass {
    public CollectionDataTypeKeywordStyleStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public CollectionDataTypeKeywordStyleStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, (!(getStyleRegistry().isDarkTheme()) ? _StyleParameter_QueryFunction_rq5mlp_a0e().o1 : _StyleParameter_QueryFunction_rq5mlp_a0e().o2));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    }

    private Pair<Color, Color> _StyleParameter_QueryFunction_rq5mlp_a0e() {
      return KeywordColorUtils.getCollectionTypeColors();
    }
  }
  public static class BoundedContextKeywordStyleStyleClass extends AbstractStyleClass {
    public BoundedContextKeywordStyleStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public BoundedContextKeywordStyleStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, (!(getStyleRegistry().isDarkTheme()) ? _StyleParameter_QueryFunction_rq5mlp_a0f().o1 : _StyleParameter_QueryFunction_rq5mlp_a0f().o2));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    }

    private Pair<Color, Color> _StyleParameter_QueryFunction_rq5mlp_a0f() {
      return KeywordColorUtils.getBoundedContextColors();
    }
  }
  public static class ConnectingComponentKeywordStyleStyleClass extends AbstractStyleClass {
    public ConnectingComponentKeywordStyleStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public ConnectingComponentKeywordStyleStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, (!(getStyleRegistry().isDarkTheme()) ? _StyleParameter_QueryFunction_rq5mlp_a0g().o1 : _StyleParameter_QueryFunction_rq5mlp_a0g().o2));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    }

    private Pair<Color, Color> _StyleParameter_QueryFunction_rq5mlp_a0g() {
      return KeywordColorUtils.getConnectingComponentColors();
    }
  }
  public static class CommandComponentKeywordStyleStyleClass extends AbstractStyleClass {
    public CommandComponentKeywordStyleStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public CommandComponentKeywordStyleStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, (!(getStyleRegistry().isDarkTheme()) ? _StyleParameter_QueryFunction_rq5mlp_a0h().o1 : _StyleParameter_QueryFunction_rq5mlp_a0h().o2));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    }

    private Pair<Color, Color> _StyleParameter_QueryFunction_rq5mlp_a0h() {
      return KeywordColorUtils.getCommandComponentColors();
    }
  }
  public static class QueryComponentKeywordStyleStyleClass extends AbstractStyleClass {
    public QueryComponentKeywordStyleStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public QueryComponentKeywordStyleStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, (!(getStyleRegistry().isDarkTheme()) ? _StyleParameter_QueryFunction_rq5mlp_a0i().o1 : _StyleParameter_QueryFunction_rq5mlp_a0i().o2));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    }

    private Pair<Color, Color> _StyleParameter_QueryFunction_rq5mlp_a0i() {
      return KeywordColorUtils.getQueryComponentColors();
    }
  }
  public static class PlaceholderTextStyleStyleClass extends AbstractStyleClass {
    public PlaceholderTextStyleStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public PlaceholderTextStyleStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.gray));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.ITALIC);
    }

  }
  public static class DescriptionTextStyleStyleClass extends AbstractStyleClass {
    public DescriptionTextStyleStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public DescriptionTextStyleStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.ITALIC);
      style.set(StyleAttributes.FONT_SIZE, 10);
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.gray));
    }

  }
}
