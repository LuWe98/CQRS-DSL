package CQRS.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseConstraintsAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class ConstraintsAspectDescriptor extends BaseConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }

  @Override
  public ConstraintsDescriptor getConstraints(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return new AggregateRoot_Constraints();
      case 1:
        return new AggregateRootReference_Constraints();
      case 2:
        return new AggregateRootRepository_Constraints();
      case 3:
        return new Command_Constraints();
      case 4:
        return new CommandContainer_Constraints();
      case 5:
        return new Dto_Constraints();
      case 6:
        return new DtoFlatteningRule_Constraints();
      case 7:
        return new DtoReference_Constraints();
      case 8:
        return new Entity_Constraints();
      case 9:
        return new EntityReference_Constraints();
      case 10:
        return new Event_Constraints();
      case 11:
        return new EventContainer_Constraints();
      case 12:
        return new IAggregateRootComponent_Constraints();
      case 13:
        return new IAggregateRootRepositoryComponent_Constraints();
      case 14:
        return new IBoundedContextComponent_Constraints();
      case 15:
        return new ICommandContainerComponent_Constraints();
      case 16:
        return new ICommandGenerationSettingsComponent_Constraints();
      case 17:
        return new IDataType_Constraints();
      case 18:
        return new IDtoComponent_Constraints();
      case 19:
        return new IDtoDataTypeRuleContainerComponent_Constraints();
      case 20:
        return new IDtoFlatteningRuleContainerComponent_Constraints();
      case 21:
        return new IDtoRepositoryComponent_Constraints();
      case 22:
        return new IEntityComponent_Constraints();
      case 23:
        return new IEventContainerComponent_Constraints();
      case 24:
        return new IEventGenerationSettingsComponent_Constraints();
      case 25:
        return new IGeneratorSettingsComponent_Constraints();
      case 26:
        return new IOptionalValidIdentifier_Constraints();
      case 27:
        return new IQueryContainerComponent_Constraints();
      case 28:
        return new IQueryGenerationSettingsComponent_Constraints();
      case 29:
        return new IValueObjectComponent_Constraints();
      case 30:
        return new IVariable_Constraints();
      case 31:
        return new ImportedType_Constraints();
      case 32:
        return new Parameter_Constraints();
      case 33:
        return new Property_Constraints();
      case 34:
        return new Query_Constraints();
      case 35:
        return new QueryContainer_Constraints();
      case 36:
        return new QueryGenerationSettings_Constraints();
      case 37:
        return new ValueObject_Constraints();
      case 38:
        return new ValueObjectReference_Constraints();
      default:
    }
    return new BaseConstraintsDescriptor(concept);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c99L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e243eL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2a075c454595567L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f903L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f985L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f906L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8fdL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f900L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2438L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da50864411af9fL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2a075c45497102dL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x75be8047bc84329eL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6375c6ceebab8368L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x75be8047bc81a103L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122ac59249L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c9dL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb964347c709cL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0xa84dfea89294288L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0xa84dfea89294285L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867ad9aec4L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ef0772L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x75be8047bc19d633L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122a7b6f09L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e2ee2937L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb96432e18f7fL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3a4bff7934079ff7L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122ac59248L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb96433094734L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910fb0ed95eL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ca7d84L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643ec6f33L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2444L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3a4bff7934079ff4L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6165532e2ee2941L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f7L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8faL)).seal();
}
