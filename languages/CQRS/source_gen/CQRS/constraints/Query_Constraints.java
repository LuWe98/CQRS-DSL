package CQRS.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_DefaultScopeProvider;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.scope.EmptyScope;
import CQRS.behavior.IElementOfBoundedContext__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CQRS.behavior.QueryMethods__BehaviorDescriptor;
import CQRS.behavior.BoundedContext__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import CQRS.behavior.Query__BehaviorDescriptor;
import jetbrains.mps.scope.ListScope;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class Query_Constraints extends BaseConstraintsDescriptor {
  public Query_Constraints() {
    super(CONCEPTS.Query$nF);
  }

  @Override
  public ConstraintFunction<ConstraintContext_DefaultScopeProvider, ReferenceScopeProvider> calculateDefaultScopeConstraint() {
    return new ConstraintFunction<ConstraintContext_DefaultScopeProvider, ReferenceScopeProvider>() {
      @Nullable
      public ReferenceScopeProvider invoke(@NotNull ConstraintContext_DefaultScopeProvider context, @Nullable CheckingNodeContext checkingNodeContext) {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return new SNodePointer("r:0d7993a3-d2b8-4ac6-8b11-a4cb9134a9ef(CQRS.constraints)", "8914850872824045921");
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            SNode queryMethods = SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.QueryMethods$oC, true, false);

            if ((queryMethods != null)) {
              return Query_Constraints.this._additional_provideQueryMethodsScope(queryMethods, _context.getContextNode());
            }

            return new EmptyScope();
          }
        };
      }
    };
  }
  private Scope _additional_provideQueryMethodsScope(SNode node, final SNode contextNode) {
    SNode boundedContext = IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(node);
    final SNode allowedDto = SLinkOperations.getTarget(SLinkOperations.getTarget(QueryMethods__BehaviorDescriptor.dtoRepository_id5A5sGroI1gZ.invoke(node), LINKS.dtoReference$pHOR), LINKS.dto$DOQ$);
    Iterable<SNode> queries = BoundedContext__BehaviorDescriptor.queries_id3VGLvhEjcqo.invoke(boundedContext);
    final Iterable<SNode> referencedQueries = BoundedContext__BehaviorDescriptor.findReferencedQueriesInDtoRepositories_id3VGLvhF3LIJ.invoke(boundedContext);

    Iterable<SNode> result = Sequence.fromIterable(queries).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode query) {
        return query == SLinkOperations.getTarget(SNodeOperations.as(contextNode, CONCEPTS.QueryReference$zj), LINKS.query$ROy$) || (!(Sequence.fromIterable(referencedQueries).contains(query)) && (boolean) Query__BehaviorDescriptor.areOnlyValidDtoReferencesUsed_id3aCsR_csrN7.invoke(query, allowedDto));
      }
    });

    return ListScope.forNamedElements(result);
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Query$nF = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2444L, "CQRS.structure.Query");
    /*package*/ static final SConcept QueryMethods$oC = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867afde0b7L, "CQRS.structure.QueryMethods");
    /*package*/ static final SConcept QueryReference$zj = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2447L, "CQRS.structure.QueryReference");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink dtoReference$pHOR = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x1f11be867ab796ffL, 0x1f11be867ad98c0bL, "dtoReference");
    /*package*/ static final SReferenceLink dto$DOQ$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f906L, 0x4f0a0db9ac16f907L, "dto");
    /*package*/ static final SReferenceLink query$ROy$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2447L, 0x73da5086440e2448L, "query");
  }
}
