package CQRS.util;

/*Generated by MPS */

import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.model.SNode;
import CQRS.behavior.ImportStatement__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Objects;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.baseLanguage.behavior.Type__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class ReservedTypeCheckerUtils {

  public static final Map<SAbstractConcept, Set<String>> reservedTypesMap = initTypesMap();

  private static Map<SAbstractConcept, Set<String>> initTypesMap() {
    Map<SAbstractConcept, Set<String>> map = MapSequence.fromMap(new HashMap<SAbstractConcept, Set<String>>());

    MapSequence.fromMap(map).put(CONCEPTS.StringType$6$, CollectionUtils.setOf("kotlin.String", "java.lang.String"));
    MapSequence.fromMap(map).put(CONCEPTS.BooleanType$cF, CollectionUtils.setOf("kotlin.Boolean", "java.lang.Boolean"));
    MapSequence.fromMap(map).put(CONCEPTS.CharType$f_, CollectionUtils.setOf("kotlin.Char", "java.lang.Character", "java.lang.Char"));
    MapSequence.fromMap(map).put(CONCEPTS.DoubleType$Y9, CollectionUtils.setOf("kotlin.Double", "java.lang.Double"));
    MapSequence.fromMap(map).put(CONCEPTS.FloatType$WG, CollectionUtils.setOf("kotlin.Float", "java.lang.Float"));
    MapSequence.fromMap(map).put(CONCEPTS.IntegerType$57, CollectionUtils.setOf("kotlin.Int", "java.lang.Integer"));
    MapSequence.fromMap(map).put(CONCEPTS.LongType$ZA, CollectionUtils.setOf("kotlin.Long", "java.lang.Long"));
    MapSequence.fromMap(map).put(CONCEPTS.ShortType$5, CollectionUtils.setOf("kotlin.Short", "java.lang.Short"));
    MapSequence.fromMap(map).put(CONCEPTS.ArrayType$ZB, CollectionUtils.setOf("kotlin.Array"));
    MapSequence.fromMap(map).put(CONCEPTS.ListType$Tr, CollectionUtils.setOf("kotlin.collections.List", "java.util.List"));
    MapSequence.fromMap(map).put(CONCEPTS.SetType$E2, CollectionUtils.setOf("kotlin.collections.Set", "java.util.Set"));
    MapSequence.fromMap(map).put(CONCEPTS.MapType$JX, CollectionUtils.setOf("kotlin.collections.Map", "java.util.Map"));

    return map;
  }

  public static boolean isImportTypeCoveredByTypesystem(SNode importType) {
    return isCoveredByTypesystem(ImportStatement__BehaviorDescriptor.qualifiedName_id3DbZR$OfNHM.invoke(importType));
  }

  public static boolean isJavaTypeCoveredByTypesystem(SNode javaType) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(javaType, LINKS.actualType$WqWC), CONCEPTS.ArrayType$rh) || JavaTypeCheckUtils.isTypePrimitiveType(SLinkOperations.getTarget(javaType, LINKS.actualType$WqWC)) || isCoveredByTypesystem(JavaTypeQualifiedNameUtils.getQualifiedNameOfType(SLinkOperations.getTarget(javaType, LINKS.actualType$WqWC)));
  }

  public static boolean isCoveredByTypesystem(final String qualifiedName) {
    if (Objects.equals(qualifiedName, null)) {
      return false;
    }
    return MapSequence.fromMap(reservedTypesMap).any(new IWhereFilter<IMapping<SAbstractConcept, Set<String>>>() {
      public boolean accept(IMapping<SAbstractConcept, Set<String>> it) {
        return SetSequence.fromSet(it.value()).contains(qualifiedName);
      }
    });
  }


  public static SAbstractConcept findTypesystemTypeWithImportReferenceType(SNode importReferenceType) {
    return findTypesystemTypeWithImportType(SLinkOperations.getTarget(importReferenceType, LINKS.importStatement$D_66));
  }

  public static SAbstractConcept findTypesystemTypeWithImportType(SNode importType) {
    return findTypesystemTypeWith(ImportStatement__BehaviorDescriptor.qualifiedName_id3DbZR$OfNHM.invoke(importType));
  }



  public static SAbstractConcept findTypesystemTypeOfJavaType(SNode javaType) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(javaType, LINKS.actualType$WqWC), CONCEPTS.ArrayType$rh)) {
      return CONCEPTS.ArrayType$ZB;
    }

    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(javaType, LINKS.actualType$WqWC), CONCEPTS.StringType$uX)) {
      return CONCEPTS.StringType$6$;
    }

    {
      final SNode primitiveType = SLinkOperations.getTarget(javaType, LINKS.actualType$WqWC);
      if (SNodeOperations.isInstanceOf(primitiveType, CONCEPTS.PrimitiveType$sR)) {
        return findTypesystemTypeWith(JavaTypeQualifiedNameUtils.getQualifiedNametOfPrimitve(primitiveType));
      }
    }

    return findTypesystemTypeWith(JavaTypeQualifiedNameUtils.getQualifiedNameOfJniString(Type__BehaviorDescriptor.jniSignature_id7F81Cd2C7e3.invoke(SLinkOperations.getTarget(javaType, LINKS.actualType$WqWC))));
  }

  public static SAbstractConcept findTypesystemTypeWith(final String qualifiedName) {
    if (Objects.equals(qualifiedName, null)) {
      return null;
    }
    IMapping<SAbstractConcept, Set<String>> foundDataType = MapSequence.fromMap(reservedTypesMap).findFirst(new IWhereFilter<IMapping<SAbstractConcept, Set<String>>>() {
      public boolean accept(IMapping<SAbstractConcept, Set<String>> it) {
        return SetSequence.fromSet(it.value()).contains(qualifiedName);
      }
    });
    return (Objects.equals(foundDataType, null) ? null : foundDataType.key());
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept StringType$6$ = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829ca5L, "CQRS.structure.StringType");
    /*package*/ static final SConcept BooleanType$cF = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cb4L, "CQRS.structure.BooleanType");
    /*package*/ static final SConcept CharType$f_ = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cbaL, "CQRS.structure.CharType");
    /*package*/ static final SConcept DoubleType$Y9 = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cabL, "CQRS.structure.DoubleType");
    /*package*/ static final SConcept FloatType$WG = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829ca8L, "CQRS.structure.FloatType");
    /*package*/ static final SConcept IntegerType$57 = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829ca2L, "CQRS.structure.IntegerType");
    /*package*/ static final SConcept LongType$ZA = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829caeL, "CQRS.structure.LongType");
    /*package*/ static final SConcept ShortType$5 = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cafL, "CQRS.structure.ShortType");
    /*package*/ static final SConcept ArrayType$ZB = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6375c6ceeba0da5bL, "CQRS.structure.ArrayType");
    /*package*/ static final SConcept ListType$Tr = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e92986f7d9L, "CQRS.structure.ListType");
    /*package*/ static final SConcept SetType$E2 = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x783dbe7d5ebb3748L, "CQRS.structure.SetType");
    /*package*/ static final SConcept MapType$JX = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x783dbe7d5ebb3779L, "CQRS.structure.MapType");
    /*package*/ static final SConcept ArrayType$rh = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, "jetbrains.mps.baseLanguage.structure.ArrayType");
    /*package*/ static final SConcept StringType$uX = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47da71ecL, "jetbrains.mps.baseLanguage.structure.StringType");
    /*package*/ static final SConcept PrimitiveType$sR = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f0ad8bde4L, "jetbrains.mps.baseLanguage.structure.PrimitiveType");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink actualType$WqWC = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x53a29a8dae148659L, 0x53a29a8dae14865eL, "actualType");
    /*package*/ static final SReferenceLink importStatement$D_66 = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL, 0x4f0a0db9ac16f8f0L, "importStatement");
  }
}
