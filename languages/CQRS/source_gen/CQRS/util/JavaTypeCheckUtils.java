package CQRS.util;

/*Generated by MPS */

import java.util.Map;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.util.Objects;
import jetbrains.mps.baseLanguage.behavior.Type__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import CQRS.behavior.ImportedType__BehaviorDescriptor;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.List;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class JavaTypeCheckUtils {

  public static Map<String, SConcept> primitiveTypeMap = initiPrimitiveTypeMap();

  public static final String STRING_JNI = "Ljava/lang/String;";

  private static Map<String, SConcept> initiPrimitiveTypeMap() {
    Map<String, SConcept> map = MapSequence.fromMap(new HashMap<String, SConcept>());
    MapSequence.fromMap(map).put("Ljava/lang/Boolean;", CONCEPTS.BooleanType$_u);
    MapSequence.fromMap(map).put("Ljava/lang/Byte;", CONCEPTS.ByteType$Ms);
    MapSequence.fromMap(map).put("Ljava/lang/Char;", CONCEPTS.CharType$JQ);
    MapSequence.fromMap(map).put("Ljava/lang/Character;", CONCEPTS.CharType$JQ);
    MapSequence.fromMap(map).put("Ljava/lang/Float;", CONCEPTS.FloatType$up);
    MapSequence.fromMap(map).put("Ljava/lang/Double;", CONCEPTS.DoubleType$x0);
    MapSequence.fromMap(map).put("Ljava/lang/Short;", CONCEPTS.ShortType$ro);
    MapSequence.fromMap(map).put("Ljava/lang/Integer;", CONCEPTS.IntegerType$7a);
    MapSequence.fromMap(map).put("Ljava/lang/Long;", CONCEPTS.LongType$5X);
    return map;
  }


  public static boolean doesJavaTypeMatchDataType(SNode type, SNode otherDataType) {
    if ((type == null) || (otherDataType == null)) {
      return false;
    }

    {
      final SNode primitiveType = otherDataType;
      if (SNodeOperations.isInstanceOf(primitiveType, CONCEPTS.IPrimitiveType$3E)) {
        return doesJavaTypeMatchPrimitiveType(type, primitiveType);
      }
    }

    {
      final SNode collectionType = otherDataType;
      if (SNodeOperations.isInstanceOf(collectionType, CONCEPTS.ICollectionType$rd)) {
        return doesJavaTypeMatchCollectionType(type, collectionType);
      }
    }

    {
      final SNode mapType = otherDataType;
      if (SNodeOperations.isInstanceOf(mapType, CONCEPTS.MapType$JX)) {
        return doesJavaTypeMatchMapType(type, mapType);
      }
    }

    {
      final SNode importType = otherDataType;
      if (SNodeOperations.isInstanceOf(importType, CONCEPTS.ImportedType$3u)) {
        return doesJavaTypeMatchImportType(type, importType);
      }
    }

    {
      final SNode javaDataType = otherDataType;
      if (SNodeOperations.isInstanceOf(javaDataType, CONCEPTS.JavaDataType$MU)) {
        return doesJavaTypeMatchJavaType(type, SLinkOperations.getTarget(javaDataType, LINKS.actualType$WqWC));
      }
    }

    return false;
  }

  public static boolean doesJavaTypeMatchPrimitiveType(SNode type, SNode primitiveType) {
    SAbstractConcept cncpt = SNodeOperations.getConcept(primitiveType);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return SNodeOperations.isInstanceOf(type, CONCEPTS.BooleanType$_u) || SConceptOperations.isExactly(SNodeOperations.asSConcept(getPrimitiveConceptOf(type)), CONCEPTS.BooleanType$_u);
      case 1:
        return SNodeOperations.isInstanceOf(type, CONCEPTS.ByteType$Ms) || SConceptOperations.isExactly(SNodeOperations.asSConcept(getPrimitiveConceptOf(type)), CONCEPTS.ByteType$Ms);
      case 2:
        return SNodeOperations.isInstanceOf(type, CONCEPTS.CharType$JQ) || SConceptOperations.isExactly(SNodeOperations.asSConcept(getPrimitiveConceptOf(type)), CONCEPTS.CharType$JQ);
      case 3:
        return SNodeOperations.isInstanceOf(type, CONCEPTS.DoubleType$x0) || SConceptOperations.isExactly(SNodeOperations.asSConcept(getPrimitiveConceptOf(type)), CONCEPTS.DoubleType$x0);
      case 4:
        return SNodeOperations.isInstanceOf(type, CONCEPTS.FloatType$up) || SConceptOperations.isExactly(SNodeOperations.asSConcept(getPrimitiveConceptOf(type)), CONCEPTS.FloatType$up);
      case 5:
        return SNodeOperations.isInstanceOf(type, CONCEPTS.IntegerType$7a) || SConceptOperations.isExactly(SNodeOperations.asSConcept(getPrimitiveConceptOf(type)), CONCEPTS.IntegerType$7a);
      case 6:
        return SNodeOperations.isInstanceOf(type, CONCEPTS.LongType$5X) || SConceptOperations.isExactly(SNodeOperations.asSConcept(getPrimitiveConceptOf(type)), CONCEPTS.LongType$5X);
      case 7:
        return SNodeOperations.isInstanceOf(type, CONCEPTS.ShortType$ro) || SConceptOperations.isExactly(SNodeOperations.asSConcept(getPrimitiveConceptOf(type)), CONCEPTS.ShortType$ro);
      case 8:
        return SNodeOperations.isInstanceOf(type, CONCEPTS.StringType$uX) || Objects.equals(Type__BehaviorDescriptor.jniSignature_id7F81Cd2C7e3.invoke(type), STRING_JNI);
      default:
        return false;
    }
  }

  public static boolean doesJavaTypeMatchCollectionType(SNode type, SNode collectionType) {
    {
      final SNode arrayType = type;
      if (SNodeOperations.isInstanceOf(arrayType, CONCEPTS.ArrayType$rh)) {
        return SNodeOperations.isInstanceOf(collectionType, CONCEPTS.ArrayType$ZB) && doesJavaTypeMatchDataType(SLinkOperations.getTarget(arrayType, LINKS.componentType$F$Gi), SLinkOperations.getTarget(collectionType, LINKS.elementType$AnT5));
      }
    }

    {
      final SNode classifierType = type;
      if (SNodeOperations.isInstanceOf(classifierType, CONCEPTS.ClassifierType$bL)) {
        if (ListSequence.fromList(SLinkOperations.getChildren(classifierType, LINKS.parameter$oqG$)).count() != 1) {
          return false;
        }

        SAbstractConcept cncpt = SNodeOperations.getConcept(collectionType);
        switch (conceptIndex1.index(cncpt)) {
          case 0:
            return Objects.equals(Type__BehaviorDescriptor.jniSignature_id7F81Cd2C7e3.invoke(classifierType), "Ljava/util/List;") && doesJavaTypeMatchDataType(ListSequence.fromList(SLinkOperations.getChildren(classifierType, LINKS.parameter$oqG$)).first(), SLinkOperations.getTarget(collectionType, LINKS.elementType$AnT5));
          case 1:
            return Objects.equals(Type__BehaviorDescriptor.jniSignature_id7F81Cd2C7e3.invoke(classifierType), "Ljava/util/Set;") && doesJavaTypeMatchDataType(ListSequence.fromList(SLinkOperations.getChildren(classifierType, LINKS.parameter$oqG$)).first(), SLinkOperations.getTarget(collectionType, LINKS.elementType$AnT5));
          default:
        }
      }
    }

    return false;
  }

  public static boolean doesJavaTypeMatchMapType(SNode type, SNode mapType) {
    {
      final SNode classifierType = type;
      if (SNodeOperations.isInstanceOf(classifierType, CONCEPTS.ClassifierType$bL)) {
        if (Objects.equals(Type__BehaviorDescriptor.jniSignature_id7F81Cd2C7e3.invoke(classifierType), "Ljava/util/Map;") && ListSequence.fromList(SLinkOperations.getChildren(classifierType, LINKS.parameter$oqG$)).count() == 2) {
          return doesJavaTypeMatchDataType(ListSequence.fromList(SLinkOperations.getChildren(classifierType, LINKS.parameter$oqG$)).getElement(0), SLinkOperations.getTarget(mapType, LINKS.keyType$mrlA)) && doesJavaTypeMatchDataType(ListSequence.fromList(SLinkOperations.getChildren(classifierType, LINKS.parameter$oqG$)).getElement(1), SLinkOperations.getTarget(mapType, LINKS.valueType$mrNC));
        }
      }
    }
    return false;
  }

  public static boolean doesJavaTypeMatchImportType(SNode type, SNode importType) {
    if (!(Objects.equals(JavaTypeQualifiedNameUtils.getQualifiedNameOfType(type), ImportedType__BehaviorDescriptor.qualifiedName_idSXYyTWcNId.invoke(importType))) || !((boolean) ImportedType__BehaviorDescriptor.isTypeCountCorrect_idSXYyTVHx5I.invoke(importType))) {
      return false;
    }

    // TODO Hier potentiell noch einbauen, dass es schon das gleiche ist, wenn einfach nur der qualified Name übereinstimmt
    // Sonst könnte es zu Fehlern führen
    {
      final SNode classifierType = type;
      if (SNodeOperations.isInstanceOf(classifierType, CONCEPTS.ClassifierType$bL)) {
        if (ListSequence.fromList(SLinkOperations.getChildren(classifierType, LINKS.parameter$oqG$)).count() == (int) ImportedType__BehaviorDescriptor.typeCount_idSXYyTVHlmk.invoke(importType)) {
          Iterable<Boolean> results = CollectionUtils.mapIndexed(SLinkOperations.getChildren(importType, LINKS.actualTypes$o6Gi), new _FunctionTypes._return_P2_E0<Boolean, Integer, SNode>() {
            public Boolean invoke(Integer index, SNode type) {
              return doesJavaTypeMatchDataType(ListSequence.fromList(SLinkOperations.getChildren(classifierType, LINKS.parameter$oqG$)).getElement(index), type);
            }
          });
          return Sequence.fromIterable(results).all(new IWhereFilter<Boolean>() {
            public boolean accept(Boolean it) {
              return it;
            }
          });
        }
        return false;
      }
    }

    return true;
  }

  public static boolean doesJavaDataTypeMatchJavaDataType(SNode javaType, SNode otherJavaType) {
    return doesJavaTypeMatchJavaType(SLinkOperations.getTarget(javaType, LINKS.actualType$WqWC), SLinkOperations.getTarget(otherJavaType, LINKS.actualType$WqWC));
  }

  public static boolean doesJavaTypeMatchJavaType(SNode type, SNode otherType) {
    SNode javaType = Type__BehaviorDescriptor.getJavaType_idhEwIzO1.invoke(type);
    SNode otherJavaType = Type__BehaviorDescriptor.getJavaType_idhEwIzO1.invoke(otherType);

    if (SNodeOperations.isInstanceOf(javaType, CONCEPTS.ArrayType$rh) && SNodeOperations.isInstanceOf(otherJavaType, CONCEPTS.ArrayType$rh)) {
      return doesJavaTypeMatchJavaType(SLinkOperations.getTarget(SNodeOperations.cast(javaType, CONCEPTS.ArrayType$rh), LINKS.componentType$F$Gi), SLinkOperations.getTarget(SNodeOperations.cast(otherJavaType, CONCEPTS.ArrayType$rh), LINKS.componentType$F$Gi));
    }

    if (SNodeOperations.isInstanceOf(javaType, CONCEPTS.ClassifierType$bL) && SNodeOperations.isInstanceOf(otherJavaType, CONCEPTS.ClassifierType$bL)) {
      if (!(Objects.equals(Type__BehaviorDescriptor.jniSignature_id7F81Cd2C7e3.invoke(javaType), Type__BehaviorDescriptor.jniSignature_id7F81Cd2C7e3.invoke(otherJavaType)))) {
        return false;
      }

      List<SNode> parameter = SLinkOperations.getChildren(SNodeOperations.cast(javaType, CONCEPTS.ClassifierType$bL), LINKS.parameter$oqG$);
      final List<SNode> otherParameters = SLinkOperations.getChildren(SNodeOperations.cast(otherJavaType, CONCEPTS.ClassifierType$bL), LINKS.parameter$oqG$);

      if (ListSequence.fromList(parameter).count() != ListSequence.fromList(otherParameters).count()) {
        return false;
      }

      Iterable<Boolean> results = CollectionUtils.mapIndexed(parameter, new _FunctionTypes._return_P2_E0<Boolean, Integer, SNode>() {
        public Boolean invoke(Integer index, SNode parameter) {
          return doesJavaTypeMatchJavaType(parameter, ListSequence.fromList(otherParameters).getElement(index));
        }
      });

      return Sequence.fromIterable(results).all(new IWhereFilter<Boolean>() {
        public boolean accept(Boolean it) {
          return it;
        }
      });
    }

    if (SNodeOperations.isInstanceOf(javaType, CONCEPTS.PrimitiveType$sR) && SNodeOperations.isInstanceOf(otherJavaType, CONCEPTS.PrimitiveType$sR)) {
      return Objects.equals(SNodeOperations.getConcept(javaType), SNodeOperations.getConcept(otherJavaType));
    }

    if (SNodeOperations.isInstanceOf(javaType, CONCEPTS.PrimitiveType$sR) && SNodeOperations.isInstanceOf(otherJavaType, CONCEPTS.ClassifierType$bL)) {
      return Objects.equals(SNodeOperations.getConcept(javaType), getPrimitiveConceptOf(otherJavaType));
    }

    if (SNodeOperations.isInstanceOf(javaType, CONCEPTS.ClassifierType$bL) && SNodeOperations.isInstanceOf(otherJavaType, CONCEPTS.PrimitiveType$sR)) {
      return Objects.equals(getPrimitiveConceptOf(javaType), SNodeOperations.getConcept(otherJavaType));
    }

    return Objects.equals(Type__BehaviorDescriptor.jniSignature_id7F81Cd2C7e3.invoke(javaType), Type__BehaviorDescriptor.jniSignature_id7F81Cd2C7e3.invoke(otherJavaType));
  }

  public static boolean isJavaTypePrimitiveType(SNode javaType) {
    return isTypePrimitiveType(SLinkOperations.getTarget(javaType, LINKS.actualType$WqWC));
  }

  public static boolean isTypePrimitiveType(SNode type) {
    return SNodeOperations.isInstanceOf(type, CONCEPTS.PrimitiveType$sR) || SNodeOperations.isInstanceOf(type, CONCEPTS.StringType$uX) || !(Objects.equals(getPrimitiveConceptOf(type), null));
  }

  public static SConcept getPrimitiveConceptOf(SNode type) {
    if (!(SNodeOperations.isInstanceOf(type, CONCEPTS.ClassifierType$bL)) || Type__BehaviorDescriptor.jniSignature_id7F81Cd2C7e3.invoke(type) == null) {
      return null;
    }
    return MapSequence.fromMap(primitiveTypeMap).get(Type__BehaviorDescriptor.jniSignature_id7F81Cd2C7e3.invoke(type));
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cb4L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cb7L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cbaL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cabL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829ca8L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829ca2L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829caeL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cafL), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829ca5L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e92986f7d9L), MetaIdFactory.conceptId(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x783dbe7d5ebb3748L)).seal();

  private static final class CONCEPTS {
    /*package*/ static final SConcept BooleanType$_u = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d6513eL, "jetbrains.mps.baseLanguage.structure.BooleanType");
    /*package*/ static final SConcept ByteType$Ms = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d5b617L, "jetbrains.mps.baseLanguage.structure.ByteType");
    /*package*/ static final SConcept CharType$JQ = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d4f826L, "jetbrains.mps.baseLanguage.structure.CharType");
    /*package*/ static final SConcept FloatType$up = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d327fdL, "jetbrains.mps.baseLanguage.structure.FloatType");
    /*package*/ static final SConcept DoubleType$x0 = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d451a6L, "jetbrains.mps.baseLanguage.structure.DoubleType");
    /*package*/ static final SConcept ShortType$ro = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940cc380dL, "jetbrains.mps.baseLanguage.structure.ShortType");
    /*package*/ static final SConcept IntegerType$7a = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d22479L, "jetbrains.mps.baseLanguage.structure.IntegerType");
    /*package*/ static final SConcept LongType$5X = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f3L, "jetbrains.mps.baseLanguage.structure.LongType");
    /*package*/ static final SInterfaceConcept IPrimitiveType$3E = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c9fL, "CQRS.structure.IPrimitiveType");
    /*package*/ static final SInterfaceConcept ICollectionType$rd = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cbdL, "CQRS.structure.ICollectionType");
    /*package*/ static final SConcept MapType$JX = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x783dbe7d5ebb3779L, "CQRS.structure.MapType");
    /*package*/ static final SConcept ImportedType$3u = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL, "CQRS.structure.ImportedType");
    /*package*/ static final SConcept JavaDataType$MU = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x53a29a8dae148659L, "CQRS.structure.JavaDataType");
    /*package*/ static final SConcept StringType$uX = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47da71ecL, "jetbrains.mps.baseLanguage.structure.StringType");
    /*package*/ static final SConcept ArrayType$rh = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, "jetbrains.mps.baseLanguage.structure.ArrayType");
    /*package*/ static final SConcept ArrayType$ZB = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6375c6ceeba0da5bL, "CQRS.structure.ArrayType");
    /*package*/ static final SConcept ClassifierType$bL = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType");
    /*package*/ static final SConcept PrimitiveType$sR = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f0ad8bde4L, "jetbrains.mps.baseLanguage.structure.PrimitiveType");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink actualType$WqWC = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x53a29a8dae148659L, 0x53a29a8dae14865eL, "actualType");
    /*package*/ static final SContainmentLink componentType$F$Gi = MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, 0xf940d819f8L, "componentType");
    /*package*/ static final SContainmentLink elementType$AnT5 = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cbdL, 0x20f56dfff71fcf5aL, "elementType");
    /*package*/ static final SContainmentLink parameter$oqG$ = MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x102419671abL, "parameter");
    /*package*/ static final SContainmentLink valueType$mrNC = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x783dbe7d5ebb3779L, 0x783dbe7d5ebb377eL, "valueType");
    /*package*/ static final SContainmentLink keyType$mrlA = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x783dbe7d5ebb3779L, 0x783dbe7d5ebb377cL, "keyType");
    /*package*/ static final SContainmentLink actualTypes$o6Gi = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL, 0x5e223a0a0b9c13cdL, "actualTypes");
  }
}
