package CQRS.util;

/*Generated by MPS */

import java.util.Map;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Objects;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.LinkedHashSet;

public class CollectionUtils {

  public static <K, V> Map<K, List<V>> groupBy(Iterable<V> elements, _FunctionTypes._return_P1_E0<? extends K, ? super V> getKeyAction) {
    Map<K, List<V>> map = MapSequence.fromMap(new HashMap<K, List<V>>());
    for (V value : elements) {
      K key = getKeyAction.invoke(value);
      if (MapSequence.fromMap(map).containsKey(key)) {
        ListSequence.fromList(MapSequence.fromMap(map).get(key)).addElement(value);
      } else {
        MapSequence.fromMap(map).put(key, ListSequence.fromListAndArray(new ArrayList<V>(), value));
      }
    }
    return map;
  }

  public static <K, V> void forEachDuplicateValue(Iterable<V> elements, _FunctionTypes._return_P1_E0<? extends K, ? super V> getKeyAction, final _FunctionTypes._void_P1_E0<? super V> callback) {
    Map<K, List<V>> groupedElements = groupBy(elements, getKeyAction);
    for (K key : MapSequence.fromMap(groupedElements).keySet()) {
      if (Objects.equals(key, null)) {
        continue;
      }

      List<V> values = MapSequence.fromMap(groupedElements).get(key);

      if (ListSequence.fromList(values).count() < 2) {
        continue;
      }

      ListSequence.fromList(values).visitAll(new IVisitor<V>() {
        public void visit(V value) {
          callback.invoke(value);
        }
      });
    }
  }



  public static <T> Set<T> setOf(Iterable<T>... elementSequences) {
    Set<T> set = SetSequence.fromSet(new HashSet<T>());
    for (Iterable<T> sequence : elementSequences) {
      SetSequence.fromSet(set).addSequence(Sequence.fromIterable(sequence));
    }
    return set;
  }



  public static <T> Set<T> sortedSetOf(Iterable<T>... elementSequences) {
    Set<T> set = SetSequence.fromSet(new LinkedHashSet<T>());
    for (Iterable<T> sequence : elementSequences) {
      SetSequence.fromSet(set).addSequence(Sequence.fromIterable(sequence));
    }
    return set;
  }

  public static <T> Set<T> setOf(T... elements) {
    return SetSequence.fromSet(SetSequence.fromSet(new HashSet<T>())).addSequence(Sequence.fromIterable(Sequence.fromArray(elements)));
  }

  public static <T> Set<T> sortedSetOf(T... elements) {
    return SetSequence.fromSet(SetSequence.fromSet(new LinkedHashSet<T>())).addSequence(Sequence.fromIterable(Sequence.fromArray(elements)));
  }

  public static <T> List<T> listOf(Iterable<T>... elementSequences) {
    List<T> list = ListSequence.fromList(new ArrayList<T>());
    for (Iterable<T> sequence : elementSequences) {
      ListSequence.fromList(list).addSequence(Sequence.fromIterable(sequence));
    }
    return list;
  }

  public static <T> List<T> listOf(T... elements) {
    return ListSequence.fromList(ListSequence.fromList(new ArrayList<T>())).addSequence(Sequence.fromIterable(Sequence.fromArray(elements)));
  }

  public static <T> List<T> merge(Iterable<T>... sequences) {
    return SetSequence.fromSet(sortedSetOf(sequences)).toListSequence();
  }

  public static <T> List<T> mergeWithDuplicates(Iterable<T>... sequences) {
    List<T> list = ListSequence.fromList(new ArrayList<T>());
    for (Iterable<T> sequence : sequences) {
      ListSequence.fromList(list).addSequence(Sequence.fromIterable(sequence));
    }
    return ListSequence.fromList(list).toListSequence();
  }

  public static <T> void replaceWithTest(List<T> list) {
    ListSequence.fromList(list).clear();
  }

  public static <T> List<T> listOfSize(int size, _FunctionTypes._return_P1_E0<? extends T, ? super Integer> elementCreationFunction) {
    List<T> elements = ListSequence.fromList(new ArrayList<T>());
    for (int i = 0; i < size; i++) {
      ListSequence.fromList(elements).addElement(elementCreationFunction.invoke(i));
    }
    return elements;
  }

  public static <I, R> Iterable<R> mapIndexed(Iterable<I> elements, _FunctionTypes._return_P2_E0<? extends R, ? super Integer, ? super I> mapAction) {
    List<R> list = ListSequence.fromList(new ArrayList<R>());
    List<I> elementList = Sequence.fromIterable(elements).toListSequence();
    for (int i = 0; i < ListSequence.fromList(elementList).count(); i++) {
      ListSequence.fromList(list).addElement(mapAction.invoke(i, ListSequence.fromList(elementList).getElement(i)));
    }
    return list;
  }


  public static <T> List<T> append(Iterable<T> list, T... elementsToAppend) {
    List<T> newList = Sequence.fromIterable(list).toListSequence();
    ListSequence.fromList(newList).addSequence(Sequence.fromIterable(Sequence.fromArray(elementsToAppend)));
    return newList;
  }




}
