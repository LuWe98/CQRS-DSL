package CQRS.generator.templates;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import CQRS.behavior.BoundedContext__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import CQRS.behavior.IElementOfBoundedContext__BehaviorDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.TemplateQueryContext;
import java.util.Map;
import jetbrains.mps.generator.impl.query.MapConfigurationCondition;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.SourceNodeQuery;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.generator.impl.query.PropertyValueQuery;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.generator.impl.query.InlineSwitchCaseCondition;
import jetbrains.mps.generator.template.InlineSwitchCaseContext;
import jetbrains.mps.generator.impl.query.ReferenceTargetQuery;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static boolean rule_Condition_0_0(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(_context.getNode(), CONCEPTS.StringType$6$);
  }
  public static boolean rule_Condition_0_1(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(_context.getNode(), CONCEPTS.CharType$f_);
  }
  public static boolean rule_Condition_0_2(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(_context.getNode(), CONCEPTS.ByteType$e8);
  }
  public static boolean rule_Condition_0_3(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(_context.getNode(), CONCEPTS.ShortType$5);
  }
  public static boolean rule_Condition_0_4(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(_context.getNode(), CONCEPTS.IntegerType$57);
  }
  public static boolean rule_Condition_0_5(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(_context.getNode(), CONCEPTS.LongType$ZA);
  }
  public static boolean rule_Condition_0_6(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(_context.getNode(), CONCEPTS.BooleanType$cF);
  }
  public static boolean rule_Condition_0_7(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(_context.getNode(), CONCEPTS.FloatType$WG);
  }
  public static boolean rule_Condition_0_8(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(_context.getNode(), CONCEPTS.DoubleType$Y9);
  }
  public static boolean rule_Condition_0_9(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(_context.getNode(), CONCEPTS.ListType$Tr);
  }
  public static boolean rule_Condition_0_10(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(_context.getNode(), CONCEPTS.SetType$E2);
  }
  public static boolean rule_Condition_0_11(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(_context.getNode(), CONCEPTS.ArrayType$ZB);
  }
  public static boolean rule_Condition_0_12(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(_context.getNode(), CONCEPTS.MapType$JX);
  }
  public static Object propertyMacro_GetValue_1_0(final PropertyMacroContext _context) {
    return "AggregateRootRepository";
  }
  public static Object propertyMacro_GetValue_1_1(final PropertyMacroContext _context) {
    return (String) BoundedContext__BehaviorDescriptor.getRootPackage_id4NUTY$Dwz6z.invoke(_context.getNode());
  }
  public static Object propertyMacro_GetValue_2_0(final PropertyMacroContext _context) {
    return "AggregateRootIdRepository";
  }
  public static Object propertyMacro_GetValue_2_1(final PropertyMacroContext _context) {
    return (String) BoundedContext__BehaviorDescriptor.getRootPackage_id4NUTY$Dwz6z.invoke(_context.getNode());
  }
  public static Object propertyMacro_GetValue_3_0(final PropertyMacroContext _context) {
    return (String) BoundedContext__BehaviorDescriptor.getRootPackage_id4NUTY$Dwz6z.invoke(_context.getNode());
  }
  public static Object propertyMacro_GetValue_3_1(final PropertyMacroContext _context) {
    return "BaseEventSourcedAggregateRoot";
  }
  public static Object propertyMacro_GetValue_4_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_4_1(final PropertyMacroContext _context) {
    return BoundedContext__BehaviorDescriptor.getRootPackage_id4NUTY$Dwz6z.invoke(IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(_context.getNode())) + ".aggregates";
  }
  public static Object propertyMacro_GetValue_4_2(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_5_0(final PropertyMacroContext _context) {
    return "AggregateRoot";
  }
  public static Object propertyMacro_GetValue_5_1(final PropertyMacroContext _context) {
    return (String) BoundedContext__BehaviorDescriptor.getRootPackage_id4NUTY$Dwz6z.invoke(_context.getNode());
  }
  public static Object propertyMacro_GetValue_6_0(final PropertyMacroContext _context) {
    SNode command = _context.getNode();
    return SPropertyOperations.getString(command, PROPS.name$MnvL);
  }
  public static Object referenceMacro_GetReferent_4_0(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(_context.getNode()), "baseAggregateRootLabel");
  }
  public static SNode sourceNodeQuery_0_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.elementType$AnT5);
  }
  public static SNode sourceNodeQuery_0_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.elementType$AnT5);
  }
  public static SNode sourceNodeQuery_0_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.elementType$AnT5);
  }
  public static SNode sourceNodeQuery_0_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.keyType$mrlA);
  }
  public static SNode sourceNodeQuery_0_4(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.valueType$mrNC);
  }
  public static SNode sourceNodeQuery_0_5(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.as(_context.getNode(), CONCEPTS.ListType$Tr), LINKS.elementType$AnT5);
  }
  public static SNode sourceNodeQuery_0_6(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.as(_context.getNode(), CONCEPTS.SetType$E2), LINKS.elementType$AnT5);
  }
  public static SNode sourceNodeQuery_0_7(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.as(_context.getNode(), CONCEPTS.ArrayType$ZB), LINKS.elementType$AnT5);
  }
  public static SNode sourceNodeQuery_0_8(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.as(_context.getNode(), CONCEPTS.MapType$JX), LINKS.keyType$mrlA);
  }
  public static SNode sourceNodeQuery_0_9(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.as(_context.getNode(), CONCEPTS.MapType$JX), LINKS.valueType$mrNC);
  }
  public static SNode sourceNodeQuery_4_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.idType$EoIp);
  }
  public static SNode sourceNodeQuery_4_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.idType$EoIp);
  }
  public static boolean mc_Condition_0(final TemplateQueryContext _context) {
    return false;
  }
  private final Map<String, MapConfigurationCondition> mccMethods = new HashMap<String, MapConfigurationCondition>();
  {
    int i = 0;
    mccMethods.put("4790507954846316162", new MCC(i++));
  }
  @Override
  @NotNull
  public MapConfigurationCondition getMapConfigurationCondition(@NotNull QueryKey identity) {
    MapConfigurationCondition query = identity.forTemplateNode(mccMethods);
    return (query != null ? query : super.getMapConfigurationCondition(identity));
  }
  private static class MCC implements MapConfigurationCondition {
    private final int methodKey;
    public MCC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(TemplateQueryContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.mc_Condition_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for map configuration %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, SourceNodeQuery> snqMethods = new HashMap<String, SourceNodeQuery>();
  {
    int i = 0;
    snqMethods.put("5547000879670294590", new SNQ(i++));
    snqMethods.put("4410372316539943670", new SNQ(i++));
    snqMethods.put("6026549184676423272", new SNQ(i++));
    snqMethods.put("4410372316539945700", new SNQ(i++));
    snqMethods.put("4410372316539946019", new SNQ(i++));
    snqMethods.put("7166852974048773136", new SNQ(i++));
    snqMethods.put("7166852974048780326", new SNQ(i++));
    snqMethods.put("7166852974048783629", new SNQ(i++));
    snqMethods.put("7166852974048792065", new SNQ(i++));
    snqMethods.put("7166852974048788966", new SNQ(i++));
    snqMethods.put("5547000879670167363", new SNQ(i++));
    snqMethods.put("5547000879670167663", new SNQ(i++));
  }
  @NotNull
  @Override
  public SourceNodeQuery getSourceNodeQuery(@NotNull QueryKey identity) {
    SourceNodeQuery query = identity.forFunctionNode(snqMethods);
    return (query != null ? query : super.getSourceNodeQuery(identity));
  }
  private static class SNQ implements SourceNodeQuery {
    private final int methodKey;
    public SNQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull SourceSubstituteMacroNodeContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.sourceNodeQuery_0_0(ctx);
        case 1:
          return QueriesGenerated.sourceNodeQuery_0_1(ctx);
        case 2:
          return QueriesGenerated.sourceNodeQuery_0_2(ctx);
        case 3:
          return QueriesGenerated.sourceNodeQuery_0_3(ctx);
        case 4:
          return QueriesGenerated.sourceNodeQuery_0_4(ctx);
        case 5:
          return QueriesGenerated.sourceNodeQuery_0_5(ctx);
        case 6:
          return QueriesGenerated.sourceNodeQuery_0_6(ctx);
        case 7:
          return QueriesGenerated.sourceNodeQuery_0_7(ctx);
        case 8:
          return QueriesGenerated.sourceNodeQuery_0_8(ctx);
        case 9:
          return QueriesGenerated.sourceNodeQuery_0_9(ctx);
        case 10:
          return QueriesGenerated.sourceNodeQuery_4_0(ctx);
        case 11:
          return QueriesGenerated.sourceNodeQuery_4_1(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, PropertyValueQuery> pvqMethods = new HashMap<String, PropertyValueQuery>();
  {
    int i = 0;
    pvqMethods.put("5547000879669980890", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "map_AggregateRootRepositoryInterface"));
    pvqMethods.put("5547000879669989830", new PVQ(i++, MetaAdapterFactory.getProperty(0x6b3888c1980244d8L, 0x8baff8e6c33ed689L, 0x28bef6d7551af4b6L, 0x11400bb790e02802L, "packageName"), "packageName"));
    pvqMethods.put("5547000879670001970", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "map_AggregateRootIdRepositoryIdInterface"));
    pvqMethods.put("5547000879670003736", new PVQ(i++, MetaAdapterFactory.getProperty(0x6b3888c1980244d8L, 0x8baff8e6c33ed689L, 0x28bef6d7551af4b6L, 0x11400bb790e02802L, "packageName"), "packageName"));
    pvqMethods.put("5547000879670039204", new PVQ(i++, MetaAdapterFactory.getProperty(0x6b3888c1980244d8L, 0x8baff8e6c33ed689L, 0x28bef6d7551af4b6L, 0x11400bb790e02802L, "packageName"), "packageName"));
    pvqMethods.put("5547000879670046663", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "map_BaseEventAggregateRoot"));
    pvqMethods.put("5547000879670051652", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "map_AggregateRoot"));
    pvqMethods.put("5547000879670052262", new PVQ(i++, MetaAdapterFactory.getProperty(0x6b3888c1980244d8L, 0x8baff8e6c33ed689L, 0x28bef6d7551af4b6L, 0x11400bb790e02802L, "packageName"), "packageName"));
    pvqMethods.put("5547000879670069460", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "AggregateClassName"));
    pvqMethods.put("7166852974049146212", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "map_AggregateRootInterface"));
    pvqMethods.put("7166852974049146744", new PVQ(i++, MetaAdapterFactory.getProperty(0x6b3888c1980244d8L, 0x8baff8e6c33ed689L, 0x28bef6d7551af4b6L, 0x11400bb790e02802L, "packageName"), "packageName"));
    pvqMethods.put("1348602402692344334", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CommandName"));
  }
  @NotNull
  @Override
  public PropertyValueQuery getPropertyValueQuery(@NotNull QueryKey identity) {
    PropertyValueQuery query = identity.forTemplateNode(pvqMethods);
    return (query != null ? query : super.getPropertyValueQuery(identity));
  }
  private static class PVQ extends PropertyValueQuery.Base {
    private final int methodKey;
    /*package*/ PVQ(int methodKey, SProperty property, String templateValue) {
      super(property, templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull PropertyMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.propertyMacro_GetValue_1_0(ctx);
        case 1:
          return QueriesGenerated.propertyMacro_GetValue_1_1(ctx);
        case 2:
          return QueriesGenerated.propertyMacro_GetValue_2_0(ctx);
        case 3:
          return QueriesGenerated.propertyMacro_GetValue_2_1(ctx);
        case 4:
          return QueriesGenerated.propertyMacro_GetValue_3_0(ctx);
        case 5:
          return QueriesGenerated.propertyMacro_GetValue_3_1(ctx);
        case 6:
          return QueriesGenerated.propertyMacro_GetValue_4_0(ctx);
        case 7:
          return QueriesGenerated.propertyMacro_GetValue_4_1(ctx);
        case 8:
          return QueriesGenerated.propertyMacro_GetValue_4_2(ctx);
        case 9:
          return QueriesGenerated.propertyMacro_GetValue_5_0(ctx);
        case 10:
          return QueriesGenerated.propertyMacro_GetValue_5_1(ctx);
        case 11:
          return QueriesGenerated.propertyMacro_GetValue_6_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, InlineSwitchCaseCondition> isccMethods = new HashMap<String, InlineSwitchCaseCondition>();
  {
    int i = 0;
    isccMethods.put("7166852974048747589", new ISCC(i++));
    isccMethods.put("7166852974048749654", new ISCC(i++));
    isccMethods.put("7166852974048750266", new ISCC(i++));
    isccMethods.put("7166852974048752616", new ISCC(i++));
    isccMethods.put("7166852974048753232", new ISCC(i++));
    isccMethods.put("7166852974048755664", new ISCC(i++));
    isccMethods.put("7166852974048756859", new ISCC(i++));
    isccMethods.put("7166852974048758003", new ISCC(i++));
    isccMethods.put("7166852974048760658", new ISCC(i++));
    isccMethods.put("7166852974048770830", new ISCC(i++));
    isccMethods.put("7166852974048777122", new ISCC(i++));
    isccMethods.put("7166852974048782594", new ISCC(i++));
    isccMethods.put("7166852974048786592", new ISCC(i++));
  }
  @NotNull
  @Override
  public InlineSwitchCaseCondition getInlineSwitchCaseCondition(@NotNull QueryKey identity) {
    InlineSwitchCaseCondition query = identity.forTemplateNode(isccMethods);
    return (query != null ? query : super.getInlineSwitchCaseCondition(identity));
  }
  private static class ISCC implements InlineSwitchCaseCondition {
    private final int methodKey;
    public ISCC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull InlineSwitchCaseContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.rule_Condition_0_0(ctx);
        case 1:
          return QueriesGenerated.rule_Condition_0_1(ctx);
        case 2:
          return QueriesGenerated.rule_Condition_0_2(ctx);
        case 3:
          return QueriesGenerated.rule_Condition_0_3(ctx);
        case 4:
          return QueriesGenerated.rule_Condition_0_4(ctx);
        case 5:
          return QueriesGenerated.rule_Condition_0_5(ctx);
        case 6:
          return QueriesGenerated.rule_Condition_0_6(ctx);
        case 7:
          return QueriesGenerated.rule_Condition_0_7(ctx);
        case 8:
          return QueriesGenerated.rule_Condition_0_8(ctx);
        case 9:
          return QueriesGenerated.rule_Condition_0_9(ctx);
        case 10:
          return QueriesGenerated.rule_Condition_0_10(ctx);
        case 11:
          return QueriesGenerated.rule_Condition_0_11(ctx);
        case 12:
          return QueriesGenerated.rule_Condition_0_12(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for inline switch's case %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, ReferenceTargetQuery> rtqMethods = new HashMap<String, ReferenceTargetQuery>();
  {
    rtqMethods.put("7166852974049067922", new RTQ(0, "BaseEventAggregateRoot"));
  }
  @NotNull
  @Override
  public ReferenceTargetQuery getReferenceTargetQuery(@NotNull QueryKey queryKey) {
    ReferenceTargetQuery query = queryKey.forTemplateNode(rtqMethods);
    return (query != null ? query : super.getReferenceTargetQuery(queryKey));
  }
  private static class RTQ extends ReferenceTargetQuery.Base {
    private final int methodKey;
    /*package*/ RTQ(int methodKey, String templateValue) {
      super(templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull ReferenceMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.referenceMacro_GetReferent_4_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept StringType$6$ = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829ca5L, "CQRS.structure.StringType");
    /*package*/ static final SConcept CharType$f_ = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cbaL, "CQRS.structure.CharType");
    /*package*/ static final SConcept ByteType$e8 = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cb7L, "CQRS.structure.ByteType");
    /*package*/ static final SConcept ShortType$5 = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cafL, "CQRS.structure.ShortType");
    /*package*/ static final SConcept IntegerType$57 = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829ca2L, "CQRS.structure.IntegerType");
    /*package*/ static final SConcept LongType$ZA = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829caeL, "CQRS.structure.LongType");
    /*package*/ static final SConcept BooleanType$cF = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cb4L, "CQRS.structure.BooleanType");
    /*package*/ static final SConcept FloatType$WG = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829ca8L, "CQRS.structure.FloatType");
    /*package*/ static final SConcept DoubleType$Y9 = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cabL, "CQRS.structure.DoubleType");
    /*package*/ static final SConcept ListType$Tr = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e92986f7d9L, "CQRS.structure.ListType");
    /*package*/ static final SConcept SetType$E2 = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x783dbe7d5ebb3748L, "CQRS.structure.SetType");
    /*package*/ static final SConcept ArrayType$ZB = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6375c6ceeba0da5bL, "CQRS.structure.ArrayType");
    /*package*/ static final SConcept MapType$JX = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x783dbe7d5ebb3779L, "CQRS.structure.MapType");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink elementType$AnT5 = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cbdL, 0x20f56dfff71fcf5aL, "elementType");
    /*package*/ static final SContainmentLink keyType$mrlA = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x783dbe7d5ebb3779L, 0x783dbe7d5ebb377cL, "keyType");
    /*package*/ static final SContainmentLink valueType$mrNC = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x783dbe7d5ebb3779L, 0x783dbe7d5ebb377eL, "valueType");
    /*package*/ static final SContainmentLink idType$EoIp = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c99L, 0x4cfae7e929829cc6L, "idType");
  }
}
