package CQRS.Generation.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.Set;
import CQRS.Generation.generation.DependencyImport;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import CQRS.Generation.generation.DependencyTextConverter;
import CQRS.Generation.generation.GenerationTarget;
import CQRS.Generation.generation.ConceptMapper;
import CQRS.Generation.generation.DependencyResolver;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import CQRS.Generation.generation.DependencyTextConverters;
import CQRS.Generation.generation.ConceptMappers;
import CQRS.Generation.generation.DependencyResolvers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public final class ComponentOutput__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488a0177afL, "CQRS.Generation.structure.ComponentOutput");

  public static final SMethod<Set<DependencyImport>> getImports_id4yUYSn0sW9K = new SMethodBuilder<Set<DependencyImport>>(new SJavaCompoundTypeImpl((Class<Set<DependencyImport>>) ((Class) Object.class))).name("getImports").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5240777668277027440L).languageId(0x8484525ea753e78bL, 0x273bc31819694c83L).build2();
  public static final SMethod<DependencyTextConverter> converter_id2Np_kya0nik = new SMethodBuilder<DependencyTextConverter>(new SJavaCompoundTypeImpl(DependencyTextConverter.class)).name("converter").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3231778346400576660L).languageId(0x8484525ea753e78bL, 0x273bc31819694c83L).build2(SMethodBuilder.createJavaParameter(GenerationTarget.class, ""));
  public static final SMethod<ConceptMapper> mapper_id2Np_kya0nit = new SMethodBuilder<ConceptMapper>(new SJavaCompoundTypeImpl(ConceptMapper.class)).name("mapper").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3231778346400576669L).languageId(0x8484525ea753e78bL, 0x273bc31819694c83L).build2(SMethodBuilder.createJavaParameter(GenerationTarget.class, ""));
  public static final SMethod<DependencyResolver> resolver_id4b$xqUBa0Kt = new SMethodBuilder<DependencyResolver>(new SJavaCompoundTypeImpl(DependencyResolver.class)).name("resolver").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4820124486368496669L).languageId(0x8484525ea753e78bL, 0x273bc31819694c83L).build2(SMethodBuilder.createJavaParameter(GenerationTarget.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getImports_id4yUYSn0sW9K, converter_id2Np_kya0nik, mapper_id2Np_kya0nit, resolver_id4b$xqUBa0Kt);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Set<DependencyImport> getImports_id4yUYSn0sW9K(@NotNull SNode __thisNode__) {
    return SetSequence.fromSet(new HashSet<DependencyImport>());
  }
  /*package*/ static DependencyTextConverter converter_id2Np_kya0nik(@NotNull SNode __thisNode__, GenerationTarget target) {
    return DependencyTextConverters.get(target);
  }
  /*package*/ static ConceptMapper mapper_id2Np_kya0nit(@NotNull SNode __thisNode__, GenerationTarget target) {
    return ConceptMappers.get(target);
  }
  /*package*/ static DependencyResolver resolver_id4b$xqUBa0Kt(@NotNull SNode __thisNode__, GenerationTarget target) {
    return DependencyResolvers.get(target, SLinkOperations.getTarget(__thisNode__, LINKS.boundedContext$bmqW));
  }

  /*package*/ ComponentOutput__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Set<DependencyImport>) getImports_id4yUYSn0sW9K(node));
      case 1:
        return (T) ((DependencyTextConverter) converter_id2Np_kya0nik(node, (GenerationTarget) parameters[0]));
      case 2:
        return (T) ((ConceptMapper) mapper_id2Np_kya0nit(node, (GenerationTarget) parameters[0]));
      case 3:
        return (T) ((DependencyResolver) resolver_id4b$xqUBa0Kt(node, (GenerationTarget) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink boundedContext$bmqW = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488a0177afL, 0x2cd995488a7b76f9L, "boundedContext");
  }
}
