package CQRS.Generation.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import CQRS.Generation.generation.DependencyImport;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import CQRS.Generation.generation.GenerationTarget;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class CommandOutput__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea75e79ccL, "CQRS.Generation.structure.CommandOutput");

  public static final SMethod<DependencyImport> getImport_idSy32QQYkNm = new SMethodBuilder<DependencyImport>(new SJavaCompoundTypeImpl(DependencyImport.class)).name("getImport").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1018389856222006486L).languageId(0x8484525ea753e78bL, 0x273bc31819694c83L).build2(SMethodBuilder.createJavaParameter(GenerationTarget.class, ""));
  public static final SMethod<SNode> getParentCommandWrapper_id51Z40VBuhV2 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getParentCommandWrapper").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5800372501275549378L).languageId(0x8484525ea753e78bL, 0x273bc31819694c83L).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getImport_idSy32QQYkNm, getParentCommandWrapper_id51Z40VBuhV2);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static DependencyImport getImport_idSy32QQYkNm(@NotNull SNode __thisNode__, GenerationTarget target) {
    return ComponentOutput__BehaviorDescriptor.resolver_id4b$xqUBa0Kt.invoke(__thisNode__, target).resolveCommand(SLinkOperations.getTarget(__thisNode__, LINKS.command$mcVL));
  }
  /*package*/ static SNode getParentCommandWrapper_id51Z40VBuhV2(@NotNull SNode __thisNode__) {
    return SNodeOperations.as(SNodeOperations.getParent(__thisNode__), CONCEPTS.CommandWrapperInterfaceOutput$p1);
  }

  /*package*/ CommandOutput__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((DependencyImport) getImport_idSy32QQYkNm(node, (GenerationTarget) parameters[0]));
      case 1:
        return (T) ((SNode) getParentCommandWrapper_id51Z40VBuhV2(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink command$mcVL = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea75e79ccL, 0x42e485aea75e79cfL, "command");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept CommandWrapperInterfaceOutput$p1 = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x7849637c48be76e0L, "CQRS.Generation.structure.CommandWrapperInterfaceOutput");
  }
}
