package CQRS.Generation.generation;

/*Generated by MPS */

import java.util.Map;
import org.jetbrains.mps.openapi.model.SNodeId;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import CQRS.behavior.IElementOfBoundedContext__BehaviorDescriptor;

public class DependencyResolvers {

  private static final Map<GenerationTarget, Map<SNodeId, DependencyResolver>> resolverMap = MapSequence.fromMap(new HashMap<GenerationTarget, Map<SNodeId, DependencyResolver>>());

  public static DependencyResolver get(GenerationTarget target, SNode context) {
    return MapSequence.fromMap(MapSequence.fromMap(resolverMap).get(target)).get(SNodeOperations.getPointer(context).getNodeId());
  }

  public static DependencyResolver getWith(GenerationTarget target, SNode element) {
    return MapSequence.fromMap(MapSequence.fromMap(resolverMap).get(target)).get(SNodeOperations.getPointer(IElementOfBoundedContext__BehaviorDescriptor.boundedContext_id3VGLvhEO$iA.invoke(element)).getNodeId());
  }

  public static void register(DependencyResolver resolver) {
    if (!(MapSequence.fromMap(resolverMap).containsKey(resolver.getGenerationTarget()))) {
      MapSequence.fromMap(resolverMap).put(resolver.getGenerationTarget(), MapSequence.fromMap(new HashMap<SNodeId, DependencyResolver>()));
    }
    MapSequence.fromMap(MapSequence.fromMap(resolverMap).get(resolver.getGenerationTarget())).put(SNodeOperations.getPointer(resolver.getBoundedContext()).getNodeId(), resolver);
  }

  public static void unregister(GenerationTarget target, SNode context) {
    MapSequence.fromMap(MapSequence.fromMap(resolverMap).get(target)).removeKey(SNodeOperations.getPointer(context).getNodeId());
  }

  public static void unregisterAll() {
    MapSequence.fromMap(resolverMap).clear();
  }

  public static void unregister(GenerationTarget target) {
    MapSequence.fromMap(MapSequence.fromMap(resolverMap).get(target)).clear();
  }

}
