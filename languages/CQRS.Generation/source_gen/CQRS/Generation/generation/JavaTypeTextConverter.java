package CQRS.Generation.generation;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public interface JavaTypeTextConverter {

  default String convertJavaType(SNode javaType) {
    return convertType(SLinkOperations.getTarget(javaType, LINKS.actualType$WqWC));
  }

  default String convertType(SNode type) {
    {
      final SNode primitive = type;
      if (SNodeOperations.isInstanceOf(primitive, CONCEPTS.PrimitiveType$sR)) {
        return convertPrimitiveType(primitive);
      }
    }

    {
      final SNode stringType = type;
      if (SNodeOperations.isInstanceOf(stringType, CONCEPTS.StringType$uX)) {
        return convertStringType(stringType);
      }
    }

    {
      final SNode arrayType = type;
      if (SNodeOperations.isInstanceOf(arrayType, CONCEPTS.ArrayType$rh)) {
        return convertArrayType(arrayType);
      }
    }

    {
      final SNode classifier = type;
      if (SNodeOperations.isInstanceOf(classifier, CONCEPTS.ClassifierType$bL)) {
        return convertClassifierType(classifier);
      }
    }

    {
      final SNode wildCardType = type;
      if (SNodeOperations.isInstanceOf(wildCardType, CONCEPTS.WildCardType$uV)) {
        return convertWildCardType(wildCardType);
      }
    }

    throw new IllegalArgumentException("Could not convert java type '" + type + "' into text representation.");
  }

  String convertPrimitiveType(SNode primitiveType);

  String convertStringType(SNode stringType);

  String convertArrayType(SNode arrayType);

  String convertClassifierType(SNode classifierType);

  String convertWildCardType(SNode wildCardType);

  final class LINKS {
    /*package*/ static final SContainmentLink actualType$WqWC = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x53a29a8dae148659L, 0x53a29a8dae14865eL, "actualType");
  }

  final class CONCEPTS {
    /*package*/ static final SConcept PrimitiveType$sR = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f0ad8bde4L, "jetbrains.mps.baseLanguage.structure.PrimitiveType");
    /*package*/ static final SConcept StringType$uX = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47da71ecL, "jetbrains.mps.baseLanguage.structure.StringType");
    /*package*/ static final SConcept ArrayType$rh = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, "jetbrains.mps.baseLanguage.structure.ArrayType");
    /*package*/ static final SConcept ClassifierType$bL = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType");
    /*package*/ static final SConcept WildCardType$uV = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110dae5f4a3L, "jetbrains.mps.baseLanguage.structure.WildCardType");
  }
}
