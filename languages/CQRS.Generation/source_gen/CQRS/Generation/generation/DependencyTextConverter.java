package CQRS.Generation.generation;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import CQRS.behavior.AggregateRootRepository__BehaviorDescriptor;
import CQRS.behavior.IRepository__BehaviorDescriptor;
import CQRS.behavior.IRepositoryReference__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public interface DependencyTextConverter {

  GenerationTarget getGenerationTarget();

  default String convertType(SNode type) {
    {
      final SNode primitive = type;
      if (SNodeOperations.isInstanceOf(primitive, CONCEPTS.IPrimitiveType$3E)) {
        return convertPrimitive(primitive);
      }
    }

    {
      final SNode collectionType = type;
      if (SNodeOperations.isInstanceOf(collectionType, CONCEPTS.ICollectionType$rd)) {
        return convertCollection(collectionType);
      }
    }

    {
      final SNode mapType = type;
      if (SNodeOperations.isInstanceOf(mapType, CONCEPTS.MapType$JX)) {
        return convertMapType(mapType);
      }
    }

    {
      final SNode importType = type;
      if (SNodeOperations.isInstanceOf(importType, CONCEPTS.ImportedType$3u)) {
        return convertImportedType(importType);
      }
    }

    {
      final SNode javaDataType = type;
      if (SNodeOperations.isInstanceOf(javaDataType, CONCEPTS.JavaDataType$MU)) {
        return convertJavaDataType(javaDataType);
      }
    }

    {
      final SNode valueObjectReference = type;
      if (SNodeOperations.isInstanceOf(valueObjectReference, CONCEPTS.ValueObjectReference$jW)) {
        return convertValueObject(SLinkOperations.getTarget(valueObjectReference, LINKS.valueObject$DGR4));
      }
    }

    {
      final SNode entityReference = type;
      if (SNodeOperations.isInstanceOf(entityReference, CONCEPTS.EntityReference$x1)) {
        return convertEntity(SLinkOperations.getTarget(entityReference, LINKS.entity$DNp$));
      }
    }

    {
      final SNode aggregateRootReference = type;
      if (SNodeOperations.isInstanceOf(aggregateRootReference, CONCEPTS.AggregateRootReference$5T)) {
        return convertAggregate(SLinkOperations.getTarget(aggregateRootReference, LINKS.aggregate$D_P$));
      }
    }

    {
      final SNode dtoReference = type;
      if (SNodeOperations.isInstanceOf(dtoReference, CONCEPTS.DtoReference$zV)) {
        return convertDto(SLinkOperations.getTarget(dtoReference, LINKS.dto$DOQ$));
      }
    }

    {
      final SNode eventReference = type;
      if (SNodeOperations.isInstanceOf(eventReference, CONCEPTS.EventReference$8b)) {
        return convertEvent(SLinkOperations.getTarget(eventReference, LINKS.event$RGnV));
      }
    }

    {
      final SNode queryReference = type;
      if (SNodeOperations.isInstanceOf(queryReference, CONCEPTS.QueryReference$zj)) {
        return convertQuery(SLinkOperations.getTarget(queryReference, LINKS.query$ROy$));
      }
    }

    {
      final SNode commandReference = type;
      if (SNodeOperations.isInstanceOf(commandReference, CONCEPTS.CommandReference$me)) {
        return convertCommand(SLinkOperations.getTarget(commandReference, LINKS.command$RI04));
      }
    }

    {
      final SNode repositoryReference = type;
      if (SNodeOperations.isInstanceOf(repositoryReference, CONCEPTS.IRepositoryReference$aQ)) {
        return convertRepository(repositoryReference);
      }
    }

    throw new IllegalArgumentException("DataType - " + SNodeOperations.getConcept(type) + " - is not supported");
  }

  default String convertValueObject(SNode valueObject) {
    return SPropertyOperations.getString(valueObject, PROPS.name$MnvL);
  }

  default String convertEntity(SNode entity) {
    return SPropertyOperations.getString(entity, PROPS.name$MnvL);
  }

  default String convertAggregate(SNode aggregate) {
    return SPropertyOperations.getString(aggregate, PROPS.name$MnvL);
  }

  default String convertAggregateConcreteInterface(SNode aggregate) {
    return "I" + SPropertyOperations.getString(aggregate, PROPS.name$MnvL);
  }

  default String convertAggregateConcreteRepositoryInterface(SNode repository) {
    return "I" + AggregateRootRepository__BehaviorDescriptor.repositoryName_id5qxF18G6I2Y.invoke(repository);
  }

  default String convertRepository(SNode repositoryReference) {
    // A repository should always be resolved with the Interface reference
    return "I" + IRepository__BehaviorDescriptor.repositoryName_idmdpAJL$$QT.invoke(IRepositoryReference__BehaviorDescriptor.getRepository_id5jZDGTil89u.invoke(repositoryReference));
  }

  default String convertDto(SNode dto) {
    return SPropertyOperations.getString(dto, PROPS.name$MnvL);
  }

  default String convertCommand(SNode command) {
    return SPropertyOperations.getString(command, PROPS.name$MnvL);
  }

  default String convertQuery(SNode query) {
    return SPropertyOperations.getString(query, PROPS.name$MnvL);
  }

  default String convertQueryHandlerSeparated(SNode query) {
    return SPropertyOperations.getString(query, PROPS.name$MnvL) + "Handler";
  }

  default String convertEvent(SNode event) {
    return SPropertyOperations.getString(event, PROPS.name$MnvL);
  }

  String convertPrimitive(SNode primitive);

  String convertCollection(SNode collection);

  String convertMapType(SNode map);

  String convertImportedType(SNode importedType);

  String convertJavaDataType(SNode javaDataType);

  final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IPrimitiveType$3E = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c9fL, "CQRS.structure.IPrimitiveType");
    /*package*/ static final SInterfaceConcept ICollectionType$rd = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cbdL, "CQRS.structure.ICollectionType");
    /*package*/ static final SConcept MapType$JX = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x783dbe7d5ebb3779L, "CQRS.structure.MapType");
    /*package*/ static final SConcept ImportedType$3u = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL, "CQRS.structure.ImportedType");
    /*package*/ static final SConcept JavaDataType$MU = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x53a29a8dae148659L, "CQRS.structure.JavaDataType");
    /*package*/ static final SConcept ValueObjectReference$jW = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8faL, "CQRS.structure.ValueObjectReference");
    /*package*/ static final SConcept EntityReference$x1 = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f900L, "CQRS.structure.EntityReference");
    /*package*/ static final SConcept AggregateRootReference$5T = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f2L, "CQRS.structure.AggregateRootReference");
    /*package*/ static final SConcept DtoReference$zV = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f906L, "CQRS.structure.DtoReference");
    /*package*/ static final SConcept EventReference$8b = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2439L, "CQRS.structure.EventReference");
    /*package*/ static final SConcept QueryReference$zj = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2447L, "CQRS.structure.QueryReference");
    /*package*/ static final SConcept CommandReference$me = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2441L, "CQRS.structure.CommandReference");
    /*package*/ static final SInterfaceConcept IRepositoryReference$aQ = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x54ffa6ce505e177aL, "CQRS.structure.IRepositoryReference");
  }

  final class LINKS {
    /*package*/ static final SReferenceLink valueObject$DGR4 = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8faL, 0x4f0a0db9ac16f8fbL, "valueObject");
    /*package*/ static final SReferenceLink entity$DNp$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f900L, 0x4f0a0db9ac16f901L, "entity");
    /*package*/ static final SReferenceLink aggregate$D_P$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f2L, 0x4f0a0db9ac16f8f3L, "aggregate");
    /*package*/ static final SReferenceLink dto$DOQ$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f906L, 0x4f0a0db9ac16f907L, "dto");
    /*package*/ static final SReferenceLink event$RGnV = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2439L, 0x73da5086440e243cL, "event");
    /*package*/ static final SReferenceLink query$ROy$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2447L, 0x73da5086440e2448L, "query");
    /*package*/ static final SReferenceLink command$RI04 = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2441L, 0x73da5086440e2442L, "command");
  }

  final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
