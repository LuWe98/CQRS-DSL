package CQRS.Generation.generation;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import CQRS.behavior.BoundedContext__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import CQRS.behavior.ValueObject__BehaviorDescriptor;
import CQRS.behavior.Entity__BehaviorDescriptor;
import CQRS.Generation.util.StringUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.ArrayList;
import CQRS.behavior.GenerationSettings__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import CQRS.behavior.CommandGenerationSettings__BehaviorDescriptor;
import java.util.List;
import CQRS.util.CollectionUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import CQRS.behavior.CommandContainer__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import CQRS.behavior.IComponentWithRepositoryReferences__BehaviorDescriptor;
import CQRS.behavior.IRepositoryReference__BehaviorDescriptor;
import CQRS.behavior.IComponentWithNamePlaceholder__BehaviorDescriptor;
import CQRS.behavior.Command__BehaviorDescriptor;
import CQRS.behavior.EventGenerationSettings__BehaviorDescriptor;
import CQRS.behavior.AggregateRoot__BehaviorDescriptor;
import CQRS.behavior.EventContainer__BehaviorDescriptor;
import CQRS.behavior.Event__BehaviorDescriptor;
import CQRS.behavior.AggregateRootRepository__BehaviorDescriptor;
import CQRS.behavior.IDtoDerivation__BehaviorDescriptor;
import CQRS.behavior.IDataType__BehaviorDescriptor;
import CQRS.helper.VariableWrapper;
import CQRS.behavior.IVariable__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import CQRS.behavior.IDtoDerivableReference__BehaviorDescriptor;
import CQRS.behavior.Dto__BehaviorDescriptor;
import java.util.Objects;
import CQRS.behavior.DtoRepository__BehaviorDescriptor;
import CQRS.behavior.QueryGenerationSettings__BehaviorDescriptor;
import CQRS.behavior.QueryContainer__BehaviorDescriptor;
import CQRS.behavior.Query__BehaviorDescriptor;
import CQRS.behavior.IRepository__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;

public class ClassGenerator {

  private SModel cqrsModel;
  private SNode boundedContext;
  private SNode settings;

  private ParameterBuilder parameterBuilder;
  private MethodBuilder methodBuilder;

  public ClassGenerator(SNode boundedContext, SModel cqrsModel) {
    this.boundedContext = boundedContext;
    this.cqrsModel = cqrsModel;
    this.settings = BoundedContext__BehaviorDescriptor.generationSettingsOrDefault_id3fVLq_r6vtd.invoke(boundedContext);
    this.parameterBuilder = new ParameterBuilder(boundedContext);
    this.methodBuilder = new MethodBuilder(boundedContext);
  }

  public void addToModel(SNode node) {
    SLinkOperations.setTarget(node, LINKS.boundedContext$bmqW, boundedContext);
    SModelOperations.addRootNode(cqrsModel, node);
  }

  public void generate() {
    generateValueObjects();
    generateDtoRelatedClasses();
    generateEntities();
    generateAggregateRelatedClasses();
    generateCommandRelatedClasses();
    generateEventRelatedClasses();
    generateQueryRelatedClasses();
  }


  private void generateValueObjects() {
    Sequence.fromIterable(BoundedContext__BehaviorDescriptor.valueObjects_id7fqk8p3Ma$i.invoke(boundedContext)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode valueObject) {
        SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea747fb3aL, "CQRS.Generation.structure.ValueObjectOutput"));
        SLinkOperations.setTarget(node, LINKS.valueObject$m4SI, valueObject);

        Iterable<SNode> parameters = ListSequence.fromList(SLinkOperations.getChildren(valueObject, LINKS.parameters$t6h4)).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return parameterBuilder.build(it);
          }
        });

        ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.parameters$KEwk)).addSequence(Sequence.fromIterable(parameters));
        ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$H7gw)).addSequence(Sequence.fromIterable(ValueObject__BehaviorDescriptor.methods_idoGImgOs5tY.invoke(valueObject)).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return methodBuilder.with(it).build();
          }
        }));
        addToModel(node);
      }
    });
  }

  private void generateEntities() {
    Iterable<SNode> entities = BoundedContext__BehaviorDescriptor.entities_id7fqk8p41AIx.invoke(boundedContext);

    if (Sequence.fromIterable(entities).isNotEmpty()) {
      addToModel(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1aadd00b90a297fL, "CQRS.Generation.structure.EntityBaseClassOutput")));
    }

    Sequence.fromIterable(entities).visitAll(new IVisitor<SNode>() {
      public void visit(SNode entity) {
        SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea749033fL, "CQRS.Generation.structure.EntityOutput"));
        SLinkOperations.setTarget(node, LINKS.entity$OPtA, entity);
        ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$j5Ku)).addSequence(Sequence.fromIterable(createEntityMethods(entity)));
        ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.parameters$j0A8)).addSequence(Sequence.fromIterable(createEntityParameters(entity)));
        addToModel(node);
      }
    });
  }

  private Iterable<SNode> createEntityMethods(SNode entity) {
    Iterable<SNode> propertyMethods = Sequence.fromIterable(Entity__BehaviorDescriptor.getterProperties_id6ERg2Uo689.invoke(entity)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return methodBuilder.named("get" + StringUtil.firstToUpper(SPropertyOperations.getString(it, PROPS.name$MnvL))).setReturnType(SLinkOperations.getTarget(it, LINKS.type$AxAW)).withProperty(it).build();
      }
    });

    Iterable<SNode> definedMethods = Sequence.fromIterable(Entity__BehaviorDescriptor.methods_id3DbZR$NYdN7.invoke(entity)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return methodBuilder.with(it).build();
      }
    });

    return Sequence.fromIterable(propertyMethods).union(Sequence.fromIterable(definedMethods));
  }

  private Iterable<SNode> createEntityParameters(SNode entity) {
    SNode idParameter = parameterBuilder.with("id", SNodeOperations.copyNode(SLinkOperations.getTarget(entity, LINKS.idType$P983))).hideModifiers(true).build();

    Iterable<SNode> parameters = ListSequence.fromList(SLinkOperations.getChildren(entity, LINKS.parameters$t6h4)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return parameterBuilder.build(it);
      }
    });

    return ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<SNode>(), idParameter)).union(Sequence.fromIterable(parameters));
  }





  private void generateCommandRelatedClasses() {
    addToModel(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea780bf2eL, "CQRS.Generation.structure.CommandInterfaceOutput")));

    SNode commandSettings = GenerationSettings__BehaviorDescriptor.getCommandSettingsOrDefault_idomljbyXJBR.invoke(settings);
    SEnumerationLiteral handlingType = SPropertyOperations.getEnum(CommandGenerationSettings__BehaviorDescriptor.getCommandHandlingSettingOrDefault_id3GrpC3f2UKo.invoke(commandSettings), PROPS.handlingType$lxKE);

    Iterable<SNode> commandContainers = BoundedContext__BehaviorDescriptor.commandContainers_idawtshknSQ0.invoke(boundedContext);
    Iterable<SNode> separateCommands = BoundedContext__BehaviorDescriptor.separateCommands_id51Z40VCMoX_.invoke(boundedContext);
    List<SNode> commandsToGenerateHandlerOrGroupingFor = CollectionUtils.listOf(separateCommands);

    Sequence.fromIterable(separateCommands).visitAll(new IVisitor<SNode>() {
      public void visit(SNode command) {
        addToModel(createCommand(command));
      }
    });

    if (SEnumOperations.isMember(handlingType, 0x6165532e273c8c7L) || Sequence.fromIterable(commandContainers).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (boolean) CommandContainer__BehaviorDescriptor.isAggregateCommandHandler_id51Z40V$BJAY.invoke(it);
      }
    })) {
      addToModel(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea780bf2fL, "CQRS.Generation.structure.CommandHandlerInterfaceOutput")));
    }

    for (SNode commandContainer : commandContainers) {
      Iterable<SNode> containerCommands = CommandContainer__BehaviorDescriptor.commands_idoGImgOKxc1.invoke(commandContainer);
      SNode wrapper = null;

      if ((boolean) CommandContainer__BehaviorDescriptor.isAggregateCommandHandler_id51Z40V$BJAY.invoke(commandContainer)) {
        wrapper = createCommandWrapperCommandHandler(commandContainer);
        addToModel(wrapper);
      } else {
        Sequence.fromIterable(containerCommands).visitAll(new IVisitor<SNode>() {
          public void visit(SNode command) {
            addToModel(createCommand(command));
          }
        });
      }

      if ((boolean) CommandContainer__BehaviorDescriptor.isCommandsBlock_id1LTEHzOe0y.invoke(commandContainer)) {
        ListSequence.fromList(commandsToGenerateHandlerOrGroupingFor).addSequence(Sequence.fromIterable(containerCommands));
        continue;
      }

      if ((wrapper != null)) {
        generateCommandWrapperCommandHandler(wrapper);
      } else {
        generateGroupedCommandHandler(commandContainer);
      }
    }

    if (SEnumOperations.isMember(handlingType, 0x6165532e273c8c7L)) {
      ListSequence.fromList(commandsToGenerateHandlerOrGroupingFor).visitAll(new IVisitor<SNode>() {
        public void visit(SNode command) {
          generateSeparatedCommandHandler(command);
        }
      });
      return;
    }

    Iterable<SNode> requiredRepositories = ListSequence.fromList(commandsToGenerateHandlerOrGroupingFor).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return Sequence.fromIterable(IComponentWithRepositoryReferences__BehaviorDescriptor.repositoryReferencesIncludingParent_id3fVLq_tWtGK.invoke(it)).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return (SNode) IRepositoryReference__BehaviorDescriptor.getRepository_id5jZDGTil89u.invoke(it);
          }
        });
      }
    }).distinct();


    SNode commandContainer = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2a075c454595567L, "CQRS.structure.CommandContainer"));
    IComponentWithNamePlaceholder__BehaviorDescriptor.setName_id2RbvdOMpYd2.invoke(commandContainer, DependencyUtils.GROUPED_COMMAND_HANDLER_NAME);
    IComponentWithRepositoryReferences__BehaviorDescriptor.addReferences_id5jZDGTikSQJ.invoke(commandContainer, requiredRepositories);
    SPropertyOperations.setEnum(commandContainer, PROPS.type$SAFo, 0x71e6ab63d0d883L, "CommandHandler");
    ListSequence.fromList(SLinkOperations.getChildren(commandContainer, LINKS.components$95b6)).addSequence(ListSequence.fromList(commandsToGenerateHandlerOrGroupingFor));
    ListSequence.fromList(SLinkOperations.getChildren(boundedContext, LINKS.components$8ymK)).addElement(commandContainer);
    generateGroupedCommandHandler(commandContainer);
  }

  private SNode createCommand(SNode command) {
    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea75e79ccL, "CQRS.Generation.structure.CommandOutput"));
    SLinkOperations.setTarget(node, LINKS.command$mcVL, command);

    Iterable<SNode> parameters = ListSequence.fromList(SLinkOperations.getChildren(command, LINKS.parameters$t6h4)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return parameterBuilder.build(it);
      }
    });

    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.parameters$bvjF)).addSequence(Sequence.fromIterable(parameters));
    SLinkOperations.setTarget(node, LINKS.boundedContext$bmqW, boundedContext);
    return node;
  }

  private SNode createCommandWrapperCommandHandler(SNode container) {
    SNode substitudeCommand = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e243eL, "CQRS.structure.Command"));
    SPropertyOperations.set(substitudeCommand, PROPS.name$MnvL, SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(container, LINKS.aggregateReference$V1gV), LINKS.aggregate$D_P$), PROPS.name$MnvL) + "Command");

    SNode wrapper = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x7849637c48be76e0L, "CQRS.Generation.structure.CommandWrapperInterfaceOutput"));
    ListSequence.fromList(SLinkOperations.getChildren(wrapper, LINKS.wrappedCommands$jiEM)).addSequence(Sequence.fromIterable(CommandContainer__BehaviorDescriptor.commands_idoGImgOKxc1.invoke(container)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return createCommand(it);
      }
    }));
    SLinkOperations.setTarget(wrapper, LINKS.substitudeCommand$jirL, substitudeCommand);
    return wrapper;
  }

  private void generateSeparatedCommandHandler(SNode command) {
    SNode handleMethod = methodBuilder.named("handle").isOverriding(true).addParameter("command", Command__BehaviorDescriptor.toReference_id7IRUqbcjVfX.invoke(command)).build();

    SNode handler = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488ae1ebf3L, "CQRS.Generation.structure.CommandHandlerSeparatedOutput"));
    SLinkOperations.setTarget(handler, LINKS.command$Ua6h, command);
    ListSequence.fromList(SLinkOperations.getChildren(handler, LINKS.methods$7LVc)).addElement(handleMethod);
    ListSequence.fromList(SLinkOperations.getChildren(handler, LINKS.parameters$wYju)).addSequence(Sequence.fromIterable(createRepositoryParametersForChild(command)));
    addToModel(handler);
  }

  private void generateGroupedCommandHandler(SNode container) {
    SNode groupedHandler = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a9591d98baL, "CQRS.Generation.structure.CommandHandlerGroupedOutput"));
    SLinkOperations.setTarget(groupedHandler, LINKS.container$uWWL, container);

    Iterable<SNode> handleMethods = Sequence.fromIterable(CommandContainer__BehaviorDescriptor.commands_idoGImgOKxc1.invoke(container)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode command) {
        return methodBuilder.named("handle").isOverriding(true).addParameter("command", Command__BehaviorDescriptor.toReference_id7IRUqbcjVfX.invoke(command)).build();
      }
    });

    ListSequence.fromList(SLinkOperations.getChildren(groupedHandler, LINKS.methods$xhyf)).addSequence(Sequence.fromIterable(handleMethods));
    ListSequence.fromList(SLinkOperations.getChildren(groupedHandler, LINKS.parameters$KWzU)).addSequence(Sequence.fromIterable(createRepositoryParametersForParent(container)));
    addToModel(groupedHandler);

    SNode groupedHandlerInterface = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a959da566bL, "CQRS.Generation.structure.CommandHandlerGroupedInterfaceOutput"));
    SLinkOperations.setTarget(groupedHandlerInterface, LINKS.container$3Wrh, container);

    Iterable<SNode> handleMethodsOfInterface = Sequence.fromIterable(handleMethods).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return methodBuilder.with_(it).isInInterface(true).isOverriding(false).build();
      }
    });

    ListSequence.fromList(SLinkOperations.getChildren(groupedHandlerInterface, LINKS.methods$s3XL)).addSequence(Sequence.fromIterable(handleMethodsOfInterface));
    addToModel(groupedHandlerInterface);
  }

  private void generateCommandWrapperCommandHandler(SNode wrapper) {
    SNode handleMethod = methodBuilder.named("handle").isOverriding(true).addParameter("command", Command__BehaviorDescriptor.toReference_id7IRUqbcjVfX.invoke(SLinkOperations.getTarget(wrapper, LINKS.substitudeCommand$jirL))).build();

    Iterable<SNode> privateHandleMethods = ListSequence.fromList(SLinkOperations.getChildren(wrapper, LINKS.wrappedCommands$jiEM)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode g_command) {
        return methodBuilder.named("handle").withPrivateModifier().addParameter("command", Command__BehaviorDescriptor.toReference_id7IRUqbcjVfX.invoke(SLinkOperations.getTarget(g_command, LINKS.command$mcVL))).build();
      }
    });

    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488ae1ebf3L, "CQRS.Generation.structure.CommandHandlerSeparatedOutput"));
    SLinkOperations.setTarget(node, LINKS.command$Ua6h, SLinkOperations.getTarget(wrapper, LINKS.substitudeCommand$jirL));
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$7LVc)).addElement(handleMethod);
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$7LVc)).addSequence(Sequence.fromIterable(privateHandleMethods));
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.parameters$wYju)).addSequence(Sequence.fromIterable(createRepositoryParametersForChildren(SLinkOperations.collect(SLinkOperations.getChildren(wrapper, LINKS.wrappedCommands$jiEM), LINKS.command$mcVL))));
    addToModel(node);
  }




  private void generateAggregateRelatedClasses() {
    generateAggregateBaseClasses();

    SNode eventSettings = GenerationSettings__BehaviorDescriptor.getEventSettingsOrDefault_idomljbyXOol.invoke(settings);
    SEnumerationLiteral handlingtype = SPropertyOperations.getEnum(EventGenerationSettings__BehaviorDescriptor.getEventHandlingSettingOrDefault_id3GrpC3f2SUA.invoke(eventSettings), PROPS.handlingtype$zVu_);

    final List<SNode> separateEvents = ListSequence.fromList(new ArrayList<SNode>());

    Sequence.fromIterable(BoundedContext__BehaviorDescriptor.aggregateRoots_id7fqk8p3M$40.invoke(boundedContext)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode aggregateRoot) {
        SNode eventContainer = AggregateRoot__BehaviorDescriptor.eventContainer_id5jZDGTfSR6V.invoke(aggregateRoot);
        Iterable<SNode> containerEvents = EventContainer__BehaviorDescriptor.events_idoGImgOKqqA.invoke(eventContainer);
        String eventWrapperName = SPropertyOperations.getString(aggregateRoot, PROPS.name$MnvL) + "Event";

        SNode wrapperCommandSide = createEventWrapperInterface(eventWrapperName, containerEvents, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd9954889e49a89L, "CQRS.Generation.structure.ApplicationSide"), 0x2cd9954889e49a8aL, "COMMAND_SIDE"));
        addToModel(wrapperCommandSide);

        SNode wrapperQuerySide = createEventWrapperInterface(eventWrapperName, containerEvents, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd9954889e49a89L, "CQRS.Generation.structure.ApplicationSide"), 0x2cd9954889e49a8bL, "QUERY_SIDE"));
        addToModel(wrapperQuerySide);

        if ((boolean) EventContainer__BehaviorDescriptor.isEventHandler_id5jZDGTdmWlV.invoke(eventContainer)) {
          generateEventWrapperEventHandler(wrapperQuerySide);
        } else {
          ListSequence.fromList(separateEvents).addSequence(Sequence.fromIterable(containerEvents));
        }

        generateAggregate(aggregateRoot, wrapperCommandSide);
      }
    });

    if (SEnumOperations.isMember(handlingtype, 0x6165532e273c8bcL)) {
      ListSequence.fromList(separateEvents).visitAll(new IVisitor<SNode>() {
        public void visit(SNode event) {
          generateSeparatedEventHandler(event);
        }
      });
    } else {
      generateGroupedEventHandlerFor(separateEvents);
    }
  }

  private void generateAggregateBaseClasses() {
    addToModel(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xe220c2db707352eL, "CQRS.Generation.structure.AggregateInterfaceOutput")));
    addToModel(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xe220c2db7073531L, "CQRS.Generation.structure.EventAggregateInterfaceOutput")));
    addToModel(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488a09774fL, "CQRS.Generation.structure.EventAggregateBaseClassOutput")));
    addToModel(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1bL, "CQRS.Generation.structure.AggregateRepositoryInterfaceOutput")));
    addToModel(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1cL, "CQRS.Generation.structure.AggregateIdRepositoryInterfaceOutput")));
  }

  private void generateAggregate(SNode aggregateRoot, SNode eventWrapper) {
    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea7491039L, "CQRS.Generation.structure.AggregateOutput"));
    SLinkOperations.setTarget(node, LINKS.aggregate$k52A, aggregateRoot);
    SLinkOperations.setTarget(node, LINKS.eventWrapper$57wl, eventWrapper);
    setAggregateParameters(node);
    setAggregateMethods(node);
    addToModel(node);
    generateAggregateConcreteInterface(node);
    generateAggregateRepositoryClasses(aggregateRoot);
  }

  private void setAggregateParameters(SNode node) {
    SNode idParameter = parameterBuilder.with("id", SNodeOperations.copyNode(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.aggregate$k52A), LINKS.idType$EoIp))).hideModifiers(true).build();

    Iterable<SNode> parameters = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.aggregate$k52A), LINKS.parameters$t6h4)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return parameterBuilder.with(it).setPrivate().build();
      }
    });

    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.parameters$tIoa)).addElement(idParameter);
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.parameters$tIoa)).addSequence(Sequence.fromIterable(parameters));
  }

  private void setAggregateMethods(SNode node) {
    Iterable<SNode> propertyMethods = Sequence.fromIterable(AggregateRoot__BehaviorDescriptor.getterProperties_id1DRRhzvhKKB.invoke(SLinkOperations.getTarget(node, LINKS.aggregate$k52A))).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return methodBuilder.named("get" + StringUtil.firstToUpper(SPropertyOperations.getString(it, PROPS.name$MnvL))).isOverriding(true).setReturnType(SLinkOperations.getTarget(it, LINKS.type$AxAW)).withProperty(it).build();
      }
    });

    Iterable<SNode> aggregateDefinedMethods = Sequence.fromIterable(AggregateRoot__BehaviorDescriptor.methods_id3DbZR$NYuVI.invoke(SLinkOperations.getTarget(node, LINKS.aggregate$k52A))).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return methodBuilder.with(it).isOverriding(SEnumOperations.isMember(SPropertyOperations.getEnum(it, PROPS.modifier$TTVg), 0x2a075c4547294cdL)).build();
      }
    });

    SNode handleEventMethod = methodBuilder.named("handleEvent").isOverriding(true).addParameter("event", Event__BehaviorDescriptor.toReference_id7IRUqbcjT6P.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.eventWrapper$57wl), LINKS.substitudeEvent$ZIb0))).build();

    Iterable<SNode> individualHandleMethods = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.eventWrapper$57wl), LINKS.wrappedEvents$17E6)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return methodBuilder.named("handle").withPrivateModifier().addParameter("event", Event__BehaviorDescriptor.toReference_id7IRUqbcjT6P.invoke(SLinkOperations.getTarget(it, LINKS.event$tUVh))).build();
      }
    });

    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$L6U8)).addSequence(Sequence.fromIterable(propertyMethods));
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$L6U8)).addSequence(Sequence.fromIterable(aggregateDefinedMethods));
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$L6U8)).addElement(handleEventMethod);
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$L6U8)).addSequence(Sequence.fromIterable(individualHandleMethods));
  }


  private void generateAggregateConcreteInterface(SNode g_aggregate) {
    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18dc10802cL, "CQRS.Generation.structure.AggregateConcreteInterfaceOutput"));
    SLinkOperations.setTarget(node, LINKS.g_aggregate$Xf87, g_aggregate);

    Iterable<SNode> propertyMethods = Sequence.fromIterable(AggregateRoot__BehaviorDescriptor.getterProperties_id1DRRhzvhKKB.invoke(SLinkOperations.getTarget(g_aggregate, LINKS.aggregate$k52A))).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return methodBuilder.named("get" + StringUtil.firstToUpper(SPropertyOperations.getString(it, PROPS.name$MnvL))).isInInterface(true).setReturnType(SLinkOperations.getTarget(it, LINKS.type$AxAW)).withProperty(it).build();
      }
    });

    Iterable<SNode> methods = Sequence.fromIterable(AggregateRoot__BehaviorDescriptor.publicMethods_id1DRRhzwmZtn.invoke(SLinkOperations.getTarget(g_aggregate, LINKS.aggregate$k52A))).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return methodBuilder.with(it).isInInterface(true).forCommandSide().build();
      }
    });

    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$YQSw)).addSequence(Sequence.fromIterable(propertyMethods));
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$YQSw)).addSequence(Sequence.fromIterable(methods));
    addToModel(node);
  }

  private void generateAggregateRepositoryClasses(SNode aggregate) {
    if (!((boolean) AggregateRoot__BehaviorDescriptor.hasDefinedRepository_id2Bsub$KTQ$T.invoke(aggregate))) {
      SNode repository = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL, "CQRS.structure.AggregateRootRepository"));
      SLinkOperations.setTarget(repository, LINKS.aggregateReference$1ZNc, AggregateRoot__BehaviorDescriptor.toReference_id1DRRhzv4xIO.invoke(aggregate));
      SPropertyOperations.set(repository, PROPS.isIdRepository$Umet, true);
      ListSequence.fromList(SLinkOperations.getChildren(boundedContext, LINKS.components$8ymK)).addElement(repository);
    }

    SNode repository = AggregateRoot__BehaviorDescriptor.repository_id3AwzpICw894.invoke(aggregate);
    generateConcreteAggregateRepositoryInterface(repository);
    generateAggregateRepositoryImplementation(repository);
  }

  private void generateAggregateRepositoryImplementation(SNode repository) {
    SNode aggregate = SLinkOperations.getTarget(SLinkOperations.getTarget(repository, LINKS.aggregateReference$1ZNc), LINKS.aggregate$D_P$);

    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1dL, "CQRS.Generation.structure.AggregateRepositoryOutput"));
    SLinkOperations.setTarget(node, LINKS.repository$o2pF, repository);

    if (SPropertyOperations.getBoolean(repository, PROPS.isIdRepository$Umet)) {
      SNode getByIdMethod = methodBuilder.named("getById").setReturnType(AggregateRoot__BehaviorDescriptor.toReference_id1DRRhzv4xIO.invoke(aggregate)).isOverriding(true).addParameter("id", SLinkOperations.getTarget(aggregate, LINKS.idType$EoIp)).build();

      ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$TSUr)).addElement(getByIdMethod);
    }

    SNode addMethod = methodBuilder.named("add").isOverriding(true).addParameter("aggregate", AggregateRoot__BehaviorDescriptor.toReference_id1DRRhzv4xIO.invoke(aggregate)).build();

    SNode saveMethod = methodBuilder.named("save").isOverriding(true).addParameter("aggregate", AggregateRoot__BehaviorDescriptor.toReference_id1DRRhzv4xIO.invoke(aggregate)).build();

    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$TSUr)).addElement(addMethod);
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$TSUr)).addElement(saveMethod);

    Iterable<SNode> methods = Sequence.fromIterable(AggregateRootRepository__BehaviorDescriptor.publicMethods_id1DRRhzvh2wu.invoke(repository)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return methodBuilder.with(it).isOverriding(true).build();
      }
    });

    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$TSUr)).addSequence(Sequence.fromIterable(methods));

    addToModel(node);
  }

  private void generateConcreteAggregateRepositoryInterface(SNode repository) {
    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1eL, "CQRS.Generation.structure.AggregateConcreteRepositoryInterfaceOutput"));
    SLinkOperations.setTarget(node, LINKS.repository$6gjW, repository);

    Iterable<SNode> methods = Sequence.fromIterable(AggregateRootRepository__BehaviorDescriptor.publicMethods_id1DRRhzvh2wu.invoke(repository)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return methodBuilder.with(it).isInInterface(true).build();
      }
    });

    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$4Olc)).addSequence(Sequence.fromIterable(methods));
    addToModel(node);
  }



  private void generateDtoRelatedClasses() {
    final Iterable<SNode> implicitRules = BoundedContext__BehaviorDescriptor.dtoImplicitDataTypeRules_id4V91Il3EwfP.invoke(boundedContext);

    Sequence.fromIterable(BoundedContext__BehaviorDescriptor.dtos_id7fqk8p4cIWm.invoke(boundedContext)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode dto) {
        final Iterable<SNode> explicitRules = IDtoDerivation__BehaviorDescriptor.findUsedTypeRules_id3L7_qKL_k$z.invoke(dto);
        Iterable<SNode> applicableImplicitRules = Sequence.fromIterable(implicitRules).where(new IWhereFilter<SNode>() {
          public boolean accept(final SNode implicit) {
            return !(Sequence.fromIterable(explicitRules).any(new IWhereFilter<SNode>() {
              public boolean accept(SNode explicit) {
                return (boolean) IDataType__BehaviorDescriptor.hasSameDatatype_id3DbZR$NHBwn.invoke(SLinkOperations.getTarget(implicit, LINKS.fromType$BfIG), SLinkOperations.getTarget(explicit, LINKS.fromType$BfIG));
              }
            }));
          }
        });
        final Iterable<SNode> usedRules = Sequence.fromIterable(explicitRules).union(Sequence.fromIterable(applicableImplicitRules));

        Iterable<SNode> derivedParameters = Sequence.fromIterable(IDtoDerivation__BehaviorDescriptor.getUsedVariableWrappers_id1vyzkEMwXLH.invoke(dto)).select(new ISelector<VariableWrapper, SNode>() {
          public SNode select(VariableWrapper wrapper) {
            SNode wrappedVariable = wrapper.getWrappedVariable();

            SNode mappedParameter = IVariable__BehaviorDescriptor.toParameter_id4V91Il8jc9j.invoke(wrappedVariable);
            SPropertyOperations.set(mappedParameter, PROPS.name$MnvL, wrapper.getVariableName());
            replaceParameterSubstitudeType(mappedParameter, wrappedVariable);
            replaceDerivableReferences(mappedParameter);
            useDtoDataTypeRulesFor(SNodeOperations.copyNode(mappedParameter), usedRules);
            return mappedParameter;
          }
        });

        ListSequence.fromList(SLinkOperations.getChildren(dto, LINKS.parameters$t6h4)).addSequence(Sequence.fromIterable(derivedParameters));

        SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea742a568L, "CQRS.Generation.structure.DtoOutput"));
        SLinkOperations.setTarget(node, LINKS.dto$tTHJ, dto);
        ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.parameters$X2kE)).addSequence(ListSequence.fromList(SLinkOperations.getChildren(dto, LINKS.parameters$t6h4)).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return parameterBuilder.build(it);
          }
        }));
        addToModel(node);
      }
    });

    generateDtoRepositories();
  }

  private void replaceDerivableReferences(SNode parameter) {
    ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(parameter, LINKS.type$AxAW), CONCEPTS.IDtoDerivableReference$dn, true, new SAbstractConcept[]{})).visitAll(new IVisitor<SNode>() {
      public void visit(SNode derivableReference) {
        SNode derivedDto = BoundedContext__BehaviorDescriptor.findDerivedDtoOf_id4yIxVQ$wmm6.invoke(boundedContext, IDtoDerivableReference__BehaviorDescriptor.getDtoDerivable_id4LpUh3T0tIy.invoke(derivableReference));
        SNodeOperations.replaceWithAnother(derivableReference, Dto__BehaviorDescriptor.toReference_id4yIxVQ$QHJK.invoke(derivedDto));
      }
    });
  }

  private void replaceParameterSubstitudeType(SNode newParameter, SNode originalVariable) {
    if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(newParameter, LINKS.type$AxAW), CONCEPTS.SubstitudeDataType$Hl))) {
      return;
    }
    SNode derivable = SNodeOperations.getNodeAncestor(originalVariable, CONCEPTS.IDtoDerivable$t1, true, false);
    if ((derivable == null)) {
      return;
    }

    {
      final SNode aggregate = derivable;
      if (SNodeOperations.isInstanceOf(aggregate, CONCEPTS.AggregateRoot$Q_)) {
        if (!(Objects.equals(originalVariable, AggregateRoot__BehaviorDescriptor.getIdParameter_id6Yyl_4kT$ww.invoke(aggregate)))) {
          return;
        }
        SNodeOperations.replaceWithAnother(SLinkOperations.getTarget(newParameter, LINKS.type$AxAW), SNodeOperations.copyNode(SLinkOperations.getTarget(aggregate, LINKS.idType$EoIp)));
      }
    }

    {
      final SNode entity = derivable;
      if (SNodeOperations.isInstanceOf(entity, CONCEPTS.Entity$lp)) {
        if (!(Objects.equals(originalVariable, Entity__BehaviorDescriptor.getIdParameter_id6Yyl_4kTXtL.invoke(entity)))) {
          return;
        }
        SNodeOperations.replaceWithAnother(SLinkOperations.getTarget(newParameter, LINKS.type$AxAW), SNodeOperations.copyNode(SLinkOperations.getTarget(entity, LINKS.idType$P983)));
      }
    }
  }

  private void useDtoDataTypeRulesFor(final SNode parameter, Iterable<SNode> rules) {
    Sequence.fromIterable(rules).visitAll(new IVisitor<SNode>() {
      public void visit(final SNode rule) {
        if (SEnumOperations.isMember(SPropertyOperations.getEnum(rule, PROPS.applicability$SvOP), 0x3c4795ac30c0ec16L) && (boolean) IDataType__BehaviorDescriptor.hasSameDatatype_id3DbZR$NHBwn.invoke(SLinkOperations.getTarget(parameter, LINKS.type$AxAW), SLinkOperations.getTarget(rule, LINKS.fromType$BfIG))) {
          SLinkOperations.setTarget(parameter, LINKS.type$AxAW, SNodeOperations.copyNode(SLinkOperations.getTarget(rule, LINKS.toType$BgcI)));
        }

        if (SEnumOperations.isMember(SPropertyOperations.getEnum(rule, PROPS.applicability$SvOP), 0x3c4795ac30c0ec17L)) {
          Sequence.fromIterable(findMatchingTypeInChildren(SLinkOperations.getTarget(parameter, LINKS.type$AxAW), SLinkOperations.getTarget(rule, LINKS.fromType$BfIG))).visitAll(new IVisitor<SNode>() {
            public void visit(SNode type) {
              SNodeOperations.replaceWithAnother(type, SNodeOperations.copyNode(SLinkOperations.getTarget(rule, LINKS.toType$BgcI)));
            }
          });
        }
      }
    });
  }

  private Iterable<SNode> findMatchingTypeInChildren(SNode type, final SNode typeToMatch) {
    if ((boolean) IDataType__BehaviorDescriptor.hasSameDatatype_id3DbZR$NHBwn.invoke(type, typeToMatch)) {
      return ListSequence.fromListAndArray(new ArrayList<SNode>(), type);
    }
    return Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getChildren(type), CONCEPTS.IDataType$Sx)).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode child) {
        return findMatchingTypeInChildren(child, typeToMatch);
      }
    });
  }

  private void generateDtoRepositories() {
    Sequence.fromIterable(BoundedContext__BehaviorDescriptor.dtoRepositories_id1WhJCpUS1If.invoke(boundedContext)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode repository) {
        SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a971798ebaL, "CQRS.Generation.structure.DtoRepositoryOutput"));
        SLinkOperations.setTarget(node, LINKS.repository$3egk, repository);

        Iterable<SNode> queryMethods = createQueryMethodRepresentations(DtoRepository__BehaviorDescriptor.getEmbeddedQueries_id3fVLq_LpTMg.invoke(repository));

        Iterable<SNode> definedMethods = Sequence.fromIterable(DtoRepository__BehaviorDescriptor.methods_id3fVLq_LVrz2.invoke(repository)).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return methodBuilder.with(it).isOverriding(true).build();
          }
        });

        ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$3eIm)).addSequence(Sequence.fromIterable(queryMethods));
        ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$3eIm)).addSequence(Sequence.fromIterable(definedMethods));
        addToModel(node);


        SNode interfaceNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a971798ebdL, "CQRS.Generation.structure.DtoRepositoryInterfaceOutput"));
        SLinkOperations.setTarget(interfaceNode, LINKS.repository$5IKt, repository);

        Iterable<SNode> interfaceMethods = ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$3eIm)).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return methodBuilder.with_(it).isInInterface(true).isOverriding(false).build();
          }
        });

        ListSequence.fromList(SLinkOperations.getChildren(interfaceNode, LINKS.methods$5H7m)).addSequence(Sequence.fromIterable(interfaceMethods));
        addToModel(interfaceNode);
      }
    });
  }


  private void generateEventRelatedClasses() {
    addToModel(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xe220c2db6f921b9L, "CQRS.Generation.structure.EventHandlerInterfaceOutput")));
    generateEventInterface(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd9954889e49a89L, "CQRS.Generation.structure.ApplicationSide"), 0x2cd9954889e49a8aL, "COMMAND_SIDE"));
    generateEventInterface(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd9954889e49a89L, "CQRS.Generation.structure.ApplicationSide"), 0x2cd9954889e49a8bL, "QUERY_SIDE"));
  }

  private SNode createEvent(SNode event, SEnumerationLiteral side) {
    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea772864aL, "CQRS.Generation.structure.EventOutput"));
    SLinkOperations.setTarget(node, LINKS.event$tUVh, event);
    SPropertyOperations.setEnum(node, PROPS.applicationSide$oDHK, side);
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.parameters$gIGH)).addSequence(ListSequence.fromList(SLinkOperations.getChildren(event, LINKS.parameters$t6h4)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return parameterBuilder.build(it);
      }
    }));
    SLinkOperations.setTarget(node, LINKS.boundedContext$bmqW, boundedContext);
    return node;
  }

  private SNode createEventWrapperInterface(String name, Iterable<SNode> events, final SEnumerationLiteral side) {
    SNode substitudeEvent = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2438L, "CQRS.structure.Event"));
    SPropertyOperations.set(substitudeEvent, PROPS.name$MnvL, name);

    SNode wrapper = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db67c7adL, "CQRS.Generation.structure.EventWrapperInterfaceOutput"));
    SLinkOperations.setTarget(wrapper, LINKS.substitudeEvent$ZIb0, substitudeEvent);
    SPropertyOperations.setEnum(wrapper, PROPS.appicationSide$PR1K, side);
    ListSequence.fromList(SLinkOperations.getChildren(wrapper, LINKS.wrappedEvents$17E6)).addSequence(Sequence.fromIterable(events).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return createEvent(it, side);
      }
    }));
    return wrapper;
  }

  private void generateSeparatedEventHandler(SNode event) {
    SNode handleMethod = methodBuilder.named("handle").addParameter("event", Event__BehaviorDescriptor.toReference_id7IRUqbcjT6P.invoke(event)).isOverriding(true).build();

    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18daf28d4eL, "CQRS.Generation.structure.EventHandlerSeparatedOutput"));
    SLinkOperations.setTarget(node, LINKS.event$_EWX, event);
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$uVEc)).addElement(handleMethod);
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.parameters$DNXU)).addSequence(Sequence.fromIterable(createRepositoryParametersForChild(event)));
    addToModel(node);
  }

  private void generateEventInterface(SEnumerationLiteral side) {
    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xe220c2db6f921b8L, "CQRS.Generation.structure.EventInterfaceOutput"));
    SPropertyOperations.setEnum(node, PROPS.applicationSide$_6r5, side);
    addToModel(node);
  }

  private void generateEventWrapperEventHandler(SNode wrapper) {
    SNode handleMethod = methodBuilder.named("handle").addParameter("event", Event__BehaviorDescriptor.toReference_id7IRUqbcjT6P.invoke(SLinkOperations.getTarget(wrapper, LINKS.substitudeEvent$ZIb0))).isOverriding(true).build();

    Iterable<SNode> privateHandleMethods = ListSequence.fromList(SLinkOperations.getChildren(wrapper, LINKS.wrappedEvents$17E6)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode g_event) {
        return methodBuilder.named("handle").addParameter("event", Event__BehaviorDescriptor.toReference_id7IRUqbcjT6P.invoke(SLinkOperations.getTarget(g_event, LINKS.event$tUVh))).withPrivateModifier().build();
      }
    });

    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18daf28d4eL, "CQRS.Generation.structure.EventHandlerSeparatedOutput"));
    SLinkOperations.setTarget(node, LINKS.event$_EWX, SLinkOperations.getTarget(wrapper, LINKS.substitudeEvent$ZIb0));
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$uVEc)).addElement(handleMethod);
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$uVEc)).addSequence(Sequence.fromIterable(privateHandleMethods));
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.parameters$DNXU)).addSequence(Sequence.fromIterable(createRepositoryParametersForChildren(SLinkOperations.collect(SLinkOperations.getChildren(wrapper, LINKS.wrappedEvents$17E6), LINKS.event$tUVh))));
    addToModel(node);
  }

  private void generateGroupedEventHandlerFor(Iterable<SNode> events) {
    SNode groupedHandler = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18dbbe5dd0L, "CQRS.Generation.structure.EventHandlerGroupedOutput"));

    Iterable<SNode> eventHandlerMethods = Sequence.fromIterable(events).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode event) {
        return methodBuilder.named("handle").isOverriding(true).addParameter("event", Event__BehaviorDescriptor.toReference_id7IRUqbcjT6P.invoke(event)).build();
      }
    });

    ListSequence.fromList(SLinkOperations.getChildren(groupedHandler, LINKS.methods$9Lm4)).addSequence(Sequence.fromIterable(eventHandlerMethods));
    ListSequence.fromList(SLinkOperations.getChildren(groupedHandler, LINKS.parameters$RRO$)).addSequence(Sequence.fromIterable(createRepositoryParametersForChildren(events)));
    addToModel(groupedHandler);


    SNode groupedHandlerInterface = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a9664da00cL, "CQRS.Generation.structure.EventHandlerGroupedInterfaceOutput"));

    Iterable<SNode> eventHandlerInterfaceMethods = Sequence.fromIterable(eventHandlerMethods).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        SNode copy = SNodeOperations.copyNode(it);
        SPropertyOperations.set(copy, PROPS.isOverriding$_pUI, false);
        SPropertyOperations.set(copy, PROPS.isInInterface$qwbM, true);
        return copy;
      }
    });
    ListSequence.fromList(SLinkOperations.getChildren(groupedHandlerInterface, LINKS.methods$JWe)).addSequence(Sequence.fromIterable(eventHandlerInterfaceMethods));
    addToModel(groupedHandlerInterface);
  }


  private void generateQueryRelatedClasses() {
    SNode querySettings = GenerationSettings__BehaviorDescriptor.getQuerySettingsOrDefault_idomljbyXO_O.invoke(settings);
    SEnumerationLiteral queryHandlingType = SPropertyOperations.getEnum(QueryGenerationSettings__BehaviorDescriptor.getQueryHandlingSettingOrDefault_id3GrpC3f2Nth.invoke(querySettings), PROPS.handlingType$_h8g);
    boolean shouldGenerateQueryProcessor = SPropertyOperations.getBoolean(QueryGenerationSettings__BehaviorDescriptor.getQueryProcessingSettingOrDefault_id3GrpC3f2Q5D.invoke(querySettings), PROPS.useProcessingImplementation$lPWW);

    final List<SNode> queriesToCreateObjectsFor = Sequence.fromIterable(BoundedContext__BehaviorDescriptor.separateQueries_id3VGLvhEj6oe.invoke(boundedContext)).toListSequence();
    final List<SNode> queriesToGenerateHandlersFor = CollectionUtils.listOf(queriesToCreateObjectsFor);
    Iterable<SNode> queryContainers = BoundedContext__BehaviorDescriptor.queryContainers_id3DbZR$O3FhA.invoke(boundedContext);

    Sequence.fromIterable(queryContainers).visitAll(new IVisitor<SNode>() {
      public void visit(SNode queryContainer) {
        Iterable<SNode> queryContainerQueries = QueryContainer__BehaviorDescriptor.queries_id5SyewCaMpun.invoke(queryContainer);

        if ((boolean) QueryContainer__BehaviorDescriptor.isQueriesBlock_id6gxxZVtebNx.invoke(queryContainer)) {
          ListSequence.fromList(queriesToCreateObjectsFor).addSequence(Sequence.fromIterable(queryContainerQueries));
          ListSequence.fromList(queriesToGenerateHandlersFor).addSequence(Sequence.fromIterable(queryContainerQueries));
        }

        if ((boolean) QueryContainer__BehaviorDescriptor.isQueryHandler_id6gxxZVted_3.invoke(queryContainer)) {
          ListSequence.fromList(queriesToCreateObjectsFor).addSequence(Sequence.fromIterable(queryContainerQueries));
          generateQueryHandler(queryContainer);
        }

        if ((boolean) QueryContainer__BehaviorDescriptor.isQueryService_id6gxxZVteeje.invoke(queryContainer)) {
          generateQueryHandler(queryContainer);
        }
      }
    });

    if (ListSequence.fromList(queriesToCreateObjectsFor).isNotEmpty()) {
      addToModel(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x3b1b6680cf077f78L, "CQRS.Generation.structure.QueryInterfaceOutput")));
      ListSequence.fromList(queriesToCreateObjectsFor).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          generateQuery(it);
        }
      });
    }

    if (ListSequence.fromList(queriesToGenerateHandlersFor).isEmpty()) {
      return;
    }


    if (SEnumOperations.isMember(queryHandlingType, 0x6165532e273c8c1L)) {
      addToModel(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xe220c2db6fdd73aL, "CQRS.Generation.structure.QueryHandlerInterfaceOutput")));
      ListSequence.fromList(queriesToGenerateHandlersFor).visitAll(new IVisitor<SNode>() {
        public void visit(SNode query) {
          generateSeparatedQueryHandler(query);
        }
      });
    } else {
      generateGroupedQueryHandler(queriesToGenerateHandlersFor);
    }

    if (shouldGenerateQueryProcessor) {
      generateQueryProcessor(queriesToGenerateHandlersFor);
    }
  }

  private void generateQuery(SNode query) {
    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xa1fc5d1dac8a772L, "CQRS.Generation.structure.QueryOutput"));
    SLinkOperations.setTarget(node, LINKS.query$XyyR, query);
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.parameters$guoY)).addSequence(ListSequence.fromList(SLinkOperations.getChildren(query, LINKS.parameters$t6h4)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return parameterBuilder.build(it);
      }
    }));
    addToModel(node);
  }

  private void generateSeparatedQueryHandler(SNode query) {
    SNode handleMethod = methodBuilder.named("handle").isOverriding(true).setReturnType(SLinkOperations.getTarget(query, LINKS.returnType$WTqX)).addParameter("query", Query__BehaviorDescriptor.toReference_id5jZDGThYDzO.invoke(query)).build();

    SNode node = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db1da0fbL, "CQRS.Generation.structure.QueryHandlerSeparatedOutput"));
    SLinkOperations.setTarget(node, LINKS.query$ysaA, query);
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.methods$ysCC)).addElement(handleMethod);
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.parameters$FrbZ)).addSequence(Sequence.fromIterable(createRepositoryParametersForChild(query)));
    addToModel(node);
  }

  private void generateQueryHandler(SNode queryContainer) {
    SNode queryHandler = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a3L, "CQRS.Generation.structure.QueryHandlerGroupedOutput"));
    SLinkOperations.setTarget(queryHandler, LINKS.container$PNh7, queryContainer);
    ListSequence.fromList(SLinkOperations.getChildren(queryHandler, LINKS.parameters$HkDQ)).addSequence(Sequence.fromIterable(createRepositoryParametersForParent(queryContainer)));

    if ((boolean) QueryContainer__BehaviorDescriptor.isQueryHandler_id6gxxZVted_3.invoke(queryContainer)) {
      ListSequence.fromList(SLinkOperations.getChildren(queryHandler, LINKS.methods$HkbO)).addSequence(Sequence.fromIterable(createhandleQueryMethods(QueryContainer__BehaviorDescriptor.queries_id5SyewCaMpun.invoke(queryContainer))));
    }

    if ((boolean) QueryContainer__BehaviorDescriptor.isQueryService_id6gxxZVteeje.invoke(queryContainer)) {
      ListSequence.fromList(SLinkOperations.getChildren(queryHandler, LINKS.methods$HkbO)).addSequence(Sequence.fromIterable(createQueryMethodRepresentations(QueryContainer__BehaviorDescriptor.queries_id5SyewCaMpun.invoke(queryContainer))));
    }

    addToModel(queryHandler);


    SNode queryHandlerInterface = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a4L, "CQRS.Generation.structure.QueryHandlerGroupedInterfaceOutput"));
    SLinkOperations.setTarget(queryHandlerInterface, LINKS.container$PU53, queryContainer);

    Iterable<SNode> interfaceHandleMethods = ListSequence.fromList(SLinkOperations.getChildren(queryHandler, LINKS.methods$HkbO)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        SNode copy = SNodeOperations.copyNode(it);
        SPropertyOperations.set(copy, PROPS.isOverriding$_pUI, false);
        SPropertyOperations.set(copy, PROPS.isInInterface$qwbM, true);
        return copy;
      }
    });

    ListSequence.fromList(SLinkOperations.getChildren(queryHandlerInterface, LINKS.methods$HjIh)).addSequence(Sequence.fromIterable(interfaceHandleMethods));
    addToModel(queryHandlerInterface);
  }

  private void generateGroupedQueryHandler(Iterable<SNode> queries) {
    SNode generatedContainer = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3a4bff7934079ff4L, "CQRS.structure.QueryContainer"));
    IComponentWithNamePlaceholder__BehaviorDescriptor.setName_id2RbvdOMpYd2.invoke(generatedContainer, DependencyUtils.GROUPED_QUERY_HANDLER_NAME);
    SPropertyOperations.setEnum(generatedContainer, PROPS.type$7YBQ, 0x1f11be867ad316e8L, "QueryHandler");
    ListSequence.fromList(SLinkOperations.getChildren(generatedContainer, LINKS.components$Au_u)).addSequence(Sequence.fromIterable(queries).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.copyNode(it);
      }
    }));
    ListSequence.fromList(SLinkOperations.getChildren(boundedContext, LINKS.components$8ymK)).addElement(generatedContainer);

    SNode generatedHandler = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a3L, "CQRS.Generation.structure.QueryHandlerGroupedOutput"));
    SLinkOperations.setTarget(generatedHandler, LINKS.container$PNh7, generatedContainer);
    ListSequence.fromList(SLinkOperations.getChildren(generatedHandler, LINKS.parameters$HkDQ)).addSequence(Sequence.fromIterable(createRepositoryParametersForChildren(queries)));
    ListSequence.fromList(SLinkOperations.getChildren(generatedHandler, LINKS.methods$HkbO)).addSequence(Sequence.fromIterable(createhandleQueryMethods(queries)));
    addToModel(generatedHandler);

    SNode queryHandlerInterface = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a4L, "CQRS.Generation.structure.QueryHandlerGroupedInterfaceOutput"));
    SLinkOperations.setTarget(queryHandlerInterface, LINKS.container$PU53, generatedContainer);

    Iterable<SNode> generatedHandlerInterface = ListSequence.fromList(SLinkOperations.getChildren(generatedHandler, LINKS.methods$HkbO)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        SNode copy = SNodeOperations.copyNode(it);
        SPropertyOperations.set(copy, PROPS.isOverriding$_pUI, false);
        SPropertyOperations.set(copy, PROPS.isInInterface$qwbM, true);
        return copy;
      }
    });

    ListSequence.fromList(SLinkOperations.getChildren(queryHandlerInterface, LINKS.methods$HjIh)).addSequence(Sequence.fromIterable(generatedHandlerInterface));
    addToModel(queryHandlerInterface);
  }

  private void generateQueryProcessor(Iterable<SNode> queries) {
    addToModel(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x7849637c48cd1e4dL, "CQRS.Generation.structure.QueryProcessorImplOutput")));
    addToModel(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x7849637c48cd1e46L, "CQRS.Generation.structure.QueryHandlerContainerOutput")));
    addToModel(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x7849637c48cd1e4aL, "CQRS.Generation.structure.QueryHandlerContainerImplOutput")));

    SNode queryProcessor = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x7849637c48cd1e42L, "CQRS.Generation.structure.QueryProcessorOutput"));
    ListSequence.fromList(SLinkOperations.getChildren(queryProcessor, LINKS.queryReferences$fHmi)).addSequence(Sequence.fromIterable(queries).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return (SNode) Query__BehaviorDescriptor.toReference_id5jZDGThYDzO.invoke(it);
      }
    }));
    addToModel(queryProcessor);
  }

  private Iterable<SNode> createhandleQueryMethods(Iterable<SNode> queries) {
    return Sequence.fromIterable(queries).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode query) {
        return methodBuilder.named("handle").isOverriding(true).setReturnType(SLinkOperations.getTarget(query, LINKS.returnType$WTqX)).addParameter("query", Query__BehaviorDescriptor.toReference_id5jZDGThYDzO.invoke(query)).build();
      }
    });
  }

  private Iterable<SNode> createQueryMethodRepresentations(Iterable<SNode> queries) {
    return Sequence.fromIterable(queries).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode query) {
        return methodBuilder.named(StringUtil.firstToLower(SPropertyOperations.getString(query, PROPS.name$MnvL))).isOverriding(true).setReturnType(SLinkOperations.getTarget(query, LINKS.returnType$WTqX)).addParameters_(SLinkOperations.getChildren(query, LINKS.parameters$t6h4)).build();
      }
    });
  }


  /**
   * This method is for Commands, events and queries
   */
  private Iterable<SNode> createRepositoryParametersForChild(SNode child) {
    return createRepositoryParameters(IComponentWithRepositoryReferences__BehaviorDescriptor.repositoryReferencesIncludingParent_id3fVLq_tWtGK.invoke(child));
  }

  /**
   * This methods can process multiple children
   */
  public Iterable<SNode> createRepositoryParametersForChildren(Iterable<SNode> children) {
    return createRepositoryParametersWith(Sequence.fromIterable(children).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return Sequence.fromIterable(IComponentWithRepositoryReferences__BehaviorDescriptor.repositoryReferencesIncludingParent_id3fVLq_tWtGK.invoke(it)).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return (SNode) IRepositoryReference__BehaviorDescriptor.getRepository_id5jZDGTil89u.invoke(it);
          }
        });
      }
    }).distinct());
  }

  /**
   * This method is for CommandContainer, QueryContainer and EventContaier
   */
  private Iterable<SNode> createRepositoryParametersForParent(SNode parent) {
    return createRepositoryParameters(IComponentWithRepositoryReferences__BehaviorDescriptor.repositoryReferencesIncludingChildren_id3fVLq_tW6lG.invoke(parent));
  }

  private Iterable<SNode> createRepositoryParameters(Iterable<SNode> repositoryReferences) {
    return createRepositoryParametersWith(Sequence.fromIterable(repositoryReferences).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return (SNode) IRepositoryReference__BehaviorDescriptor.getRepository_id5jZDGTil89u.invoke(it);
      }
    }));
  }

  private Iterable<SNode> createRepositoryParametersWith(Iterable<SNode> repositories) {
    return Sequence.fromIterable(repositories).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode repository) {
        return parameterBuilder.with(StringUtil.firstToLower(IRepository__BehaviorDescriptor.repositoryName_idmdpAJL$$QT.invoke(repository)), IRepository__BehaviorDescriptor.toRepositoryReference_id5jZDGTilCJr.invoke(repository)).setPrivate().build();
      }
    });
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink boundedContext$bmqW = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488a0177afL, 0x2cd995488a7b76f9L, "boundedContext");
    /*package*/ static final SReferenceLink valueObject$m4SI = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea747fb3aL, 0x42e485aea7480548L, "valueObject");
    /*package*/ static final SContainmentLink parameters$t6h4 = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb96433e80624L, 0x62cb96433e80625L, "parameters");
    /*package*/ static final SContainmentLink parameters$KEwk = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea747fb3aL, 0x6443e253c087f45L, "parameters");
    /*package*/ static final SContainmentLink methods$H7gw = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea747fb3aL, 0x2cd995488a1ca83dL, "methods");
    /*package*/ static final SReferenceLink entity$OPtA = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea749033fL, 0x42e485aea7490342L, "entity");
    /*package*/ static final SContainmentLink methods$j5Ku = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea749033fL, 0x6443e253c9084a6L, "methods");
    /*package*/ static final SContainmentLink parameters$j0A8 = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea749033fL, 0x6443e253c9084a5L, "parameters");
    /*package*/ static final SContainmentLink type$AxAW = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910fb0ed95eL, 0x4c59e910fe2b0ee9L, "type");
    /*package*/ static final SContainmentLink idType$P983 = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8fdL, 0x73da508643ec8188L, "idType");
    /*package*/ static final SContainmentLink components$95b6 = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2a075c454595567L, 0x2a075c45459556aL, "components");
    /*package*/ static final SContainmentLink components$8ymK = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x49ba7df3e302f916L, 0x4cfae7e92982f50eL, "components");
    /*package*/ static final SReferenceLink command$mcVL = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea75e79ccL, 0x42e485aea75e79cfL, "command");
    /*package*/ static final SContainmentLink parameters$bvjF = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea75e79ccL, 0x6443e253e20052aL, "parameters");
    /*package*/ static final SContainmentLink aggregateReference$V1gV = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2a075c454595567L, 0x7849637c487da2bcL, "aggregateReference");
    /*package*/ static final SReferenceLink aggregate$D_P$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f2L, 0x4f0a0db9ac16f8f3L, "aggregate");
    /*package*/ static final SContainmentLink wrappedCommands$jiEM = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x7849637c48be76e0L, 0x7849637c48be76e4L, "wrappedCommands");
    /*package*/ static final SContainmentLink substitudeCommand$jirL = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x7849637c48be76e0L, 0x7849637c48be76e3L, "substitudeCommand");
    /*package*/ static final SReferenceLink command$Ua6h = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488ae1ebf3L, 0x2cd995488ae1ebf6L, "command");
    /*package*/ static final SContainmentLink methods$7LVc = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488ae1ebf3L, 0x2cd995488ae76645L, "methods");
    /*package*/ static final SContainmentLink parameters$wYju = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488ae1ebf3L, 0x33fbc5a95c6dcdc6L, "parameters");
    /*package*/ static final SReferenceLink container$uWWL = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a9591d98baL, 0x507f100eeef73cc7L, "container");
    /*package*/ static final SContainmentLink methods$xhyf = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a9591d98baL, 0x33fbc5a9591d98bbL, "methods");
    /*package*/ static final SContainmentLink parameters$KWzU = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a9591d98baL, 0x33fbc5a95c6ef487L, "parameters");
    /*package*/ static final SReferenceLink container$3Wrh = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a959da566bL, 0x507f100eef1c0503L, "container");
    /*package*/ static final SContainmentLink methods$s3XL = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a959da566bL, 0x33fbc5a959da566eL, "methods");
    /*package*/ static final SReferenceLink aggregate$k52A = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea7491039L, 0x42e485aea749103cL, "aggregate");
    /*package*/ static final SReferenceLink eventWrapper$57wl = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea7491039L, 0x1a77dd18dba2aebfL, "eventWrapper");
    /*package*/ static final SContainmentLink idType$EoIp = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c99L, 0x4cfae7e929829cc6L, "idType");
    /*package*/ static final SContainmentLink parameters$tIoa = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea7491039L, 0x6443e253cd78280L, "parameters");
    /*package*/ static final SContainmentLink substitudeEvent$ZIb0 = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db67c7adL, 0x1a77dd18dbbe5dd3L, "substitudeEvent");
    /*package*/ static final SContainmentLink wrappedEvents$17E6 = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db67c7adL, 0x1a77dd18db67c7b0L, "wrappedEvents");
    /*package*/ static final SReferenceLink event$tUVh = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea772864aL, 0x42e485aea772864dL, "event");
    /*package*/ static final SContainmentLink methods$L6U8 = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea7491039L, 0x1a77dd18dd16f8b7L, "methods");
    /*package*/ static final SReferenceLink g_aggregate$Xf87 = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18dc10802cL, 0x1a77dd18dc108030L, "g_aggregate");
    /*package*/ static final SContainmentLink methods$YQSw = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18dc10802cL, 0x1a77dd18dc13bc20L, "methods");
    /*package*/ static final SContainmentLink aggregateReference$1ZNc = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL, 0x5e223a0a09fe3269L, "aggregateReference");
    /*package*/ static final SReferenceLink repository$o2pF = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1dL, 0x507f100eefdfdf4eL, "repository");
    /*package*/ static final SContainmentLink methods$TSUr = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1dL, 0x1a77dd18ded863a4L, "methods");
    /*package*/ static final SReferenceLink repository$6gjW = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1eL, 0x507f100eefbcba7eL, "repository");
    /*package*/ static final SContainmentLink methods$4Olc = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1eL, 0x1a77dd18de764d4bL, "methods");
    /*package*/ static final SContainmentLink fromType$BfIG = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f984L, 0x4c59e910fdc7b21eL, "fromType");
    /*package*/ static final SReferenceLink dto$tTHJ = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea742a568L, 0x42e485aea742a569L, "dto");
    /*package*/ static final SContainmentLink parameters$X2kE = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea742a568L, 0x48ae87bda2d38a50L, "parameters");
    /*package*/ static final SContainmentLink toType$BgcI = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f984L, 0x4c59e910fdc7b220L, "toType");
    /*package*/ static final SReferenceLink repository$3egk = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a971798ebaL, 0x33fbc5a971798ec0L, "repository");
    /*package*/ static final SContainmentLink methods$3eIm = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a971798ebaL, 0x33fbc5a971798ec2L, "methods");
    /*package*/ static final SReferenceLink repository$5IKt = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a971798ebdL, 0x33fbc5a971798eccL, "repository");
    /*package*/ static final SContainmentLink methods$5H7m = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a971798ebdL, 0x33fbc5a971798ec5L, "methods");
    /*package*/ static final SContainmentLink parameters$gIGH = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea772864aL, 0x6443e253e200e28L, "parameters");
    /*package*/ static final SReferenceLink event$_EWX = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18daf28d4eL, 0x1a77dd18dafb9c9aL, "event");
    /*package*/ static final SContainmentLink methods$uVEc = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18daf28d4eL, 0x1a77dd18db0d137aL, "methods");
    /*package*/ static final SContainmentLink parameters$DNXU = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18daf28d4eL, 0x33fbc5a966bc25ecL, "parameters");
    /*package*/ static final SContainmentLink methods$9Lm4 = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18dbbe5dd0L, 0x33fbc5a966473286L, "methods");
    /*package*/ static final SContainmentLink parameters$RRO$ = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18dbbe5dd0L, 0x33fbc5a9664da19aL, "parameters");
    /*package*/ static final SContainmentLink methods$JWe = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a9664da00cL, 0x33fbc5a9664da198L, "methods");
    /*package*/ static final SReferenceLink query$XyyR = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xa1fc5d1dac8a772L, 0xa1fc5d1dac8b45fL, "query");
    /*package*/ static final SContainmentLink parameters$guoY = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xa1fc5d1dac8a772L, 0x6443e253e20159aL, "parameters");
    /*package*/ static final SContainmentLink returnType$WTqX = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2444L, 0x3a4bff79340ab979L, "returnType");
    /*package*/ static final SReferenceLink query$ysaA = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db1da0fbL, 0x1a77dd18db1da0feL, "query");
    /*package*/ static final SContainmentLink methods$ysCC = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db1da0fbL, 0x1a77dd18db1da100L, "methods");
    /*package*/ static final SContainmentLink parameters$FrbZ = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db1da0fbL, 0x33fbc5a97479e82fL, "parameters");
    /*package*/ static final SReferenceLink container$PNh7 = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a3L, 0x507f100ef01e81beL, "container");
    /*package*/ static final SContainmentLink parameters$HkDQ = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a3L, 0x33fbc5a96964f0abL, "parameters");
    /*package*/ static final SContainmentLink methods$HkbO = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a3L, 0x33fbc5a96964f0a9L, "methods");
    /*package*/ static final SReferenceLink container$PU53 = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a4L, 0x507f100ef01e81c6L, "container");
    /*package*/ static final SContainmentLink methods$HjIh = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a4L, 0x33fbc5a96964f0a7L, "methods");
    /*package*/ static final SContainmentLink components$Au_u = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3a4bff7934079ff4L, 0x3a4bff793407a010L, "components");
    /*package*/ static final SContainmentLink queryReferences$fHmi = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x7849637c48cd1e42L, 0x7849637c48cd1e51L, "queryReferences");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty handlingType$lxKE = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122ac5a075L, 0x56a1ac122ac5a0c9L, "handlingType");
    /*package*/ static final SProperty type$SAFo = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x2a075c454595567L, 0x71e6ab63d0d9fcL, "type");
    /*package*/ static final SProperty handlingtype$zVu_ = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122a7b6f0aL, 0x56a1ac122aa03911L, "handlingtype");
    /*package*/ static final SProperty modifier$TTVg = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da508643f0517eL, 0x2a075c4547294d8L, "modifier");
    /*package*/ static final SProperty isIdRepository$Umet = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL, 0x73da5086441fb1a2L, "isIdRepository");
    /*package*/ static final SProperty applicability$SvOP = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x12da95fb99e0f984L, 0x3c4795ac3116711eL, "applicability");
    /*package*/ static final SProperty applicationSide$oDHK = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea772864aL, 0x42e485aea7811736L, "applicationSide");
    /*package*/ static final SProperty appicationSide$PR1K = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db67c7adL, 0x1a77dd18db67d871L, "appicationSide");
    /*package*/ static final SProperty applicationSide$_6r5 = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xe220c2db6f921b8L, 0xe220c2db6f921baL, "applicationSide");
    /*package*/ static final SProperty isOverriding$_pUI = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, 0x2cd995488a1f3a2dL, "isOverriding");
    /*package*/ static final SProperty isInInterface$qwbM = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, 0x2cd995488a013454L, "isInInterface");
    /*package*/ static final SProperty handlingType$_h8g = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122ac5a076L, 0x56a1ac122acede1eL, "handlingType");
    /*package*/ static final SProperty useProcessingImplementation$lPWW = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x56a1ac122acef4d6L, 0x56a1ac122aebcd3fL, "useProcessingImplementation");
    /*package*/ static final SProperty type$7YBQ = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x3a4bff7934079ff4L, 0x1f11be867ad316efL, "type");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IDtoDerivableReference$dn = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910f8f63541L, "CQRS.structure.IDtoDerivableReference");
    /*package*/ static final SConcept SubstitudeDataType$Hl = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910fbf94f5aL, "CQRS.structure.SubstitudeDataType");
    /*package*/ static final SInterfaceConcept IDtoDerivable$t1 = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910f901bdaeL, "CQRS.structure.IDtoDerivable");
    /*package*/ static final SConcept AggregateRoot$Q_ = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c99L, "CQRS.structure.AggregateRoot");
    /*package*/ static final SConcept Entity$lp = MetaAdapterFactory.getConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8fdL, "CQRS.structure.Entity");
    /*package*/ static final SInterfaceConcept IDataType$Sx = MetaAdapterFactory.getInterfaceConcept(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c9dL, "CQRS.structure.IDataType");
  }
}
