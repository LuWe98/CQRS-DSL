package CQRS.Generation.generation;

/*Generated by MPS */

import java.util.Set;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.mps.openapi.language.SConcept;
import CQRS.util.JavaTypeCheckUtils;
import java.util.Objects;
import jetbrains.mps.baseLanguage.behavior.Type__BehaviorDescriptor;
import CQRS.util.JavaTypeQualifiedNameUtils;
import java.util.LinkedHashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class JavaTypeDependencyUtils {

  public static Set<DependencyImport> getDependenciesOf(SNode javaDataType) {
    return getDependenciesOfType(SLinkOperations.getTarget(javaDataType, LINKS.actualType$WqWC));
  }

  public static Set<DependencyImport> getDependenciesOfType(SNode type) {

    {
      final SNode primitive = type;
      if (SNodeOperations.isInstanceOf(primitive, CONCEPTS.PrimitiveType$sR)) {
        return getDependenciesOfPrimitive(primitive);
      }
    }

    {
      final SNode stringType = type;
      if (SNodeOperations.isInstanceOf(stringType, CONCEPTS.StringType$uX)) {
        return getDependenciesOfStringType(stringType);
      }
    }

    {
      final SNode arrayType = type;
      if (SNodeOperations.isInstanceOf(arrayType, CONCEPTS.ArrayType$rh)) {
        return getDependenciesOfArrayType(arrayType);
      }
    }

    {
      final SNode classifier = type;
      if (SNodeOperations.isInstanceOf(classifier, CONCEPTS.ClassifierType$bL)) {
        return getDependenciesOfClassfiierType(classifier);
      }
    }

    return SetSequence.fromSet(new HashSet<DependencyImport>());
  }

  public static Set<DependencyImport> getDependenciesOfPrimitive(SNode type) {
    return SetSequence.fromSet(new HashSet<DependencyImport>());
  }

  public static Set<DependencyImport> getDependenciesOfStringType(SNode type) {
    return SetSequence.fromSet(new HashSet<DependencyImport>());
  }

  public static Set<DependencyImport> getDependenciesOfArrayType(SNode type) {
    return getDependenciesOfType(SLinkOperations.getTarget(type, LINKS.componentType$F$Gi));
  }

  public static Set<DependencyImport> getDependenciesOfClassfiierType(SNode type) {
    SConcept primitive = JavaTypeCheckUtils.getPrimitiveConceptOf(type);

    if (!(Objects.equals(primitive, null))) {
      return SetSequence.fromSet(new HashSet<DependencyImport>());
    }

    if (Objects.equals(Type__BehaviorDescriptor.jniSignature_id7F81Cd2C7e3.invoke(type), JavaTypeCheckUtils.STRING_JNI)) {
      return SetSequence.fromSet(new HashSet<DependencyImport>());
    }

    String qualifiedName = JavaTypeQualifiedNameUtils.getQualifiedNameOfType(type);
    final Set<DependencyImport> imports = SetSequence.fromSet(new LinkedHashSet<DependencyImport>());
    SetSequence.fromSet(imports).addElement(DependencyImport.of(qualifiedName));
    ListSequence.fromList(SLinkOperations.getChildren(type, LINKS.parameter$oqG$)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SetSequence.fromSet(imports).addSequence(SetSequence.fromSet(getDependenciesOfType(it)));
      }
    });
    return imports;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink actualType$WqWC = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x53a29a8dae148659L, 0x53a29a8dae14865eL, "actualType");
    /*package*/ static final SContainmentLink componentType$F$Gi = MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, 0xf940d819f8L, "componentType");
    /*package*/ static final SContainmentLink parameter$oqG$ = MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x102419671abL, "parameter");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept PrimitiveType$sR = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f0ad8bde4L, "jetbrains.mps.baseLanguage.structure.PrimitiveType");
    /*package*/ static final SConcept StringType$uX = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47da71ecL, "jetbrains.mps.baseLanguage.structure.StringType");
    /*package*/ static final SConcept ArrayType$rh = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, "jetbrains.mps.baseLanguage.structure.ArrayType");
    /*package*/ static final SConcept ClassifierType$bL = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType");
  }
}
