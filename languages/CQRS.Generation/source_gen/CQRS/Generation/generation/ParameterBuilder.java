package CQRS.Generation.generation;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public final class ParameterBuilder {

  private SNode boundedContext;

  public ParameterBuilder(SNode parameter) {
    this.boundedContext = parameter;
  }

  public Actual with(String name, SNode type) {
    SNode parameter = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, "CQRS.Generation.structure.ParameterOutput"));
    SPropertyOperations.set(parameter, PROPS.name$PbWT, name);
    SLinkOperations.setTarget(parameter, LINKS.type$Phmg, type);
    return new Actual(parameter, boundedContext);
  }

  public Actual with(SNode originalParameter) {
    SNode parameter = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, "CQRS.Generation.structure.ParameterOutput"));
    SPropertyOperations.set(parameter, PROPS.name$PbWT, SPropertyOperations.getString(originalParameter, PROPS.name$MnvL));
    SLinkOperations.setTarget(parameter, LINKS.type$Phmg, SNodeOperations.copyNode(SLinkOperations.getTarget(originalParameter, LINKS.type$AxAW)));
    SLinkOperations.setTarget(parameter, LINKS.originalParameter$9$cO, originalParameter);
    return new Actual(parameter, boundedContext);
  }

  public SNode build(SNode original) {
    return with(original).build();
  }

  public SNode build(String name, SNode type) {
    return with(name, type).build();
  }


  public static final class Actual {
    private SNode currentParameter;
    private SNode boundedContext;

    private Actual(SNode parameter, SNode boundedContext) {
      this.currentParameter = parameter;
      this.boundedContext = boundedContext;
    }

    public Actual setModifier(SEnumerationLiteral modifier) {
      SPropertyOperations.setEnum(currentParameter, PROPS.modifier$a635, modifier);
      return this;
    }

    public Actual setPrivate() {
      return setModifier(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6443e2542ec484fL, "CQRS.structure.VariableModifier"), 0x6443e2542ec4850L, "private"));
    }

    public Actual setPublic() {
      return setModifier(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6443e2542ec484fL, "CQRS.structure.VariableModifier"), 0x6443e2542ec4851L, "public"));
    }

    public Actual setProtected() {
      return setModifier(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x6443e2542ec484fL, "CQRS.structure.VariableModifier"), 0x6443e2542ec4854L, "protected"));
    }

    public Actual isOverriding(boolean is) {
      SPropertyOperations.set(currentParameter, PROPS.isOverriding$4s$m, is);
      return this;
    }

    public Actual isMutable(boolean is) {
      SPropertyOperations.set(currentParameter, PROPS.isMutable$a5m2, is);
      return this;
    }

    public Actual hideModifiers(boolean is) {
      SPropertyOperations.set(currentParameter, PROPS.hideModifiers$4rph, is);
      return this;
    }

    public Actual setName(String name) {
      SPropertyOperations.set(currentParameter, PROPS.name$PbWT, name);
      return this;
    }

    public Actual setType(SNode type) {
      SLinkOperations.setTarget(currentParameter, LINKS.type$Phmg, SNodeOperations.copyNode(type));
      return this;
    }

    public SNode build() {
      SLinkOperations.setTarget(currentParameter, LINKS.boundedContext$bmqW, boundedContext);
      return currentParameter;
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$PbWT = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x1a77dd18dae31af3L, "name");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty modifier$a635 = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x6443e2542ec484bL, "modifier");
    /*package*/ static final SProperty isOverriding$4s$m = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x6443e2542f2bf9bL, "isOverriding");
    /*package*/ static final SProperty isMutable$a5m2 = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x6443e2542ec4848L, "isMutable");
    /*package*/ static final SProperty hideModifiers$4rph = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x6443e2542f2bf96L, "hideModifiers");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink type$Phmg = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x1a77dd18dae31af5L, "type");
    /*package*/ static final SContainmentLink type$AxAW = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910fb0ed95eL, 0x4c59e910fe2b0ee9L, "type");
    /*package*/ static final SReferenceLink originalParameter$9$cO = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x6443e253acae4a7L, "originalParameter");
    /*package*/ static final SReferenceLink boundedContext$bmqW = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488a0177afL, 0x2cd995488a7b76f9L, "boundedContext");
  }
}
