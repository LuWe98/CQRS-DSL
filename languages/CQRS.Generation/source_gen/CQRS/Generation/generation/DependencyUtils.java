package CQRS.Generation.generation;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import CQRS.behavior.BoundedContext__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class DependencyUtils {

  public static final String COMMAND_SIDE_ROOT = "/command_side";

  public static final String COMMAND_SIDE_COMMAND_OBJECTS_PATH = COMMAND_SIDE_ROOT + "/commands";
  public static final String COMMAND_SIDE_COMMAND_OBJECTS_GENERIC_PATH = COMMAND_SIDE_COMMAND_OBJECTS_PATH + "/generic";
  public static final String COMMAND_SIDE_COMMAND_HANDLER_PATH = COMMAND_SIDE_COMMAND_OBJECTS_PATH + "/handler";

  public static final String COMMAND_SIDE_EVENT_OBJECTS_PATH = COMMAND_SIDE_ROOT + "/events";
  public static final String COMMAND_SIDE_EVENTS_GENERIC_PATH = COMMAND_SIDE_EVENT_OBJECTS_PATH + "/generic";

  public static final String COMMAND_SIDE_AGGREGATES_PATH = COMMAND_SIDE_ROOT + "/aggregates";
  public static final String COMMAND_SIDE_AGGREGATES_GENERIC_PATH = COMMAND_SIDE_AGGREGATES_PATH + "/generic";

  public static final String COMMAND_SIDE_AGGREGATE_REPOSITORIES_PATH = COMMAND_SIDE_ROOT + "/repositories";
  public static final String COMMAND_SIDE_AGGREGATE_REPOSITORIES_GENERIC_PATH = COMMAND_SIDE_AGGREGATE_REPOSITORIES_PATH + "/generic";

  public static final String COMMAND_SIDE_ENTITIES_PATH = COMMAND_SIDE_ROOT + "/entities";
  public static final String COMMAND_SIDE_ENTITIES_GENERIC_PATH = COMMAND_SIDE_ENTITIES_PATH + "/generic";

  public static final String COMMAND_SIDE_VALUE_OBJECTS_PATH = COMMAND_SIDE_ROOT + "/valueobjects";


  public static final String COMMAND_INTERFACE_NAME = "Command";
  public static final String COMMAND_HANDLER_INTERFACE_NAME = "CommandHandler";
  public static final String GROUPED_COMMAND_HANDLER_NAME = "GroupedCommandHandler";

  public static final String AGGREGATE_INTERFACE_NAME = "AggregateRoot";
  public static final String EVENT_AGGREGATE_INTERFACE_NAME = "EventAggregateRoot";
  public static final String BASE_EVENT_AGGREGATE_NAME = "BaseEventAggregateRoot";

  public static final String AGGREGATE_REPOSITORY_INTERFACE_NAME = "AggregateRepository";
  public static final String AGGREGATE_ID_REPOSITORY_INTERFACE_NAME = "AggregateIdRepository";

  public static final String ENTITY_BASE_CLASS_NAME = "Entity";



  public static final String QUERY_SIDE_ROOT = "/query_side";

  public static final String QUERY_SIDE_QUERY_OBJECTS_PATH = QUERY_SIDE_ROOT + "/queries";
  public static final String QUERY_SIDE_QUERY_GENERIC_PATH = QUERY_SIDE_QUERY_OBJECTS_PATH + "/generic";
  public static final String QUERY_SIDE_QUERY_HANDLER_PATH = QUERY_SIDE_QUERY_OBJECTS_PATH + "/handler";
  public static final String QUERY_SIDE_QUERY_SERVICE_PATH = QUERY_SIDE_QUERY_OBJECTS_PATH + "/services";
  public static final String QUERY_SIDE_QUERY_PROCESSOR_PATH = QUERY_SIDE_QUERY_OBJECTS_PATH + "/processor";

  public static final String QUERY_SIDE_DTO_PATH = QUERY_SIDE_ROOT + "/dto";

  public static final String QUERY_SIDE_DTO_REPOSITORY_PATH = QUERY_SIDE_ROOT + "/repositories";

  public static final String QUERY_SIDE_EVENTS_PATH = QUERY_SIDE_ROOT + "/events";
  public static final String QUERY_SIDE_EVENTS_GENERIC_PATH = QUERY_SIDE_EVENTS_PATH + "/generic";
  public static final String QUERY_SIDE_EVENT_HANDLER_PATH = QUERY_SIDE_EVENTS_PATH + "/handler";



  public static final String QUERY_INTERFACE_NAME = "Query";
  public static final String QUERY_HANDLER_INTERFACE_NAME = "QueryHandler";
  public static final String GROUPED_QUERY_HANDLER_NAME = "GroupedQueryHandler";
  public static final String QUERY_PROCESSOR_NAME = "QueryProcessor";
  public static final String QUERY_PROCESSOR_IMPL_NAME = "QueryProcessorImpl";
  public static final String QUERY_HANDLER_CONTAINER_NAME = "QueryContainer";
  public static final String QUERY_HANDLER_CONTAINER_IMPL_NAME = "QueryContainerImpl";


  public static final String EVENT_INTERFACE_NAME = "Event";
  public static final String EVENT_HANDLER_INTERFACE_NAME = "EventHandler";
  public static final String GROUPED_EVENT_HANDLER_NAME = "GroupedEventHandler";


  public static DependencyImport KOTLIN_CLASS_IMPORT = DependencyImport.of("kotlin.reflect.KClass");










  /**
   * Outdated
   */
  private static String getPathOf(SNode node) {
    return getPathOf(SNodeOperations.getConcept(node), SLinkOperations.getTarget(node, LINKS.boundedContext$bmqW));
  }

  private static String getPathOf(SAbstractConcept concept, SNode boundedContext) {
    String root = BoundedContext__BehaviorDescriptor.getRootPath_id4yUYSn0_QRf.invoke(boundedContext);

    SAbstractConcept cncpt = concept;
    boolean noneMatched = true;
    if (noneMatched && SConceptOperations.isSubConceptOf(cncpt, CONCEPTS.QueryOutput$pT)) {
      noneMatched = false;
      return root + QUERY_SIDE_QUERY_OBJECTS_PATH;
    }
    if (noneMatched && SConceptOperations.isSubConceptOf(cncpt, CONCEPTS.QueryInterfaceOutput$Yd)) {
      noneMatched = false;
      return root + QUERY_SIDE_QUERY_GENERIC_PATH;
    }
    throw new IllegalArgumentException("Input cannot be mapped to path: " + concept);
  }

  private static String getPackageOf(SNode node) {
    return getPathOf(node).replaceAll("/", ".");
  }

  private static String getPackageOf(SAbstractConcept concept, SNode boundedContext) {
    return getPathOf(concept, boundedContext).replaceAll("/", ".");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink boundedContext$bmqW = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488a0177afL, 0x2cd995488a7b76f9L, "boundedContext");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept QueryOutput$pT = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xa1fc5d1dac8a772L, "CQRS.Generation.structure.QueryOutput");
    /*package*/ static final SConcept QueryInterfaceOutput$Yd = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x3b1b6680cf077f78L, "CQRS.Generation.structure.QueryInterfaceOutput");
  }
}
