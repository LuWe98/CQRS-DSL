package CQRS.Generation.generation;

/*Generated by MPS */

import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public interface ConceptMapper {

  GenerationTarget getGenerationTarget();

  Map<SAbstractConcept, SAbstractConcept> getFileOutputMappings();

  Map<SAbstractConcept, SAbstractConcept> getElementOutputMappings();

  default SNode initFileOutput(SNode input) {
    SNode newInstance = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MapSequence.fromMap(getFileOutputMappings()).get(SNodeOperations.getConcept(input))));
    SLinkOperations.setTarget(newInstance, LINKS.boundedContext$bmqW, SLinkOperations.getTarget(input, LINKS.boundedContext$bmqW));
    return newInstance;
  }

  default SNode initElementOutput(SNode input) {
    SNode newInstance = initElementOutput(SNodeOperations.getConcept(input));
    SLinkOperations.setTarget(newInstance, LINKS.boundedContext$bmqW, SLinkOperations.getTarget(input, LINKS.boundedContext$bmqW));
    return newInstance;
  }

  default SNode initElementOutput(SAbstractConcept input) {
    return SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MapSequence.fromMap(getElementOutputMappings()).get(input)));
  }

  default SNode map(SNode nodeToConvert) {

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.ValueObjectOutput$x8)) {
        return mapValueObject(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.EntityOutput$le)) {
        return mapEntity(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.AggregateOutput$Oo)) {
        return mapAggregate(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.AggregateConcreteInterfaceOutput$85)) {
        return mapAggregateConcreteInterface(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.AggregateRepositoryOutput$pc)) {
        return mapAggregateRepository(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.AggregateConcreteRepositoryInterfaceOutput$pF)) {
        return mapAggregateConcreteRepositoryInterface(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.DtoOutput$Cx)) {
        return mapDto(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.DtoRepositoryOutput$fg)) {
        return mapDtoRepository(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.DtoRepositoryInterfaceOutput$gH)) {
        return mapDtoRepositoryInterface(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.CommandOutput$e1)) {
        return mapCommand(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.CommandWrapperInterfaceOutput$p1)) {
        return mapCommandWrapper(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.CommandHandlerSeparatedOutput$8m)) {
        return mapCommandHandlerSpecific(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.CommandHandlerGroupedOutput$oa)) {
        return mapCommandHandlerGrouped(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.CommandHandlerGroupedInterfaceOutput$W5)) {
        return mapCommandHandlerGroupedInterface(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.QueryOutput$pT)) {
        return mapQuery(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.QueryHandlerSeparatedOutput$yC)) {
        return mapQueryHandlerSeparated(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.QueryHandlerGroupedOutput$r7)) {
        return mapQueryHandlerGrouped(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.QueryHandlerGroupedInterfaceOutput$rA)) {
        return mapQueryHandlerGroupedInterface(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.QueryProcessorOutput$Zn)) {
        return mapQueryProcessor(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.EventOutput$E0)) {
        return mapEvent(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.EventWrapperInterfaceOutput$TB)) {
        return mapEventWrapper(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.EventHandlerSeparatedOutput$jD)) {
        return mapEventHandlerSpecific(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.EventInterfaceOutput$RB)) {
        return mapEventInterface(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.EventHandlerGroupedOutput$_S)) {
        return mapEventHandlerGrouped(node);
      }
    }

    {
      final SNode node = nodeToConvert;
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.EventHandlerGroupedInterfaceOutput$b$)) {
        return mapEventHandlerGroupedInterface(node);
      }
    }

    return initFileOutput(nodeToConvert);
  }

  default SNode mapParameterObj(SNode original) {
    SNode node = SNodeOperations.cast(initElementOutput(CONCEPTS.ParameterOutput$HK), CONCEPTS.ParameterOutput$HK);
    SLinkOperations.setTarget(node, LINKS.originalParameter$9$cO, original);
    SLinkOperations.setTarget(node, LINKS.type$Phmg, SNodeOperations.copyNode(SLinkOperations.getTarget(original, LINKS.type$AxAW)));
    SPropertyOperations.set(node, PROPS.name$PbWT, SPropertyOperations.getString(original, PROPS.name$MnvL));
    return node;
  }

  default Iterable<SNode> mapParameters(Iterable<SNode> original) {
    return Sequence.fromIterable(original).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return mapParameter(it);
      }
    });
  }

  default SNode mapParameter(SNode original) {
    SNode node = SNodeOperations.cast(initElementOutput(original), CONCEPTS.ParameterOutput$HK);
    SLinkOperations.setTarget(node, LINKS.originalParameter$9$cO, SLinkOperations.getTarget(original, LINKS.originalParameter$9$cO));
    SPropertyOperations.set(node, PROPS.name$PbWT, SPropertyOperations.getString(original, PROPS.name$PbWT));
    SLinkOperations.setTarget(node, LINKS.type$Phmg, SNodeOperations.copyNode(SLinkOperations.getTarget(original, LINKS.type$Phmg)));
    SPropertyOperations.set(node, PROPS.isMutable$a5m2, SPropertyOperations.getBoolean(original, PROPS.isMutable$a5m2));
    SPropertyOperations.set(node, PROPS.isOverriding$4s$m, SPropertyOperations.getBoolean(original, PROPS.isOverriding$4s$m));
    SPropertyOperations.set(node, PROPS.hideModifiers$4rph, SPropertyOperations.getBoolean(original, PROPS.hideModifiers$4rph));
    SPropertyOperations.setEnum(node, PROPS.modifier$a635, SPropertyOperations.getEnum(original, PROPS.modifier$a635));
    return node;
  }

  default SNode mapProperty(SNode original) {
    SNode node = SNodeOperations.cast(initElementOutput(CONCEPTS.PropertyOutput$B4), CONCEPTS.PropertyOutput$B4);
    SLinkOperations.setTarget(node, LINKS.property$3pth, original);
    return node;
  }


  default SNode mapDataType(SNode original) {
    SNode node = SNodeOperations.cast(initElementOutput(CONCEPTS.IDataTypeOutput$pO), CONCEPTS.IDataTypeOutput$pO);
    SLinkOperations.setTarget(node, LINKS.type$7Mnf, original);
    return node;
  }

  default Iterable<SNode> mapMethods(Iterable<SNode> original) {
    return Sequence.fromIterable(original).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return mapMethod(it);
      }
    });
  }

  default Iterable<SNode> mapMethods(Iterable<SNode> original, final SEnumerationLiteral side) {
    return Sequence.fromIterable(original).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return mapMethod(it, side);
      }
    });
  }

  default SNode mapMethod(SNode original) {
    return mapMethod(original, SPropertyOperations.getEnum(original, PROPS.applicationSide$w7lC));
  }

  default SNode mapMethod(SNode original, SEnumerationLiteral side) {
    SNode node = SNodeOperations.cast(initElementOutput(original), CONCEPTS.MethodOutput$_Q);
    SPropertyOperations.set(node, PROPS.name$PRHY, SPropertyOperations.getString(original, PROPS.name$PRHY));
    SLinkOperations.setTarget(node, LINKS.returnType$FbaL, SNodeOperations.copyNode(SLinkOperations.getTarget(original, LINKS.returnType$FbaL)));
    ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.parameters$F5jo)).addSequence(Sequence.fromIterable(mapParameters(SLinkOperations.getChildren(original, LINKS.parameters$F5jo))));
    SPropertyOperations.setEnum(node, PROPS.applicationSide$w7lC, side);
    SPropertyOperations.set(node, PROPS.isInInterface$qwbM, SPropertyOperations.getBoolean(original, PROPS.isInInterface$qwbM));
    SPropertyOperations.set(node, PROPS.isOverriding$_pUI, SPropertyOperations.getBoolean(original, PROPS.isOverriding$_pUI));
    SPropertyOperations.setEnum(node, PROPS.modifier$GQxw, SPropertyOperations.getEnum(original, PROPS.modifier$GQxw));
    SPropertyOperations.set(node, PROPS.hasVerticallyAlignedParameters$N1Bl, SPropertyOperations.getBoolean(original, PROPS.hasVerticallyAlignedParameters$N1Bl));
    SLinkOperations.setTarget(node, LINKS.property$h$fI, SLinkOperations.getTarget(original, LINKS.property$h$fI));
    SLinkOperations.setTarget(node, LINKS.originalMethod$uqbp, SLinkOperations.getTarget(original, LINKS.originalMethod$uqbp));
    return node;
  }



  default SNode mapValueObject(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.ValueObjectOutput$x8);
    SLinkOperations.setTarget(newInstance, LINKS.valueObject$m4SI, SLinkOperations.getTarget(original, LINKS.valueObject$m4SI));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$H7gw)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$H7gw))));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.parameters$KEwk)).addSequence(Sequence.fromIterable(mapParameters(SLinkOperations.getChildren(original, LINKS.parameters$KEwk))));
    return newInstance;
  }

  default SNode mapEntity(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.EntityOutput$le);
    SLinkOperations.setTarget(newInstance, LINKS.entity$OPtA, SLinkOperations.getTarget(original, LINKS.entity$OPtA));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.parameters$j0A8)).addSequence(Sequence.fromIterable(mapParameters(SLinkOperations.getChildren(original, LINKS.parameters$j0A8))));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$j5Ku)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$j5Ku), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd9954889e49a89L, "CQRS.Generation.structure.ApplicationSide"), 0x2cd9954889e49a8aL, "COMMAND_SIDE"))));
    return newInstance;
  }

  default SNode mapAggregate(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.AggregateOutput$Oo);
    SLinkOperations.setTarget(newInstance, LINKS.aggregate$k52A, SLinkOperations.getTarget(original, LINKS.aggregate$k52A));
    SLinkOperations.setTarget(newInstance, LINKS.eventWrapper$57wl, SLinkOperations.getTarget(original, LINKS.eventWrapper$57wl));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.parameters$tIoa)).addSequence(Sequence.fromIterable(mapParameters(SLinkOperations.getChildren(original, LINKS.parameters$tIoa))));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$L6U8)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$L6U8), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd9954889e49a89L, "CQRS.Generation.structure.ApplicationSide"), 0x2cd9954889e49a8aL, "COMMAND_SIDE"))));
    return newInstance;
  }

  default SNode mapAggregateConcreteInterface(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.AggregateConcreteInterfaceOutput$85);
    SLinkOperations.setTarget(newInstance, LINKS.g_aggregate$Xf87, SLinkOperations.getTarget(original, LINKS.g_aggregate$Xf87));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$YQSw)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$YQSw), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd9954889e49a89L, "CQRS.Generation.structure.ApplicationSide"), 0x2cd9954889e49a8aL, "COMMAND_SIDE"))));
    return newInstance;
  }


  default SNode mapAggregateRepository(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.AggregateRepositoryOutput$pc);
    SLinkOperations.setTarget(newInstance, LINKS.repository$o2pF, SLinkOperations.getTarget(original, LINKS.repository$o2pF));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$TSUr)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$TSUr), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd9954889e49a89L, "CQRS.Generation.structure.ApplicationSide"), 0x2cd9954889e49a8aL, "COMMAND_SIDE"))));
    return newInstance;
  }

  default SNode mapAggregateConcreteRepositoryInterface(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.AggregateConcreteRepositoryInterfaceOutput$pF);
    SLinkOperations.setTarget(newInstance, LINKS.repository$6gjW, SLinkOperations.getTarget(original, LINKS.repository$6gjW));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$4Olc)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$4Olc), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd9954889e49a89L, "CQRS.Generation.structure.ApplicationSide"), 0x2cd9954889e49a8aL, "COMMAND_SIDE"))));
    return newInstance;
  }

  default Iterable<SNode> mapCommands(Iterable<SNode> commands) {
    return Sequence.fromIterable(commands).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return mapCommand(it);
      }
    });
  }

  default SNode mapCommand(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.CommandOutput$e1);
    SLinkOperations.setTarget(newInstance, LINKS.command$mcVL, SLinkOperations.getTarget(original, LINKS.command$mcVL));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.parameters$bvjF)).addSequence(Sequence.fromIterable(mapParameters(SLinkOperations.getChildren(original, LINKS.parameters$bvjF))));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$bw0I)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$bw0I), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd9954889e49a89L, "CQRS.Generation.structure.ApplicationSide"), 0x2cd9954889e49a8aL, "COMMAND_SIDE"))));
    return newInstance;
  }

  default SNode mapCommandWrapper(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.CommandWrapperInterfaceOutput$p1);
    SLinkOperations.setTarget(newInstance, LINKS.substitudeCommand$jirL, SNodeOperations.copyNode(SLinkOperations.getTarget(original, LINKS.substitudeCommand$jirL)));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.wrappedCommands$jiEM)).addSequence(Sequence.fromIterable(mapCommands(SLinkOperations.getChildren(original, LINKS.wrappedCommands$jiEM))));
    return newInstance;
  }

  default SNode mapCommandHandlerSpecific(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.CommandHandlerSeparatedOutput$8m);
    SLinkOperations.setTarget(newInstance, LINKS.command$Ua6h, SLinkOperations.getTarget(original, LINKS.command$Ua6h));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$7LVc)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$7LVc))));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.parameters$wYju)).addSequence(Sequence.fromIterable(mapParameters(SLinkOperations.getChildren(original, LINKS.parameters$wYju))));
    return newInstance;
  }

  default SNode mapCommandHandlerGrouped(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.CommandHandlerGroupedOutput$oa);
    SLinkOperations.setTarget(newInstance, LINKS.container$uWWL, SLinkOperations.getTarget(original, LINKS.container$uWWL));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$xhyf)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$xhyf))));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.parameters$KWzU)).addSequence(Sequence.fromIterable(mapParameters(SLinkOperations.getChildren(original, LINKS.parameters$KWzU))));
    return newInstance;
  }

  default SNode mapCommandHandlerGroupedInterface(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.CommandHandlerGroupedInterfaceOutput$W5);
    SLinkOperations.setTarget(newInstance, LINKS.container$3Wrh, SLinkOperations.getTarget(original, LINKS.container$3Wrh));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$s3XL)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$s3XL))));
    return newInstance;
  }


  default SNode mapDto(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.DtoOutput$Cx);
    SLinkOperations.setTarget(newInstance, LINKS.dto$tTHJ, SLinkOperations.getTarget(original, LINKS.dto$tTHJ));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.parameters$X2kE)).addSequence(Sequence.fromIterable(mapParameters(SLinkOperations.getChildren(original, LINKS.parameters$X2kE))));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$HNRC)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$HNRC), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd9954889e49a89L, "CQRS.Generation.structure.ApplicationSide"), 0x2cd9954889e49a8bL, "QUERY_SIDE"))));
    return newInstance;
  }

  default SNode mapDtoRepository(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.DtoRepositoryOutput$fg);
    SLinkOperations.setTarget(newInstance, LINKS.repository$3egk, SLinkOperations.getTarget(original, LINKS.repository$3egk));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$3eIm)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$3eIm))));
    return newInstance;
  }

  default SNode mapDtoRepositoryInterface(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.DtoRepositoryInterfaceOutput$gH);
    SLinkOperations.setTarget(newInstance, LINKS.repository$5IKt, SLinkOperations.getTarget(original, LINKS.repository$5IKt));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$5H7m)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$5H7m))));
    return newInstance;
  }


  default SNode mapQuery(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.QueryOutput$pT);
    SLinkOperations.setTarget(newInstance, LINKS.query$XyyR, SLinkOperations.getTarget(original, LINKS.query$XyyR));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.parameters$guoY)).addSequence(Sequence.fromIterable(mapParameters(SLinkOperations.getChildren(original, LINKS.parameters$guoY))));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$guBZ)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$guBZ), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd9954889e49a89L, "CQRS.Generation.structure.ApplicationSide"), 0x2cd9954889e49a8bL, "QUERY_SIDE"))));
    return newInstance;
  }

  default SNode mapQueryHandlerSeparated(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.QueryHandlerSeparatedOutput$yC);
    SLinkOperations.setTarget(newInstance, LINKS.query$ysaA, SLinkOperations.getTarget(original, LINKS.query$ysaA));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$ysCC)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$ysCC))));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.parameters$FrbZ)).addSequence(Sequence.fromIterable(mapParameters(SLinkOperations.getChildren(original, LINKS.parameters$FrbZ))));
    return newInstance;
  }

  default SNode mapQueryHandlerGrouped(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.QueryHandlerGroupedOutput$r7);
    SLinkOperations.setTarget(newInstance, LINKS.container$PNh7, SLinkOperations.getTarget(original, LINKS.container$PNh7));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$HkbO)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$HkbO))));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.parameters$HkDQ)).addSequence(Sequence.fromIterable(mapParameters(SLinkOperations.getChildren(original, LINKS.parameters$HkDQ))));
    return newInstance;
  }

  default SNode mapQueryHandlerGroupedInterface(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.QueryHandlerGroupedInterfaceOutput$rA);
    SLinkOperations.setTarget(newInstance, LINKS.container$PU53, SLinkOperations.getTarget(original, LINKS.container$PU53));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$HjIh)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$HjIh))));
    return newInstance;
  }

  default SNode mapQueryProcessor(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.QueryProcessorOutput$Zn);
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.queryReferences$fHmi)).addSequence(ListSequence.fromList(SLinkOperations.getChildren(original, LINKS.queryReferences$fHmi)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.copyNode(it);
      }
    }));
    return newInstance;
  }


  default Iterable<SNode> mapEvents(Iterable<SNode> events) {
    return Sequence.fromIterable(events).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return mapEvent(it);
      }
    });
  }

  default SNode mapEvent(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.EventOutput$E0);
    SLinkOperations.setTarget(newInstance, LINKS.event$tUVh, SLinkOperations.getTarget(original, LINKS.event$tUVh));
    SPropertyOperations.setEnum(newInstance, PROPS.applicationSide$oDHK, SPropertyOperations.getEnum(original, PROPS.applicationSide$oDHK));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.parameters$gIGH)).addSequence(Sequence.fromIterable(mapParameters(SLinkOperations.getChildren(original, LINKS.parameters$gIGH))));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$gIVI)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$gIVI), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd9954889e49a89L, "CQRS.Generation.structure.ApplicationSide"), 0x2cd9954889e49a8bL, "QUERY_SIDE"))));
    return newInstance;
  }

  default SNode mapEventWrapper(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.EventWrapperInterfaceOutput$TB);
    SLinkOperations.setTarget(newInstance, LINKS.substitudeEvent$ZIb0, SNodeOperations.copyNode(SLinkOperations.getTarget(original, LINKS.substitudeEvent$ZIb0)));
    SPropertyOperations.setEnum(newInstance, PROPS.appicationSide$PR1K, SPropertyOperations.getEnum(original, PROPS.appicationSide$PR1K));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.wrappedEvents$17E6)).addSequence(Sequence.fromIterable(mapEvents(SLinkOperations.getChildren(original, LINKS.wrappedEvents$17E6))));
    return newInstance;
  }

  default SNode mapEventHandlerSpecific(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.EventHandlerSeparatedOutput$jD);
    SLinkOperations.setTarget(newInstance, LINKS.event$_EWX, SLinkOperations.getTarget(original, LINKS.event$_EWX));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$uVEc)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$uVEc), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd9954889e49a89L, "CQRS.Generation.structure.ApplicationSide"), 0x2cd9954889e49a8bL, "QUERY_SIDE"))));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.parameters$DNXU)).addSequence(Sequence.fromIterable(mapParameters(SLinkOperations.getChildren(original, LINKS.parameters$DNXU))));
    return newInstance;
  }

  default SNode mapEventInterface(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.EventInterfaceOutput$RB);
    SPropertyOperations.setEnum(newInstance, PROPS.applicationSide$_6r5, SPropertyOperations.getEnum(original, PROPS.applicationSide$_6r5));
    return newInstance;
  }

  default SNode mapEventHandlerGrouped(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.EventHandlerGroupedOutput$_S);
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$9Lm4)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$9Lm4))));
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.parameters$RRO$)).addSequence(Sequence.fromIterable(mapParameters(SLinkOperations.getChildren(original, LINKS.parameters$RRO$))));
    return newInstance;
  }

  default SNode mapEventHandlerGroupedInterface(SNode original) {
    SNode newInstance = SNodeOperations.cast(initFileOutput(original), CONCEPTS.EventHandlerGroupedInterfaceOutput$b$);
    ListSequence.fromList(SLinkOperations.getChildren(newInstance, LINKS.methods$JWe)).addSequence(Sequence.fromIterable(mapMethods(SLinkOperations.getChildren(original, LINKS.methods$JWe))));
    return newInstance;
  }

  final class LINKS {
    /*package*/ static final SReferenceLink boundedContext$bmqW = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488a0177afL, 0x2cd995488a7b76f9L, "boundedContext");
    /*package*/ static final SReferenceLink originalParameter$9$cO = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x6443e253acae4a7L, "originalParameter");
    /*package*/ static final SContainmentLink type$Phmg = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x1a77dd18dae31af5L, "type");
    /*package*/ static final SContainmentLink type$AxAW = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4c59e910fb0ed95eL, 0x4c59e910fe2b0ee9L, "type");
    /*package*/ static final SReferenceLink property$3pth = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18dd171b74L, 0x1a77dd18dd171b77L, "property");
    /*package*/ static final SReferenceLink type$7Mnf = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476f12L, 0x48bafb85c0476f13L, "type");
    /*package*/ static final SContainmentLink returnType$FbaL = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, 0x1a77dd18dac2db39L, "returnType");
    /*package*/ static final SContainmentLink parameters$F5jo = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, 0x1a77dd18dac2db35L, "parameters");
    /*package*/ static final SReferenceLink property$h$fI = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, 0x2cd995488a1f6bceL, "property");
    /*package*/ static final SReferenceLink originalMethod$uqbp = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, 0x6443e252eeba878L, "originalMethod");
    /*package*/ static final SReferenceLink valueObject$m4SI = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea747fb3aL, 0x42e485aea7480548L, "valueObject");
    /*package*/ static final SContainmentLink methods$H7gw = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea747fb3aL, 0x2cd995488a1ca83dL, "methods");
    /*package*/ static final SContainmentLink parameters$KEwk = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea747fb3aL, 0x6443e253c087f45L, "parameters");
    /*package*/ static final SReferenceLink entity$OPtA = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea749033fL, 0x42e485aea7490342L, "entity");
    /*package*/ static final SContainmentLink parameters$j0A8 = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea749033fL, 0x6443e253c9084a5L, "parameters");
    /*package*/ static final SContainmentLink methods$j5Ku = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea749033fL, 0x6443e253c9084a6L, "methods");
    /*package*/ static final SReferenceLink aggregate$k52A = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea7491039L, 0x42e485aea749103cL, "aggregate");
    /*package*/ static final SReferenceLink eventWrapper$57wl = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea7491039L, 0x1a77dd18dba2aebfL, "eventWrapper");
    /*package*/ static final SContainmentLink parameters$tIoa = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea7491039L, 0x6443e253cd78280L, "parameters");
    /*package*/ static final SContainmentLink methods$L6U8 = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea7491039L, 0x1a77dd18dd16f8b7L, "methods");
    /*package*/ static final SReferenceLink g_aggregate$Xf87 = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18dc10802cL, 0x1a77dd18dc108030L, "g_aggregate");
    /*package*/ static final SContainmentLink methods$YQSw = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18dc10802cL, 0x1a77dd18dc13bc20L, "methods");
    /*package*/ static final SReferenceLink repository$o2pF = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1dL, 0x507f100eefdfdf4eL, "repository");
    /*package*/ static final SContainmentLink methods$TSUr = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1dL, 0x1a77dd18ded863a4L, "methods");
    /*package*/ static final SReferenceLink repository$6gjW = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1eL, 0x507f100eefbcba7eL, "repository");
    /*package*/ static final SContainmentLink methods$4Olc = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1eL, 0x1a77dd18de764d4bL, "methods");
    /*package*/ static final SReferenceLink command$mcVL = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea75e79ccL, 0x42e485aea75e79cfL, "command");
    /*package*/ static final SContainmentLink parameters$bvjF = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea75e79ccL, 0x6443e253e20052aL, "parameters");
    /*package*/ static final SContainmentLink methods$bw0I = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea75e79ccL, 0x6443e253e20052dL, "methods");
    /*package*/ static final SContainmentLink substitudeCommand$jirL = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x7849637c48be76e0L, 0x7849637c48be76e3L, "substitudeCommand");
    /*package*/ static final SContainmentLink wrappedCommands$jiEM = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x7849637c48be76e0L, 0x7849637c48be76e4L, "wrappedCommands");
    /*package*/ static final SReferenceLink command$Ua6h = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488ae1ebf3L, 0x2cd995488ae1ebf6L, "command");
    /*package*/ static final SContainmentLink methods$7LVc = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488ae1ebf3L, 0x2cd995488ae76645L, "methods");
    /*package*/ static final SContainmentLink parameters$wYju = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488ae1ebf3L, 0x33fbc5a95c6dcdc6L, "parameters");
    /*package*/ static final SReferenceLink container$uWWL = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a9591d98baL, 0x507f100eeef73cc7L, "container");
    /*package*/ static final SContainmentLink methods$xhyf = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a9591d98baL, 0x33fbc5a9591d98bbL, "methods");
    /*package*/ static final SContainmentLink parameters$KWzU = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a9591d98baL, 0x33fbc5a95c6ef487L, "parameters");
    /*package*/ static final SReferenceLink container$3Wrh = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a959da566bL, 0x507f100eef1c0503L, "container");
    /*package*/ static final SContainmentLink methods$s3XL = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a959da566bL, 0x33fbc5a959da566eL, "methods");
    /*package*/ static final SReferenceLink dto$tTHJ = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea742a568L, 0x42e485aea742a569L, "dto");
    /*package*/ static final SContainmentLink parameters$X2kE = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea742a568L, 0x48ae87bda2d38a50L, "parameters");
    /*package*/ static final SContainmentLink methods$HNRC = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea742a568L, 0x6443e253e202304L, "methods");
    /*package*/ static final SReferenceLink repository$3egk = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a971798ebaL, 0x33fbc5a971798ec0L, "repository");
    /*package*/ static final SContainmentLink methods$3eIm = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a971798ebaL, 0x33fbc5a971798ec2L, "methods");
    /*package*/ static final SReferenceLink repository$5IKt = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a971798ebdL, 0x33fbc5a971798eccL, "repository");
    /*package*/ static final SContainmentLink methods$5H7m = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a971798ebdL, 0x33fbc5a971798ec5L, "methods");
    /*package*/ static final SReferenceLink query$XyyR = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xa1fc5d1dac8a772L, 0xa1fc5d1dac8b45fL, "query");
    /*package*/ static final SContainmentLink parameters$guoY = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xa1fc5d1dac8a772L, 0x6443e253e20159aL, "parameters");
    /*package*/ static final SContainmentLink methods$guBZ = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xa1fc5d1dac8a772L, 0x6443e253e20159bL, "methods");
    /*package*/ static final SReferenceLink query$ysaA = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db1da0fbL, 0x1a77dd18db1da0feL, "query");
    /*package*/ static final SContainmentLink methods$ysCC = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db1da0fbL, 0x1a77dd18db1da100L, "methods");
    /*package*/ static final SContainmentLink parameters$FrbZ = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db1da0fbL, 0x33fbc5a97479e82fL, "parameters");
    /*package*/ static final SReferenceLink container$PNh7 = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a3L, 0x507f100ef01e81beL, "container");
    /*package*/ static final SContainmentLink methods$HkbO = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a3L, 0x33fbc5a96964f0a9L, "methods");
    /*package*/ static final SContainmentLink parameters$HkDQ = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a3L, 0x33fbc5a96964f0abL, "parameters");
    /*package*/ static final SReferenceLink container$PU53 = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a4L, 0x507f100ef01e81c6L, "container");
    /*package*/ static final SContainmentLink methods$HjIh = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a4L, 0x33fbc5a96964f0a7L, "methods");
    /*package*/ static final SContainmentLink queryReferences$fHmi = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x7849637c48cd1e42L, 0x7849637c48cd1e51L, "queryReferences");
    /*package*/ static final SReferenceLink event$tUVh = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea772864aL, 0x42e485aea772864dL, "event");
    /*package*/ static final SContainmentLink parameters$gIGH = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea772864aL, 0x6443e253e200e28L, "parameters");
    /*package*/ static final SContainmentLink methods$gIVI = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea772864aL, 0x6443e253e200e29L, "methods");
    /*package*/ static final SContainmentLink substitudeEvent$ZIb0 = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db67c7adL, 0x1a77dd18dbbe5dd3L, "substitudeEvent");
    /*package*/ static final SContainmentLink wrappedEvents$17E6 = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db67c7adL, 0x1a77dd18db67c7b0L, "wrappedEvents");
    /*package*/ static final SReferenceLink event$_EWX = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18daf28d4eL, 0x1a77dd18dafb9c9aL, "event");
    /*package*/ static final SContainmentLink methods$uVEc = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18daf28d4eL, 0x1a77dd18db0d137aL, "methods");
    /*package*/ static final SContainmentLink parameters$DNXU = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18daf28d4eL, 0x33fbc5a966bc25ecL, "parameters");
    /*package*/ static final SContainmentLink methods$9Lm4 = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18dbbe5dd0L, 0x33fbc5a966473286L, "methods");
    /*package*/ static final SContainmentLink parameters$RRO$ = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18dbbe5dd0L, 0x33fbc5a9664da19aL, "parameters");
    /*package*/ static final SContainmentLink methods$JWe = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a9664da00cL, 0x33fbc5a9664da198L, "methods");
  }

  final class CONCEPTS {
    /*package*/ static final SConcept ValueObjectOutput$x8 = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea747fb3aL, "CQRS.Generation.structure.ValueObjectOutput");
    /*package*/ static final SConcept EntityOutput$le = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea749033fL, "CQRS.Generation.structure.EntityOutput");
    /*package*/ static final SConcept AggregateOutput$Oo = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea7491039L, "CQRS.Generation.structure.AggregateOutput");
    /*package*/ static final SConcept AggregateConcreteInterfaceOutput$85 = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18dc10802cL, "CQRS.Generation.structure.AggregateConcreteInterfaceOutput");
    /*package*/ static final SConcept AggregateRepositoryOutput$pc = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1dL, "CQRS.Generation.structure.AggregateRepositoryOutput");
    /*package*/ static final SConcept AggregateConcreteRepositoryInterfaceOutput$pF = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1eL, "CQRS.Generation.structure.AggregateConcreteRepositoryInterfaceOutput");
    /*package*/ static final SConcept DtoOutput$Cx = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea742a568L, "CQRS.Generation.structure.DtoOutput");
    /*package*/ static final SConcept DtoRepositoryOutput$fg = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a971798ebaL, "CQRS.Generation.structure.DtoRepositoryOutput");
    /*package*/ static final SConcept DtoRepositoryInterfaceOutput$gH = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a971798ebdL, "CQRS.Generation.structure.DtoRepositoryInterfaceOutput");
    /*package*/ static final SConcept CommandOutput$e1 = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea75e79ccL, "CQRS.Generation.structure.CommandOutput");
    /*package*/ static final SConcept CommandWrapperInterfaceOutput$p1 = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x7849637c48be76e0L, "CQRS.Generation.structure.CommandWrapperInterfaceOutput");
    /*package*/ static final SConcept CommandHandlerSeparatedOutput$8m = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488ae1ebf3L, "CQRS.Generation.structure.CommandHandlerSeparatedOutput");
    /*package*/ static final SConcept CommandHandlerGroupedOutput$oa = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a9591d98baL, "CQRS.Generation.structure.CommandHandlerGroupedOutput");
    /*package*/ static final SConcept CommandHandlerGroupedInterfaceOutput$W5 = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a959da566bL, "CQRS.Generation.structure.CommandHandlerGroupedInterfaceOutput");
    /*package*/ static final SConcept QueryOutput$pT = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xa1fc5d1dac8a772L, "CQRS.Generation.structure.QueryOutput");
    /*package*/ static final SConcept QueryHandlerSeparatedOutput$yC = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db1da0fbL, "CQRS.Generation.structure.QueryHandlerSeparatedOutput");
    /*package*/ static final SConcept QueryHandlerGroupedOutput$r7 = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a3L, "CQRS.Generation.structure.QueryHandlerGroupedOutput");
    /*package*/ static final SConcept QueryHandlerGroupedInterfaceOutput$rA = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a4L, "CQRS.Generation.structure.QueryHandlerGroupedInterfaceOutput");
    /*package*/ static final SConcept QueryProcessorOutput$Zn = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x7849637c48cd1e42L, "CQRS.Generation.structure.QueryProcessorOutput");
    /*package*/ static final SConcept EventOutput$E0 = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea772864aL, "CQRS.Generation.structure.EventOutput");
    /*package*/ static final SConcept EventWrapperInterfaceOutput$TB = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db67c7adL, "CQRS.Generation.structure.EventWrapperInterfaceOutput");
    /*package*/ static final SConcept EventHandlerSeparatedOutput$jD = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18daf28d4eL, "CQRS.Generation.structure.EventHandlerSeparatedOutput");
    /*package*/ static final SConcept EventInterfaceOutput$RB = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xe220c2db6f921b8L, "CQRS.Generation.structure.EventInterfaceOutput");
    /*package*/ static final SConcept EventHandlerGroupedOutput$_S = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18dbbe5dd0L, "CQRS.Generation.structure.EventHandlerGroupedOutput");
    /*package*/ static final SConcept EventHandlerGroupedInterfaceOutput$b$ = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a9664da00cL, "CQRS.Generation.structure.EventHandlerGroupedInterfaceOutput");
    /*package*/ static final SConcept ParameterOutput$HK = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, "CQRS.Generation.structure.ParameterOutput");
    /*package*/ static final SConcept PropertyOutput$B4 = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18dd171b74L, "CQRS.Generation.structure.PropertyOutput");
    /*package*/ static final SConcept IDataTypeOutput$pO = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476f12L, "CQRS.Generation.structure.IDataTypeOutput");
    /*package*/ static final SConcept MethodOutput$_Q = MetaAdapterFactory.getConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, "CQRS.Generation.structure.MethodOutput");
  }

  final class PROPS {
    /*package*/ static final SProperty name$PbWT = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x1a77dd18dae31af3L, "name");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty isMutable$a5m2 = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x6443e2542ec4848L, "isMutable");
    /*package*/ static final SProperty isOverriding$4s$m = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x6443e2542f2bf9bL, "isOverriding");
    /*package*/ static final SProperty hideModifiers$4rph = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x6443e2542f2bf96L, "hideModifiers");
    /*package*/ static final SProperty modifier$a635 = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x6443e2542ec484bL, "modifier");
    /*package*/ static final SProperty applicationSide$w7lC = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, 0x2cd9954889e7084dL, "applicationSide");
    /*package*/ static final SProperty name$PRHY = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, 0x1a77dd18daeac9edL, "name");
    /*package*/ static final SProperty isInInterface$qwbM = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, 0x2cd995488a013454L, "isInInterface");
    /*package*/ static final SProperty isOverriding$_pUI = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, 0x2cd995488a1f3a2dL, "isOverriding");
    /*package*/ static final SProperty modifier$GQxw = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, 0x6443e252ebba4d0L, "modifier");
    /*package*/ static final SProperty hasVerticallyAlignedParameters$N1Bl = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, 0x6443e252ef7adb4L, "hasVerticallyAlignedParameters");
    /*package*/ static final SProperty applicationSide$oDHK = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea772864aL, 0x42e485aea7811736L, "applicationSide");
    /*package*/ static final SProperty appicationSide$PR1K = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db67c7adL, 0x1a77dd18db67d871L, "appicationSide");
    /*package*/ static final SProperty applicationSide$_6r5 = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xe220c2db6f921b8L, 0xe220c2db6f921baL, "applicationSide");
  }
}
