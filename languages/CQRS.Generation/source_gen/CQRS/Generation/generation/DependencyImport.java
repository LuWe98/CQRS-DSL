package CQRS.Generation.generation;

/*Generated by MPS */

import jetbrains.mps.references.Reference;
import java.util.Objects;

public class DependencyImport {

  private String myQualifiedName;
  public String getQualifiedName() {
    return this.myQualifiedName;
  }
  private void _setQualifiedName(String value) {
    this.myQualifiedName = value;
  }
  private String setQualifiedName(String value) {
    _setQualifiedName(value);
    return value;
  }
  private Reference<String> refToQualifiedName() {
    return new Reference<String>() {
      public String get() {
        return getQualifiedName();
      }
      public void set(String value) {
        _setQualifiedName(value);
      }
    };
  }

  private DependencyImport(String qualifiedName) {
    this.setQualifiedName(qualifiedName);
  }

  public String getPath() {
    return getPackage().replace(".", "/");
  }

  public String getPackage() {
    return getQualifiedName().substring(0, getQualifiedName().lastIndexOf("."));
  }

  public static DependencyImport of(String qualifiedName) {
    return new DependencyImport(qualifiedName);
  }

  public static DependencyImport of(String packageName, String className) {
    return of(packageName.concat(".").concat(className));
  }

  public static DependencyImport ofPath(String path, String className) {
    return of(path.replace("/", "."), className);
  }

  public int hashCode() {
    return getQualifiedName().hashCode();
  }

  public boolean equals(Object other) {
    if (!(other instanceof DependencyImport)) {
      return false;
    }
    return Objects.equals(this.getQualifiedName(), as_ip1g8o_a0b0b0v(other, DependencyImport.class).getQualifiedName());
  }

  private static <T> T as_ip1g8o_a0b0b0v(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
