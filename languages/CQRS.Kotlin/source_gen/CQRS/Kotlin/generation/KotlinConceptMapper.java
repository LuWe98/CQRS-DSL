package CQRS.Kotlin.generation;

/*Generated by MPS */

import CQRS.Generation.generation.ConceptMapper;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import CQRS.Generation.generation.GenerationTarget;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class KotlinConceptMapper implements ConceptMapper {

  private Map<SAbstractConcept, SAbstractConcept> fileOutputMappings;

  private Map<SAbstractConcept, SAbstractConcept> elementOutputMappings;

  public KotlinConceptMapper(SModel cqrsModel) {
    initConceptMappings(cqrsModel);
  }

  private void initConceptMappings(SModel cqrsModel) {
    fileOutputMappings = MapSequence.fromMap(new HashMap<SAbstractConcept, SAbstractConcept>());
    ListSequence.fromList(SConceptOperations.getAllSubConcepts(CONCEPTS.KotlinFileOutput$$w, cqrsModel)).visitAll(new IVisitor<SAbstractConcept>() {
      public void visit(SAbstractConcept it) {
        MapSequence.fromMap(fileOutputMappings).put(SNodeOperations.castConcept(it.getSuperConcept(), CONCEPTS.FileOutput$PQ), it);
      }
    });

    elementOutputMappings = MapSequence.fromMap(new HashMap<SAbstractConcept, SAbstractConcept>());
    ListSequence.fromList(SConceptOperations.getAllSubConcepts(CONCEPTS.KotlinElementOutput$Nm, cqrsModel)).visitAll(new IVisitor<SAbstractConcept>() {
      public void visit(SAbstractConcept it) {
        MapSequence.fromMap(elementOutputMappings).put(SNodeOperations.castConcept(it.getSuperConcept(), CONCEPTS.ElementOutput$CK), it);
      }
    });
  }

  @Override
  public GenerationTarget getGenerationTarget() {
    return GenerationTarget.KOTLIN;
  }

  @Override
  public Map<SAbstractConcept, SAbstractConcept> getFileOutputMappings() {
    return fileOutputMappings;
  }

  @Override
  public Map<SAbstractConcept, SAbstractConcept> getElementOutputMappings() {
    return elementOutputMappings;
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept KotlinFileOutput$$w = MetaAdapterFactory.getInterfaceConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x42e485aea7285acaL, "CQRS.Kotlin.structure.KotlinFileOutput");
    /*package*/ static final SInterfaceConcept FileOutput$PQ = MetaAdapterFactory.getInterfaceConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xa1fc5d1dac8b627L, "CQRS.Generation.structure.FileOutput");
    /*package*/ static final SInterfaceConcept KotlinElementOutput$Nm = MetaAdapterFactory.getInterfaceConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x2cd995488a016d2aL, "CQRS.Kotlin.structure.KotlinElementOutput");
    /*package*/ static final SInterfaceConcept ElementOutput$CK = MetaAdapterFactory.getInterfaceConcept(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d152aL, "CQRS.Generation.structure.ElementOutput");
  }
}
