package CQRS.Kotlin.generation;

/*Generated by MPS */

import CQRS.Generation.generation.JavaTypeTextConverter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CQRS.util.JavaTypeCheckUtils;
import java.util.Objects;
import jetbrains.mps.baseLanguage.behavior.Type__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class KotlinJavaTypeTextConverter implements JavaTypeTextConverter {

  @Override
  public String convertPrimitiveType(SNode primitiveType) {
    return convertPrimitiveType(SNodeOperations.getConcept(primitiveType));
  }

  public String convertPrimitiveType(SConcept primitiveTypeConcept) {
    SAbstractConcept cncpt = primitiveTypeConcept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return "Boolean";
      case 1:
        return "Byte";
      case 2:
        return "Char";
      case 3:
        return "Double";
      case 4:
        return "FLoat";
      case 5:
        return "Integer";
      case 6:
        return "Long";
      case 7:
        return "Short";
      case 8:
        return "String";
      default:
    }

    throw new IllegalStateException("Could not resolve primitive: " + primitiveTypeConcept);
  }

  @Override
  public String convertStringType(SNode stringType) {
    return "String";
  }

  @Override
  public String convertArrayType(SNode arrayType) {
    return "Array".concat("<").concat(convertType(SLinkOperations.getTarget(arrayType, LINKS.componentType$F$Gi))).concat(">");
  }

  @Override
  public String convertClassifierType(SNode classifierType) {
    SConcept primitive = JavaTypeCheckUtils.getPrimitiveConceptOf(classifierType);

    if (!(Objects.equals(primitive, null))) {
      return convertPrimitiveType(primitive);
    }

    if (Objects.equals(Type__BehaviorDescriptor.jniSignature_id7F81Cd2C7e3.invoke(classifierType), JavaTypeCheckUtils.STRING_JNI)) {
      return convertStringType(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47da71ecL, "jetbrains.mps.baseLanguage.structure.StringType")));
    }

    String result = SPropertyOperations.getString(SLinkOperations.getTarget(classifierType, LINKS.classifier$cxMr), PROPS.name$MnvL);
    if (ListSequence.fromList(SLinkOperations.getChildren(classifierType, LINKS.parameter$oqG$)).isNotEmpty()) {
      result = result.concat("<").concat(IterableUtils.join(ListSequence.fromList(SLinkOperations.getChildren(classifierType, LINKS.parameter$oqG$)).select(new ISelector<SNode, String>() {
        public String select(SNode type) {
          return convertType(type);
        }
      }), ", ")).concat(">");
    }
    return result;
  }


  @Override
  public String convertWildCardType(SNode wildCardType) {
    return "*";
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d6513eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d5b617L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d4f826L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d451a6L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d327fdL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d22479L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f3L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940cc380dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47da71ecL)).seal();

  private static final class LINKS {
    /*package*/ static final SContainmentLink componentType$F$Gi = MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, 0xf940d819f8L, "componentType");
    /*package*/ static final SReferenceLink classifier$cxMr = MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier");
    /*package*/ static final SContainmentLink parameter$oqG$ = MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x102419671abL, "parameter");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
