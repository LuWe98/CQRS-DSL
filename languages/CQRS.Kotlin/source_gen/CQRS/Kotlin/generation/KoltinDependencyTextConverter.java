package CQRS.Kotlin.generation;

/*Generated by MPS */

import CQRS.Generation.generation.DependencyTextConverter;
import CQRS.Generation.generation.GenerationTarget;
import org.jetbrains.mps.openapi.model.SNode;
import CQRS.Generation.util.StringUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CQRS.behavior.ImportedType__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class KoltinDependencyTextConverter implements DependencyTextConverter {

  private KotlinJavaTypeTextConverter textConverter = new KotlinJavaTypeTextConverter();

  @Override
  public GenerationTarget getGenerationTarget() {
    return GenerationTarget.KOTLIN;
  }

  @Override
  public String convertPrimitive(SNode primitive) {
    return StringUtil.firstToUpper(SConceptOperations.conceptAlias(SNodeOperations.getConcept(primitive)));
  }

  @Override
  public String convertCollection(SNode collection) {
    return StringUtil.firstToUpper(SConceptOperations.conceptAlias(SNodeOperations.getConcept(collection))).concat("<").concat(convertType(SLinkOperations.getTarget(collection, LINKS.elementType$AnT5))).concat(">");
  }

  @Override
  public String convertMapType(SNode map) {
    return "Map".concat("<").concat(convertType(SLinkOperations.getTarget(map, LINKS.keyType$mrlA))).concat(", ").concat(convertType(SLinkOperations.getTarget(map, LINKS.valueType$mrNC))).concat(">");
  }

  @Override
  public String convertImportedType(SNode importedType) {
    if (!((boolean) ImportedType__BehaviorDescriptor.expectsGenericTypes_id3aCsR_d7tlX.invoke(importedType))) {
      return ImportedType__BehaviorDescriptor.getName_id4p0keayJ2pN.invoke(importedType);
    }
    return ImportedType__BehaviorDescriptor.getName_id4p0keayJ2pN.invoke(importedType).concat("<").concat(IterableUtils.join(ListSequence.fromList(SLinkOperations.getChildren(importedType, LINKS.actualTypes$o6Gi)).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return convertType(it);
      }
    }), ", ")).concat(">");
  }

  @Override
  public String convertJavaDataType(SNode javaDataType) {
    return textConverter.convertJavaType(javaDataType);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink elementType$AnT5 = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829cbdL, 0x20f56dfff71fcf5aL, "elementType");
    /*package*/ static final SContainmentLink keyType$mrlA = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x783dbe7d5ebb3779L, 0x783dbe7d5ebb377cL, "keyType");
    /*package*/ static final SContainmentLink valueType$mrNC = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x783dbe7d5ebb3779L, 0x783dbe7d5ebb377eL, "valueType");
    /*package*/ static final SContainmentLink actualTypes$o6Gi = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8edL, 0x5e223a0a0b9c13cdL, "actualTypes");
  }
}
