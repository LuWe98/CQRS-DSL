package CQRS.Kotlin.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import CQRS.Generation.generation.DependencyResolver;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import CQRS.Generation.generation.DependencyTextConverter;
import CQRS.Generation.generation.ConceptMapper;
import CQRS.Generation.generation.DependencyImport;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import CQRS.Generation.behavior.ComponentOutput__BehaviorDescriptor;
import CQRS.Generation.generation.GenerationTarget;
import CQRS.Generation.behavior.FileOutput__BehaviorDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class KotlinFileOutput__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x42e485aea7285acaL, "CQRS.Kotlin.structure.KotlinFileOutput");

  public static final SMethod<DependencyResolver> resolver_id4b$xqUBa5Fw = new SMethodBuilder<DependencyResolver>(new SJavaCompoundTypeImpl(DependencyResolver.class)).name("resolver").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4820124486368516832L).languageId(0x990e6280d48112f6L, 0x21c0c49f06c045cbL).build2();
  public static final SMethod<DependencyTextConverter> converter_id4b$xqUBeLAT = new SMethodBuilder<DependencyTextConverter>(new SJavaCompoundTypeImpl(DependencyTextConverter.class)).name("converter").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4820124486369745337L).languageId(0x990e6280d48112f6L, 0x21c0c49f06c045cbL).build2();
  public static final SMethod<ConceptMapper> mapper_idSy32QQY46b = new SMethodBuilder<ConceptMapper>(new SJavaCompoundTypeImpl(ConceptMapper.class)).name("mapper").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1018389856221938059L).languageId(0x990e6280d48112f6L, 0x21c0c49f06c045cbL).build2();
  public static final SMethod<DependencyImport> getImport_idSy32QQYs3n = new SMethodBuilder<DependencyImport>(new SJavaCompoundTypeImpl(DependencyImport.class)).name("getImport").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1018389856222036183L).languageId(0x990e6280d48112f6L, 0x21c0c49f06c045cbL).build2();
  public static final SMethod<String> getPackage_id4b$xqUBcV62 = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getPackage").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4820124486369259906L).languageId(0x990e6280d48112f6L, 0x21c0c49f06c045cbL).build2();
  public static final SMethod<String> getPath_id4b$xqUBcV69 = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getPath").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4820124486369259913L).languageId(0x990e6280d48112f6L, 0x21c0c49f06c045cbL).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(resolver_id4b$xqUBa5Fw, converter_id4b$xqUBeLAT, mapper_idSy32QQY46b, getImport_idSy32QQYs3n, getPackage_id4b$xqUBcV62, getPath_id4b$xqUBcV69);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static DependencyResolver resolver_id4b$xqUBa5Fw(@NotNull SNode __thisNode__) {
    return ((DependencyResolver) ComponentOutput__BehaviorDescriptor.resolver_id4b$xqUBa0Kt.invoke(__thisNode__, GenerationTarget.KOTLIN));
  }
  /*package*/ static DependencyTextConverter converter_id4b$xqUBeLAT(@NotNull SNode __thisNode__) {
    return ((DependencyTextConverter) ComponentOutput__BehaviorDescriptor.converter_id2Np_kya0nik.invoke(__thisNode__, GenerationTarget.KOTLIN));
  }
  /*package*/ static ConceptMapper mapper_idSy32QQY46b(@NotNull SNode __thisNode__) {
    return ((ConceptMapper) ComponentOutput__BehaviorDescriptor.mapper_id2Np_kya0nit.invoke(__thisNode__, GenerationTarget.KOTLIN));
  }
  /*package*/ static DependencyImport getImport_idSy32QQYs3n(@NotNull SNode __thisNode__) {
    return ((DependencyImport) FileOutput__BehaviorDescriptor.getImport_idSy32QQYkNm.invoke(__thisNode__, GenerationTarget.KOTLIN));
  }
  /*package*/ static String getPackage_id4b$xqUBcV62(@NotNull SNode __thisNode__) {
    return ((String) FileOutput__BehaviorDescriptor.getPackage_id4b$xqUB5Cbg.invoke(__thisNode__, GenerationTarget.KOTLIN));
  }
  /*package*/ static String getPath_id4b$xqUBcV69(@NotNull SNode __thisNode__) {
    return ((String) FileOutput__BehaviorDescriptor.getPath_id4b$xqUB5Cbo.invoke(__thisNode__, GenerationTarget.KOTLIN));
  }

  /*package*/ KotlinFileOutput__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((DependencyResolver) resolver_id4b$xqUBa5Fw(node));
      case 1:
        return (T) ((DependencyTextConverter) converter_id4b$xqUBeLAT(node));
      case 2:
        return (T) ((ConceptMapper) mapper_idSy32QQY46b(node));
      case 3:
        return (T) ((DependencyImport) getImport_idSy32QQYs3n(node));
      case 4:
        return (T) ((String) getPackage_id4b$xqUBcV62(node));
      case 5:
        return (T) ((String) getPath_id4b$xqUBcV69(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
