package CQRS.Kotlin.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.Set;
import CQRS.Generation.generation.DependencyImport;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import CQRS.Generation.generation.DependencyResolver;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import CQRS.Generation.behavior.MethodOutput__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class MethodKotlinOutput__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x607c1e67c05d0f73L, "CQRS.Kotlin.structure.MethodKotlinOutput");

  public static final SMethod<Set<DependencyImport>> getImports_id4yUYSn0sW9K = new SMethodBuilder<Set<DependencyImport>>(new SJavaCompoundTypeImpl((Class<Set<DependencyImport>>) ((Class) Object.class))).name("getImports").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5240777668277027440L).languageId(0x8484525ea753e78bL, 0x273bc31819694c83L).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getImports_id4yUYSn0sW9K);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Set<DependencyImport> getImports_id4yUYSn0sW9K(@NotNull SNode __thisNode__) {
    DependencyResolver resolver = KotlinElementOutput__BehaviorDescriptor.resolver_id2Np_kyawVms.invoke(__thisNode__);

    Set<DependencyImport> imports = SetSequence.fromSet(new HashSet<DependencyImport>());
    if (((boolean) MethodOutput__BehaviorDescriptor.hasReturnValue_idp4fykJ0jWj.invoke(__thisNode__))) {
      SetSequence.fromSet(imports).addSequence(SetSequence.fromSet(resolver.resolveType(SLinkOperations.getTarget(__thisNode__, LINKS.returnType$FbaL), SPropertyOperations.getEnum(__thisNode__, PROPS.applicationSide$w7lC))));
    }
    SetSequence.fromSet(imports).addSequence(SetSequence.fromSet(resolver.resolveTypes(SLinkOperations.collect(SLinkOperations.getChildren(__thisNode__, LINKS.parameters$F5jo), LINKS.type$Phmg), SPropertyOperations.getEnum(__thisNode__, PROPS.applicationSide$w7lC))));

    return imports;
  }

  /*package*/ MethodKotlinOutput__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Set<DependencyImport>) getImports_id4yUYSn0sW9K(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink returnType$FbaL = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, 0x1a77dd18dac2db39L, "returnType");
    /*package*/ static final SContainmentLink parameters$F5jo = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, 0x1a77dd18dac2db35L, "parameters");
    /*package*/ static final SContainmentLink type$Phmg = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x1a77dd18dae31af5L, "type");
  }

  private static final class PROPS {
    /*package*/ static final SProperty applicationSide$w7lC = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x607c1e67c05d1524L, 0x2cd9954889e7084dL, "applicationSide");
  }
}
