package CQRS.Kotlin.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import CQRS.Generation.generation.DependencyUtils;
import CQRS.Generation.textGen.CqrsTextGenComponents;

public class QueryProcessorImplKotlinOutput_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    String queryContainer = DependencyUtils.QUERY_HANDLER_CONTAINER_NAME;
    String queryProcessor = DependencyUtils.QUERY_PROCESSOR_NAME;
    String queryProcessorImpl = DependencyUtils.QUERY_PROCESSOR_IMPL_NAME;

    KotlinTextGenComponents.header(ctx.getPrimaryInput(), ctx);

    KotlinTextGenComponents._class(queryProcessorImpl, ctx);
    tgs.append("(");
    CqrsTextGenComponents.newLine(ctx);
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("private val queryHandlerContainer: ");
    tgs.append(queryContainer);
    CqrsTextGenComponents.newLine(ctx);
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("): ");
    tgs.append(queryProcessor);
    tgs.append("{");
    CqrsTextGenComponents.newLines(2, ctx);
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("override fun <Result> process(query: ");
    tgs.append(DependencyUtils.QUERY_INTERFACE_NAME);
    tgs.append("<Result>): Result {");
    CqrsTextGenComponents.newLine(ctx);
    tgs.indent();
    tgs.indent();
    tgs.append("return queryHandlerContainer.getQueryHandler(query::class).handle(query)");
    CqrsTextGenComponents.newLine(ctx);
    tgs.indent();
    tgs.append("}");
    CqrsTextGenComponents.newLines(2, ctx);
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
  }
}
