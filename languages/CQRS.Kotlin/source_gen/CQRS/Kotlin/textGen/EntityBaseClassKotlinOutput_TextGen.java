package CQRS.Kotlin.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import CQRS.Kotlin.behavior.KotlinFileOutput__BehaviorDescriptor;
import CQRS.Generation.textGen.CqrsTextGenComponents;

public class EntityBaseClassKotlinOutput_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    KotlinTextGenComponents._package(KotlinFileOutput__BehaviorDescriptor.getPackage_id4b$xqUBcV62.invoke(ctx.getPrimaryInput()), ctx);

    KotlinTextGenComponents._abstractclass("Entity<ID>(", ctx);
    CqrsTextGenComponents.newLine(ctx);
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("private val id: ID");
    CqrsTextGenComponents.newLine(ctx);
    ctx.getBuffer().area().decreaseIndent();
    tgs.append(") {");
    CqrsTextGenComponents.newLine(ctx);
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("fun getId() = id");
    CqrsTextGenComponents.newLine(ctx);
    tgs.indent();
    tgs.append("override fun hashCode(): Int = getId().hashCode()");
    CqrsTextGenComponents.newLine(ctx);
    tgs.indent();
    tgs.append("override fun equals(other: Any?): Boolean {");
    CqrsTextGenComponents.newLine(ctx);
    tgs.indent();
    tgs.indent();
    tgs.append("if(other == null || other !is Entity<*>) return false");
    CqrsTextGenComponents.newLine(ctx);
    tgs.indent();
    tgs.indent();
    tgs.append("return getId() == other.getId()");
    CqrsTextGenComponents.newLine(ctx);
    tgs.indent();
    tgs.append("}");
    CqrsTextGenComponents.newLine(ctx);
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
  }
}
