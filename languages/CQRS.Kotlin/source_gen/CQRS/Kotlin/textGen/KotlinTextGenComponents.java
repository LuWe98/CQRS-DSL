package CQRS.Kotlin.textGen;

/*Generated by MPS */

import CQRS.Generation.textGen.CqrsTextGenComponents;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import CQRS.Kotlin.behavior.KotlinFileOutput__BehaviorDescriptor;
import CQRS.Generation.behavior.ComponentOutput__BehaviorDescriptor;
import CQRS.Generation.generation.DependencyImport;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import CQRS.Generation.generation.ConceptMapper;

public abstract class KotlinTextGenComponents extends CqrsTextGenComponents {
  public static void header(SNode fileOutput, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    KotlinTextGenComponents._package(KotlinFileOutput__BehaviorDescriptor.getPackage_id4b$xqUBcV62.invoke(fileOutput), ctx);
    KotlinTextGenComponents._imports(ComponentOutput__BehaviorDescriptor.getImports_id4yUYSn0sW9K.invoke(fileOutput), ctx);
  }
  public static void _imports(Iterable<DependencyImport> importValue, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    Sequence.fromIterable(importValue).visitAll(new IVisitor<DependencyImport>() {
      public void visit(DependencyImport it) {
        tgs.append("import ");
        tgs.append(it.getQualifiedName());
        tgs.newLine();
      }
    });
    tgs.newLine();
  }
  public static void _import(String importValue, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("import ");
    tgs.append(importValue);
    tgs.newLine();
    tgs.newLine();
  }
  public static void _package(String value, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("package ");
    tgs.append(value);
    tgs.newLine();
    tgs.newLine();
  }
  public static void _interface(String name, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("interface ");
    tgs.append(name);
  }
  public static void _class(String name, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("class ");
    tgs.append(name);
  }
  public static void _abstractclass(String name, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("abstract class ");
    tgs.append(name);
  }
  public static void _dataclass(String name, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("data class ");
    tgs.append(name);
  }
  public static void _object(String name, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("object ");
    tgs.append(name);
  }
  public static void parameters(Iterable<SNode> parameters, boolean isVertical, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    if (isVertical) {
      KotlinTextGenComponents.verticalParameters(parameters, ctx);
    } else {
      KotlinTextGenComponents.horizontalParameters(parameters, ctx);
    }
  }
  public static void verticalParameters(Iterable<SNode> parameters, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    if (Sequence.fromIterable(parameters).isEmpty()) {
      return;
    }
    List<SNode> parameterList = Sequence.fromIterable(parameters).toListSequence();

    tgs.increaseIndent();
    CqrsTextGenComponents.newLine(ctx);
    for (int i = 0; i < ListSequence.fromList(parameterList).count(); i++) {
      tgs.indent();
      tgs.appendNode(ListSequence.fromList(parameterList).getElement(i));
      if (i != ListSequence.fromList(parameterList).count() - 1) {
        tgs.append(",");
      }
      CqrsTextGenComponents.newLine(ctx);
    }
    tgs.decreaseIndent();
  }
  public static void horizontalParameters(Iterable<SNode> parameters, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    if (Sequence.fromIterable(parameters).isEmpty()) {
      return;
    }
    List<SNode> parameterList = Sequence.fromIterable(parameters).toListSequence();

    for (int i = 0; i < ListSequence.fromList(parameterList).count(); i++) {
      tgs.appendNode(ListSequence.fromList(parameterList).getElement(i));
      if (i != ListSequence.fromList(parameterList).count() - 1) {
        tgs.append(", ");
      }
    }
  }
  public static void methods_(Iterable<SNode> methods, final ConceptMapper mapper, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    Sequence.fromIterable(methods).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        tgs.indent();
        tgs.appendNode(mapper.mapMethod(it));
        CqrsTextGenComponents.newLines(2, ctx);
      }
    });
  }
  public static void methods(Iterable<SNode> methods, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    Sequence.fromIterable(methods).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        tgs.indent();
        tgs.appendNode(it);
        CqrsTextGenComponents.newLines(2, ctx);
      }
    });
  }
  public static void properties(Iterable<SNode> properties, final ConceptMapper mapper, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    if (Sequence.fromIterable(properties).isEmpty()) {
      return;
    }

    Sequence.fromIterable(properties).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        tgs.indent();
        tgs.appendNode(mapper.mapProperty(it));
        CqrsTextGenComponents.newLines(2, ctx);
      }
    });
  }
}
