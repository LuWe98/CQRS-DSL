package CQRS.Kotlin.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import CQRS.Generation.generation.DependencyUtils;
import CQRS.Generation.textGen.CqrsTextGenComponents;

public class EventAggregateBaseClassKotlinOutput_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    KotlinTextGenComponents.header(ctx.getPrimaryInput(), ctx);

    KotlinTextGenComponents._abstractclass(DependencyUtils.BASE_EVENT_AGGREGATE_NAME, ctx);
    tgs.append("<ID, EventType: ");
    tgs.append(DependencyUtils.EVENT_INTERFACE_NAME);
    tgs.append(">(");
    CqrsTextGenComponents.newLine(ctx);
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("private val id: ID");
    CqrsTextGenComponents.newLine(ctx);
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("): ");
    tgs.append(DependencyUtils.EVENT_AGGREGATE_INTERFACE_NAME);
    tgs.append("<ID, EventType> {");
    CqrsTextGenComponents.newLines(2, ctx);

    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("private val changes = mutableListOf<EventType>()");
    CqrsTextGenComponents.newLines(2, ctx);

    tgs.indent();
    tgs.append("final override fun getId(): ID = id");
    CqrsTextGenComponents.newLines(2, ctx);

    tgs.indent();
    tgs.append("final override fun getChanges(): List<EventType> = changes.toList()");
    CqrsTextGenComponents.newLines(2, ctx);

    tgs.indent();
    tgs.append("final override fun recreateWith(events: List<EventType>) = events.forEach(::handleEvent)");
    CqrsTextGenComponents.newLines(2, ctx);

    tgs.indent();
    tgs.append("final override fun cacheChange(event: EventType) {");
    CqrsTextGenComponents.newLine(ctx);
    tgs.indent();
    tgs.indent();
    tgs.append("changes.add(event)");
    CqrsTextGenComponents.newLine(ctx);
    tgs.indent();
    tgs.indent();
    tgs.append("handleEvent(event)");
    CqrsTextGenComponents.newLine(ctx);
    tgs.indent();
    tgs.append("}");
    CqrsTextGenComponents.newLines(2, ctx);

    tgs.indent();
    tgs.append("abstract fun handleEvent(event: EventType)");
    CqrsTextGenComponents.newLines(2, ctx);
    ctx.getBuffer().area().decreaseIndent();

    tgs.append("}");

  }
}
