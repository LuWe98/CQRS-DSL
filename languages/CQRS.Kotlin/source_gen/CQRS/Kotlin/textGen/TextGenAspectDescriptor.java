package CQRS.Kotlin.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import CQRS.Kotlin.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CQRS.Generation.generation.DependencyUtils;
import CQRS.behavior.AggregateRootRepository__BehaviorDescriptor;
import CQRS.behavior.CommandContainer__BehaviorDescriptor;
import CQRS.behavior.QueryContainer__BehaviorDescriptor;
import CQRS.behavior.IRepository__BehaviorDescriptor;
import CQRS.Generation.generation.GenerationTarget;
import CQRS.Kotlin.behavior.KotlinFileOutput__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.AggregateConcreteInterfaceKotlinOutput:
        return new AggregateConcreteInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.AggregateConcreteRepositoryInterfaceKotlinOutput:
        return new AggregateConcreteRepositoryInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.AggregateIdRepositoryInterfaceKotlinOutput:
        return new AggregateIdRepositoryInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.AggregateInterfaceKotlinOutput:
        return new AggregateInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.AggregateKotlinOutput:
        return new AggregateKotlinOutput_TextGen();
      case LanguageConceptSwitch.AggregateRepositoryInterfaceKotlinOutput:
        return new AggregateRepositoryInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.AggregateRepositoryKotlinOutput:
        return new AggregateRepositoryKotlinOutput_TextGen();
      case LanguageConceptSwitch.CommandHandlerGroupedInterfaceKotlinOutput:
        return new CommandHandlerGroupedInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.CommandHandlerGroupedKotlinOutput:
        return new CommandHandlerGroupedKotlinOutput_TextGen();
      case LanguageConceptSwitch.CommandHandlerInterfaceKotlinOutput:
        return new CommandHandlerInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.CommandHandlerSeparatedKotlinOutput:
        return new CommandHandlerSeparatedKotlinOutput_TextGen();
      case LanguageConceptSwitch.CommandInterfaceKotlinOutput:
        return new CommandInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.CommandKotlinOutput:
        return new CommandKotlinOutput_TextGen();
      case LanguageConceptSwitch.CommandWrapperInterfaceKotlinOutput:
        return new CommandWrapperInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.DtoKotlinOutput:
        return new DtoKotlinOutput_TextGen();
      case LanguageConceptSwitch.DtoRepositoryInterfaceKotlinOutput:
        return new DtoRepositoryInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.DtoRepositoryKotlinOutput:
        return new DtoRepositoryKotlinOutput_TextGen();
      case LanguageConceptSwitch.EntitiyKotlinOutput:
        return new EntitiyKotlinOutput_TextGen();
      case LanguageConceptSwitch.EntityBaseClassKotlinOutput:
        return new EntityBaseClassKotlinOutput_TextGen();
      case LanguageConceptSwitch.EventAggregateBaseClassKotlinOutput:
        return new EventAggregateBaseClassKotlinOutput_TextGen();
      case LanguageConceptSwitch.EventAggregateInterfaceKotlinOutput:
        return new EventAggregateInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.EventHandlerGroupedInterfaceKotlinOutput:
        return new EventHandlerGroupedInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.EventHandlerGroupedKotlinOutput:
        return new EventHandlerGroupedKotlinOutput_TextGen();
      case LanguageConceptSwitch.EventHandlerInterfaceKotlinOutput:
        return new EventHandlerInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.EventHandlerSeparatedKotlinOutput:
        return new EventHandlerSeparatedKotlinOutput_TextGen();
      case LanguageConceptSwitch.EventInterfaceKotlinOutput:
        return new EventInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.EventKotlinOutput:
        return new EventKotlinOutput_TextGen();
      case LanguageConceptSwitch.EventWrapperInterfaceKotlinOutput:
        return new EventWrapperInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.IDataTypeKotlinOutput:
        return new IDataTypeKotlinOutput_TextGen();
      case LanguageConceptSwitch.MethodKotlinOutput:
        return new MethodKotlinOutput_TextGen();
      case LanguageConceptSwitch.ParameterKotlinOutput:
        return new ParameterKotlinOutput_TextGen();
      case LanguageConceptSwitch.PropertyKotlinOutput:
        return new PropertyKotlinOutput_TextGen();
      case LanguageConceptSwitch.QueryHandlerContainerImplKotlinOutput:
        return new QueryHandlerContainerImplKotlinOutput_TextGen();
      case LanguageConceptSwitch.QueryHandlerContainerKotlinOutput:
        return new QueryHandlerContainerKotlinOutput_TextGen();
      case LanguageConceptSwitch.QueryHandlerGroupedInterfaceKotlinOutput:
        return new QueryHandlerGroupedInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.QueryHandlerGroupedKotlinOutput:
        return new QueryHandlerGroupedKotlinOutput_TextGen();
      case LanguageConceptSwitch.QueryHandlerInterfaceKotlinOutput:
        return new QueryHandlerInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.QueryHandlerSeparatedKotlinOutput:
        return new QueryHandlerSeparatedKotlinOutput_TextGen();
      case LanguageConceptSwitch.QueryInterfaceKotlinOutput:
        return new QueryInterfaceKotlinOutput_TextGen();
      case LanguageConceptSwitch.QueryKotlinOutput:
        return new QueryKotlinOutput_TextGen();
      case LanguageConceptSwitch.QueryProcessorImplKotlinOutput:
        return new QueryProcessorImplKotlinOutput_TextGen();
      case LanguageConceptSwitch.QueryProcessorKotlinOutput:
        return new QueryProcessorKotlinOutput_TextGen();
      case LanguageConceptSwitch.ValueObjectKotlinOutput:
        return new ValueObjectKotlinOutput_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.QueryKotlinOutput$sN)) {
        String fname = getFileName_QueryKotlinOutput(root);
        String ext = getFileExtension_QueryKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_QueryKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.QueryInterfaceKotlinOutput$Vt)) {
        String fname = getFileName_QueryInterfaceKotlinOutput(root);
        String ext = getFileExtension_QueryInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_QueryInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.DtoKotlinOutput$h6)) {
        String fname = getFileName_DtoKotlinOutput(root);
        String ext = getFileExtension_DtoKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_DtoKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.ValueObjectKotlinOutput$4t)) {
        String fname = getFileName_ValueObjectKotlinOutput(root);
        String ext = getFileExtension_ValueObjectKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_ValueObjectKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.EntitiyKotlinOutput$CZ)) {
        String fname = getFileName_EntitiyKotlinOutput(root);
        String ext = getFileExtension_EntitiyKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_EntitiyKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.AggregateKotlinOutput$OB)) {
        String fname = getFileName_AggregateKotlinOutput(root);
        String ext = getFileExtension_AggregateKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_AggregateKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.CommandKotlinOutput$ZZ)) {
        String fname = getFileName_CommandKotlinOutput(root);
        String ext = getFileExtension_CommandKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_CommandKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.CommandInterfaceKotlinOutput$iT)) {
        String fname = getFileName_CommandInterfaceKotlinOutput(root);
        String ext = getFileExtension_CommandInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_CommandInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.CommandHandlerInterfaceKotlinOutput$jo)) {
        String fname = getFileName_CommandHandlerInterfaceKotlinOutput(root);
        String ext = getFileExtension_CommandHandlerInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_CommandHandlerInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.EventHandlerInterfaceKotlinOutput$PF)) {
        String fname = getFileName_EventHandlerInterfaceKotlinOutput(root);
        String ext = getFileExtension_EventHandlerInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_EventHandlerInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.EventInterfaceKotlinOutput$a6)) {
        String fname = getFileName_EventInterfaceKotlinOutput(root);
        String ext = getFileExtension_EventInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_EventInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.QueryHandlerInterfaceKotlinOutput$i2)) {
        String fname = getFileName_QueryHandlerInterfaceKotlinOutput(root);
        String ext = getFileExtension_QueryHandlerInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_QueryHandlerInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.AggregateInterfaceKotlinOutput$iB)) {
        String fname = getFileName_AggregateInterfaceKotlinOutput(root);
        String ext = getFileExtension_AggregateInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_AggregateInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.EventAggregateInterfaceKotlinOutput$k4)) {
        String fname = getFileName_EventAggregateInterfaceKotlinOutput(root);
        String ext = getFileExtension_EventAggregateInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_EventAggregateInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.EventAggregateBaseClassKotlinOutput$mi)) {
        String fname = getFileName_EventAggregateBaseClassKotlinOutput(root);
        String ext = getFileExtension_EventAggregateBaseClassKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_EventAggregateBaseClassKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.CommandHandlerSeparatedKotlinOutput$5q)) {
        String fname = getFileName_CommandHandlerSeparatedKotlinOutput(root);
        String ext = getFileExtension_CommandHandlerSeparatedKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_CommandHandlerSeparatedKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.EventHandlerSeparatedKotlinOutput$VK)) {
        String fname = getFileName_EventHandlerSeparatedKotlinOutput(root);
        String ext = getFileExtension_EventHandlerSeparatedKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_EventHandlerSeparatedKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.QueryHandlerSeparatedKotlinOutput$6c)) {
        String fname = getFileName_QueryHandlerSeparatedKotlinOutput(root);
        String ext = getFileExtension_QueryHandlerSeparatedKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_QueryHandlerSeparatedKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.EventWrapperInterfaceKotlinOutput$pK)) {
        String fname = getFileName_EventWrapperInterfaceKotlinOutput(root);
        String ext = getFileExtension_EventWrapperInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_EventWrapperInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.AggregateConcreteInterfaceKotlinOutput$HL)) {
        String fname = getFileName_AggregateConcreteInterfaceKotlinOutput(root);
        String ext = getFileExtension_AggregateConcreteInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_AggregateConcreteInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.AggregateRepositoryInterfaceKotlinOutput$_A)) {
        String fname = getFileName_AggregateRepositoryInterfaceKotlinOutput(root);
        String ext = getFileExtension_AggregateRepositoryInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_AggregateRepositoryInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.AggregateIdRepositoryInterfaceKotlinOutput$Le)) {
        String fname = getFileName_AggregateIdRepositoryInterfaceKotlinOutput(root);
        String ext = getFileExtension_AggregateIdRepositoryInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_AggregateIdRepositoryInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.AggregateConcreteRepositoryInterfaceKotlinOutput$Kg)) {
        String fname = getFileName_AggregateConcreteRepositoryInterfaceKotlinOutput(root);
        String ext = getFileExtension_AggregateConcreteRepositoryInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_AggregateConcreteRepositoryInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.AggregateRepositoryKotlinOutput$KJ)) {
        String fname = getFileName_AggregateRepositoryKotlinOutput(root);
        String ext = getFileExtension_AggregateRepositoryKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_AggregateRepositoryKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.CommandHandlerGroupedKotlinOutput$qs)) {
        String fname = getFileName_CommandHandlerGroupedKotlinOutput(root);
        String ext = getFileExtension_CommandHandlerGroupedKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_CommandHandlerGroupedKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.CommandHandlerGroupedInterfaceKotlinOutput$ft)) {
        String fname = getFileName_CommandHandlerGroupedInterfaceKotlinOutput(root);
        String ext = getFileExtension_CommandHandlerGroupedInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_CommandHandlerGroupedInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.EventHandlerGroupedInterfaceKotlinOutput$i$)) {
        String fname = getFileName_EventHandlerGroupedInterfaceKotlinOutput(root);
        String ext = getFileExtension_EventHandlerGroupedInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_EventHandlerGroupedInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.EventHandlerGroupedKotlinOutput$f)) {
        String fname = getFileName_EventHandlerGroupedKotlinOutput(root);
        String ext = getFileExtension_EventHandlerGroupedKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_EventHandlerGroupedKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.QueryHandlerGroupedInterfaceKotlinOutput$j1)) {
        String fname = getFileName_QueryHandlerGroupedInterfaceKotlinOutput(root);
        String ext = getFileExtension_QueryHandlerGroupedInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_QueryHandlerGroupedInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.QueryHandlerGroupedKotlinOutput$h$)) {
        String fname = getFileName_QueryHandlerGroupedKotlinOutput(root);
        String ext = getFileExtension_QueryHandlerGroupedKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_QueryHandlerGroupedKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.DtoRepositoryKotlinOutput$Go)) {
        String fname = getFileName_DtoRepositoryKotlinOutput(root);
        String ext = getFileExtension_DtoRepositoryKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_DtoRepositoryKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.DtoRepositoryInterfaceKotlinOutput$S0)) {
        String fname = getFileName_DtoRepositoryInterfaceKotlinOutput(root);
        String ext = getFileExtension_DtoRepositoryInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_DtoRepositoryInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.QueryProcessorKotlinOutput$eu)) {
        String fname = getFileName_QueryProcessorKotlinOutput(root);
        String ext = getFileExtension_QueryProcessorKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_QueryProcessorKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.QueryHandlerContainerKotlinOutput$rz)) {
        String fname = getFileName_QueryHandlerContainerKotlinOutput(root);
        String ext = getFileExtension_QueryHandlerContainerKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_QueryHandlerContainerKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.QueryProcessorImplKotlinOutput$fV)) {
        String fname = getFileName_QueryProcessorImplKotlinOutput(root);
        String ext = getFileExtension_QueryProcessorImplKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_QueryProcessorImplKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.QueryHandlerContainerImplKotlinOutput$t0)) {
        String fname = getFileName_QueryHandlerContainerImplKotlinOutput(root);
        String ext = getFileExtension_QueryHandlerContainerImplKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_QueryHandlerContainerImplKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.CommandWrapperInterfaceKotlinOutput$1r)) {
        String fname = getFileName_CommandWrapperInterfaceKotlinOutput(root);
        String ext = getFileExtension_CommandWrapperInterfaceKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_CommandWrapperInterfaceKotlinOutput(root), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.EntityBaseClassKotlinOutput$mK)) {
        String fname = getFileName_EntityBaseClassKotlinOutput(root);
        String ext = getFileExtension_EntityBaseClassKotlinOutput(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_EntityBaseClassKotlinOutput(root), root);
        continue;
      }
    }
  }
  private static String getFileName_QueryKotlinOutput(SNode node) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.query$XyyR), PROPS.name$MnvL);
  }
  private static String getFileName_QueryInterfaceKotlinOutput(SNode node) {
    return "Query";
  }
  private static String getFileName_DtoKotlinOutput(SNode node) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.dto$tTHJ), PROPS.name$MnvL);
  }
  private static String getFileName_ValueObjectKotlinOutput(SNode node) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.valueObject$m4SI), PROPS.name$MnvL);
  }
  private static String getFileName_EntitiyKotlinOutput(SNode node) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.entity$OPtA), PROPS.name$MnvL);
  }
  private static String getFileName_AggregateKotlinOutput(SNode node) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.aggregate$k52A), PROPS.name$MnvL);
  }
  private static String getFileName_CommandKotlinOutput(SNode node) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.command$mcVL), PROPS.name$MnvL);
  }
  private static String getFileName_CommandInterfaceKotlinOutput(SNode node) {
    return DependencyUtils.COMMAND_INTERFACE_NAME;
  }
  private static String getFileName_CommandHandlerInterfaceKotlinOutput(SNode node) {
    return DependencyUtils.COMMAND_HANDLER_INTERFACE_NAME;
  }
  private static String getFileName_EventHandlerInterfaceKotlinOutput(SNode node) {
    return DependencyUtils.EVENT_HANDLER_INTERFACE_NAME;
  }
  private static String getFileName_EventInterfaceKotlinOutput(SNode node) {
    return DependencyUtils.EVENT_INTERFACE_NAME;
  }
  private static String getFileName_QueryHandlerInterfaceKotlinOutput(SNode node) {
    return DependencyUtils.QUERY_HANDLER_INTERFACE_NAME;
  }
  private static String getFileName_AggregateInterfaceKotlinOutput(SNode node) {
    return DependencyUtils.AGGREGATE_INTERFACE_NAME;
  }
  private static String getFileName_EventAggregateInterfaceKotlinOutput(SNode node) {
    return DependencyUtils.EVENT_AGGREGATE_INTERFACE_NAME;
  }
  private static String getFileName_EventAggregateBaseClassKotlinOutput(SNode node) {
    return DependencyUtils.BASE_EVENT_AGGREGATE_NAME;
  }
  private static String getFileName_CommandHandlerSeparatedKotlinOutput(SNode node) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.command$Ua6h), PROPS.name$MnvL) + "Handler";
  }
  private static String getFileName_EventHandlerSeparatedKotlinOutput(SNode node) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.event$_EWX), PROPS.name$MnvL) + "Handler";
  }
  private static String getFileName_QueryHandlerSeparatedKotlinOutput(SNode node) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.query$ysaA), PROPS.name$MnvL) + "Handler";
  }
  private static String getFileName_EventWrapperInterfaceKotlinOutput(SNode node) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.substitudeEvent$ZIb0), PROPS.name$MnvL);
  }
  private static String getFileName_AggregateConcreteInterfaceKotlinOutput(SNode node) {
    return "I" + SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.g_aggregate$Xf87), LINKS.aggregate$k52A), PROPS.name$MnvL);
  }
  private static String getFileName_AggregateRepositoryInterfaceKotlinOutput(SNode node) {
    return DependencyUtils.AGGREGATE_REPOSITORY_INTERFACE_NAME;
  }
  private static String getFileName_AggregateIdRepositoryInterfaceKotlinOutput(SNode node) {
    return DependencyUtils.AGGREGATE_ID_REPOSITORY_INTERFACE_NAME;
  }
  private static String getFileName_AggregateConcreteRepositoryInterfaceKotlinOutput(SNode node) {
    return "I" + AggregateRootRepository__BehaviorDescriptor.repositoryName_id5qxF18G6I2Y.invoke(SLinkOperations.getTarget(node, LINKS.repository$6gjW));
  }
  private static String getFileName_AggregateRepositoryKotlinOutput(SNode node) {
    return (String) AggregateRootRepository__BehaviorDescriptor.repositoryName_id5qxF18G6I2Y.invoke(SLinkOperations.getTarget(node, LINKS.repository$o2pF));
  }
  private static String getFileName_CommandHandlerGroupedKotlinOutput(SNode node) {
    return (String) CommandContainer__BehaviorDescriptor.getCommandContainerName_id51Z40Vzx6GO.invoke(SLinkOperations.getTarget(node, LINKS.container$uWWL));
  }
  private static String getFileName_CommandHandlerGroupedInterfaceKotlinOutput(SNode node) {
    return "I" + CommandContainer__BehaviorDescriptor.getCommandContainerName_id51Z40Vzx6GO.invoke(SLinkOperations.getTarget(node, LINKS.container$3Wrh));
  }
  private static String getFileName_EventHandlerGroupedInterfaceKotlinOutput(SNode node) {
    return "I" + DependencyUtils.GROUPED_EVENT_HANDLER_NAME;
  }
  private static String getFileName_EventHandlerGroupedKotlinOutput(SNode node) {
    return DependencyUtils.GROUPED_EVENT_HANDLER_NAME;
  }
  private static String getFileName_QueryHandlerGroupedInterfaceKotlinOutput(SNode node) {
    return "I" + QueryContainer__BehaviorDescriptor.getQueryContainerName_id2RbvdOKU0GT.invoke(SLinkOperations.getTarget(node, LINKS.container$PU53));
  }
  private static String getFileName_QueryHandlerGroupedKotlinOutput(SNode node) {
    return (String) QueryContainer__BehaviorDescriptor.getQueryContainerName_id2RbvdOKU0GT.invoke(SLinkOperations.getTarget(node, LINKS.container$PNh7));
  }
  private static String getFileName_DtoRepositoryKotlinOutput(SNode node) {
    return (String) IRepository__BehaviorDescriptor.repositoryName_idmdpAJL$$QT.invoke(SLinkOperations.getTarget(node, LINKS.repository$3egk));
  }
  private static String getFileName_DtoRepositoryInterfaceKotlinOutput(SNode node) {
    return "I" + IRepository__BehaviorDescriptor.repositoryName_idmdpAJL$$QT.invoke(SLinkOperations.getTarget(node, LINKS.repository$5IKt));
  }
  private static String getFileName_QueryProcessorKotlinOutput(SNode node) {
    return DependencyUtils.QUERY_PROCESSOR_NAME;
  }
  private static String getFileName_QueryHandlerContainerKotlinOutput(SNode node) {
    return DependencyUtils.QUERY_HANDLER_CONTAINER_NAME;
  }
  private static String getFileName_QueryProcessorImplKotlinOutput(SNode node) {
    return DependencyUtils.QUERY_PROCESSOR_IMPL_NAME;
  }
  private static String getFileName_QueryHandlerContainerImplKotlinOutput(SNode node) {
    return DependencyUtils.QUERY_HANDLER_CONTAINER_IMPL_NAME;
  }
  private static String getFileName_CommandWrapperInterfaceKotlinOutput(SNode node) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.substitudeCommand$jirL), PROPS.name$MnvL);
  }
  private static String getFileName_EntityBaseClassKotlinOutput(SNode node) {
    return DependencyUtils.ENTITY_BASE_CLASS_NAME;
  }
  private static String getFileExtension_QueryKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_QueryInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_DtoKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_ValueObjectKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_EntitiyKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_AggregateKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_CommandKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_CommandInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_CommandHandlerInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_EventHandlerInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_EventInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_QueryHandlerInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_AggregateInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_EventAggregateInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_EventAggregateBaseClassKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_CommandHandlerSeparatedKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_EventHandlerSeparatedKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_QueryHandlerSeparatedKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_EventWrapperInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_AggregateConcreteInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_AggregateRepositoryInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_AggregateIdRepositoryInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_AggregateConcreteRepositoryInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_AggregateRepositoryKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_CommandHandlerGroupedKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_CommandHandlerGroupedInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_EventHandlerGroupedInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_EventHandlerGroupedKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_QueryHandlerGroupedInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_QueryHandlerGroupedKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_DtoRepositoryKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_DtoRepositoryInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_QueryProcessorKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_QueryHandlerContainerKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_QueryProcessorImplKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_QueryHandlerContainerImplKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_CommandWrapperInterfaceKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getFileExtension_EntityBaseClassKotlinOutput(SNode node) {
    return GenerationTarget.KOTLIN.getFileExtension();
  }
  private static String getPath_QueryKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_QueryInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_DtoKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_ValueObjectKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_EntitiyKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_AggregateKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_CommandKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_CommandInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_CommandHandlerInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_EventHandlerInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_EventInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_QueryHandlerInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_AggregateInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_EventAggregateInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_EventAggregateBaseClassKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_CommandHandlerSeparatedKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_EventHandlerSeparatedKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_QueryHandlerSeparatedKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_EventWrapperInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_AggregateConcreteInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_AggregateRepositoryInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_AggregateIdRepositoryInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_AggregateConcreteRepositoryInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_AggregateRepositoryKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_CommandHandlerGroupedKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_CommandHandlerGroupedInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_EventHandlerGroupedInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_EventHandlerGroupedKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_QueryHandlerGroupedInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_QueryHandlerGroupedKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_DtoRepositoryKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_DtoRepositoryInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_QueryProcessorKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_QueryHandlerContainerKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_QueryProcessorImplKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_QueryHandlerContainerImplKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_CommandWrapperInterfaceKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }
  private static String getPath_EntityBaseClassKotlinOutput(SNode node) {
    return (String) KotlinFileOutput__BehaviorDescriptor.getPath_id4b$xqUBcV69.invoke(node);
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept QueryKotlinOutput$sN = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0xa1fc5d1dac8b62bL, "CQRS.Kotlin.structure.QueryKotlinOutput");
    /*package*/ static final SConcept QueryInterfaceKotlinOutput$Vt = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x3b1b6680cf07c496L, "CQRS.Kotlin.structure.QueryInterfaceKotlinOutput");
    /*package*/ static final SConcept DtoKotlinOutput$h6 = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x42e485aea7468e01L, "CQRS.Kotlin.structure.DtoKotlinOutput");
    /*package*/ static final SConcept ValueObjectKotlinOutput$4t = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x42e485aea750ea3eL, "CQRS.Kotlin.structure.ValueObjectKotlinOutput");
    /*package*/ static final SConcept EntitiyKotlinOutput$CZ = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x42e485aea7525531L, "CQRS.Kotlin.structure.EntitiyKotlinOutput");
    /*package*/ static final SConcept AggregateKotlinOutput$OB = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x42e485aea7525534L, "CQRS.Kotlin.structure.AggregateKotlinOutput");
    /*package*/ static final SConcept CommandKotlinOutput$ZZ = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x42e485aea761e9cfL, "CQRS.Kotlin.structure.CommandKotlinOutput");
    /*package*/ static final SConcept CommandInterfaceKotlinOutput$iT = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x31275335cb77d5f7L, "CQRS.Kotlin.structure.CommandInterfaceKotlinOutput");
    /*package*/ static final SConcept CommandHandlerInterfaceKotlinOutput$jo = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x31275335cb77d5f8L, "CQRS.Kotlin.structure.CommandHandlerInterfaceKotlinOutput");
    /*package*/ static final SConcept EventHandlerInterfaceKotlinOutput$PF = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0xe220c2db6f9cdccL, "CQRS.Kotlin.structure.EventHandlerInterfaceKotlinOutput");
    /*package*/ static final SConcept EventInterfaceKotlinOutput$a6 = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0xe220c2db6fcb68dL, "CQRS.Kotlin.structure.EventInterfaceKotlinOutput");
    /*package*/ static final SConcept QueryHandlerInterfaceKotlinOutput$i2 = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0xe220c2db7020f56L, "CQRS.Kotlin.structure.QueryHandlerInterfaceKotlinOutput");
    /*package*/ static final SConcept AggregateInterfaceKotlinOutput$iB = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0xe220c2db70ff004L, "CQRS.Kotlin.structure.AggregateInterfaceKotlinOutput");
    /*package*/ static final SConcept EventAggregateInterfaceKotlinOutput$k4 = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0xe220c2db70ff007L, "CQRS.Kotlin.structure.EventAggregateInterfaceKotlinOutput");
    /*package*/ static final SConcept EventAggregateBaseClassKotlinOutput$mi = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x2cd995488a0e90fdL, "CQRS.Kotlin.structure.EventAggregateBaseClassKotlinOutput");
    /*package*/ static final SConcept CommandHandlerSeparatedKotlinOutput$5q = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x2cd995488ae688b8L, "CQRS.Kotlin.structure.CommandHandlerSeparatedKotlinOutput");
    /*package*/ static final SConcept EventHandlerSeparatedKotlinOutput$VK = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x1a77dd18daf29265L, "CQRS.Kotlin.structure.EventHandlerSeparatedKotlinOutput");
    /*package*/ static final SConcept QueryHandlerSeparatedKotlinOutput$6c = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x1a77dd18db1da0f8L, "CQRS.Kotlin.structure.QueryHandlerSeparatedKotlinOutput");
    /*package*/ static final SConcept EventWrapperInterfaceKotlinOutput$pK = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x1a77dd18db67e490L, "CQRS.Kotlin.structure.EventWrapperInterfaceKotlinOutput");
    /*package*/ static final SConcept AggregateConcreteInterfaceKotlinOutput$HL = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x1a77dd18dc13bc23L, "CQRS.Kotlin.structure.AggregateConcreteInterfaceKotlinOutput");
    /*package*/ static final SConcept AggregateRepositoryInterfaceKotlinOutput$_A = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x1a77dd18de33a1e1L, "CQRS.Kotlin.structure.AggregateRepositoryInterfaceKotlinOutput");
    /*package*/ static final SConcept AggregateIdRepositoryInterfaceKotlinOutput$Le = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x1a77dd18de33a1e4L, "CQRS.Kotlin.structure.AggregateIdRepositoryInterfaceKotlinOutput");
    /*package*/ static final SConcept AggregateConcreteRepositoryInterfaceKotlinOutput$Kg = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x1a77dd18de33a1e2L, "CQRS.Kotlin.structure.AggregateConcreteRepositoryInterfaceKotlinOutput");
    /*package*/ static final SConcept AggregateRepositoryKotlinOutput$KJ = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x1a77dd18de33a1e3L, "CQRS.Kotlin.structure.AggregateRepositoryKotlinOutput");
    /*package*/ static final SConcept CommandHandlerGroupedKotlinOutput$qs = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x33fbc5a95960b5e2L, "CQRS.Kotlin.structure.CommandHandlerGroupedKotlinOutput");
    /*package*/ static final SConcept CommandHandlerGroupedInterfaceKotlinOutput$ft = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x33fbc5a959de520fL, "CQRS.Kotlin.structure.CommandHandlerGroupedInterfaceKotlinOutput");
    /*package*/ static final SConcept EventHandlerGroupedInterfaceKotlinOutput$i$ = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x33fbc5a96653a00eL, "CQRS.Kotlin.structure.EventHandlerGroupedInterfaceKotlinOutput");
    /*package*/ static final SConcept EventHandlerGroupedKotlinOutput$f = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x1a77dd18dbbe5dcfL, "CQRS.Kotlin.structure.EventHandlerGroupedKotlinOutput");
    /*package*/ static final SConcept QueryHandlerGroupedInterfaceKotlinOutput$j1 = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x33fbc5a96964f0b5L, "CQRS.Kotlin.structure.QueryHandlerGroupedInterfaceKotlinOutput");
    /*package*/ static final SConcept QueryHandlerGroupedKotlinOutput$h$ = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x33fbc5a96964f0b2L, "CQRS.Kotlin.structure.QueryHandlerGroupedKotlinOutput");
    /*package*/ static final SConcept DtoRepositoryKotlinOutput$Go = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x33fbc5a9717ffdfdL, "CQRS.Kotlin.structure.DtoRepositoryKotlinOutput");
    /*package*/ static final SConcept DtoRepositoryInterfaceKotlinOutput$S0 = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x33fbc5a9717ffe00L, "CQRS.Kotlin.structure.DtoRepositoryInterfaceKotlinOutput");
    /*package*/ static final SConcept QueryProcessorKotlinOutput$eu = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x7849637c4937a213L, "CQRS.Kotlin.structure.QueryProcessorKotlinOutput");
    /*package*/ static final SConcept QueryHandlerContainerKotlinOutput$rz = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x7849637c4937a219L, "CQRS.Kotlin.structure.QueryHandlerContainerKotlinOutput");
    /*package*/ static final SConcept QueryProcessorImplKotlinOutput$fV = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x7849637c4937a216L, "CQRS.Kotlin.structure.QueryProcessorImplKotlinOutput");
    /*package*/ static final SConcept QueryHandlerContainerImplKotlinOutput$t0 = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x7849637c4937a21cL, "CQRS.Kotlin.structure.QueryHandlerContainerImplKotlinOutput");
    /*package*/ static final SConcept CommandWrapperInterfaceKotlinOutput$1r = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x7849637c48be76e7L, "CQRS.Kotlin.structure.CommandWrapperInterfaceKotlinOutput");
    /*package*/ static final SConcept EntityBaseClassKotlinOutput$mK = MetaAdapterFactory.getConcept(0x21c0c49f06c045cbL, 0x990e6280d48112f6L, 0x1aadd00b90fc5d9L, "CQRS.Kotlin.structure.EntityBaseClassKotlinOutput");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink query$XyyR = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xa1fc5d1dac8a772L, 0xa1fc5d1dac8b45fL, "query");
    /*package*/ static final SReferenceLink dto$tTHJ = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea742a568L, 0x42e485aea742a569L, "dto");
    /*package*/ static final SReferenceLink valueObject$m4SI = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea747fb3aL, 0x42e485aea7480548L, "valueObject");
    /*package*/ static final SReferenceLink entity$OPtA = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea749033fL, 0x42e485aea7490342L, "entity");
    /*package*/ static final SReferenceLink aggregate$k52A = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea7491039L, 0x42e485aea749103cL, "aggregate");
    /*package*/ static final SReferenceLink command$mcVL = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x42e485aea75e79ccL, 0x42e485aea75e79cfL, "command");
    /*package*/ static final SReferenceLink command$Ua6h = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x2cd995488ae1ebf3L, 0x2cd995488ae1ebf6L, "command");
    /*package*/ static final SReferenceLink event$_EWX = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18daf28d4eL, 0x1a77dd18dafb9c9aL, "event");
    /*package*/ static final SReferenceLink query$ysaA = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db1da0fbL, 0x1a77dd18db1da0feL, "query");
    /*package*/ static final SContainmentLink substitudeEvent$ZIb0 = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18db67c7adL, 0x1a77dd18dbbe5dd3L, "substitudeEvent");
    /*package*/ static final SReferenceLink g_aggregate$Xf87 = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18dc10802cL, 0x1a77dd18dc108030L, "g_aggregate");
    /*package*/ static final SReferenceLink repository$6gjW = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1eL, 0x507f100eefbcba7eL, "repository");
    /*package*/ static final SReferenceLink repository$o2pF = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1dL, 0x507f100eefdfdf4eL, "repository");
    /*package*/ static final SReferenceLink container$uWWL = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a9591d98baL, 0x507f100eeef73cc7L, "container");
    /*package*/ static final SReferenceLink container$3Wrh = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a959da566bL, 0x507f100eef1c0503L, "container");
    /*package*/ static final SReferenceLink container$PU53 = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a4L, 0x507f100ef01e81c6L, "container");
    /*package*/ static final SReferenceLink container$PNh7 = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a96964f0a3L, 0x507f100ef01e81beL, "container");
    /*package*/ static final SReferenceLink repository$3egk = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a971798ebaL, 0x33fbc5a971798ec0L, "repository");
    /*package*/ static final SReferenceLink repository$5IKt = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x33fbc5a971798ebdL, 0x33fbc5a971798eccL, "repository");
    /*package*/ static final SContainmentLink substitudeCommand$jirL = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x7849637c48be76e0L, 0x7849637c48be76e3L, "substitudeCommand");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
