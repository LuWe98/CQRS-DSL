package CQRS.Kotlin.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CQRS.Generation.generation.DependencyTextConverter;
import CQRS.Kotlin.behavior.KotlinFileOutput__BehaviorDescriptor;
import CQRS.Generation.generation.DependencyUtils;
import CQRS.behavior.IComponentWithParameters__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class QueryKotlinOutput_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    SNode query = SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.query$XyyR);

    DependencyTextConverter converter = KotlinFileOutput__BehaviorDescriptor.converter_id4b$xqUBeLAT.invoke(ctx.getPrimaryInput());
    String queryInterface = DependencyUtils.QUERY_INTERFACE_NAME;

    KotlinTextGenComponents.header(ctx.getPrimaryInput(), ctx);

    if ((boolean) IComponentWithParameters__BehaviorDescriptor.hasParameters_id5QsWOhXN7cG.invoke(query)) {
      KotlinTextGenComponents._dataclass(SPropertyOperations.getString(query, PROPS.name$MnvL), ctx);
      tgs.append("(");
      ctx.getBuffer().area().increaseIndent();
      KotlinTextGenComponents.parameters(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.parameters$guoY), SPropertyOperations.getBoolean(query, PROPS.hasVerticallyAlignedParameters$KOTx), ctx);
      ctx.getBuffer().area().decreaseIndent();
      tgs.append(")");
    } else {
      KotlinTextGenComponents._object(SPropertyOperations.getString(query, PROPS.name$MnvL), ctx);
    }

    tgs.append(" : ");
    tgs.append(queryInterface);
    tgs.append("<");
    tgs.append(converter.convertType(SLinkOperations.getTarget(query, LINKS.returnType$WTqX)));
    tgs.append(">");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink query$XyyR = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xa1fc5d1dac8a772L, 0xa1fc5d1dac8b45fL, "query");
    /*package*/ static final SContainmentLink parameters$guoY = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0xa1fc5d1dac8a772L, 0x6443e253e20159aL, "parameters");
    /*package*/ static final SContainmentLink returnType$WTqX = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086440e2444L, 0x3a4bff79340ab979L, "returnType");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty hasVerticallyAlignedParameters$KOTx = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x62cb96433e80624L, 0x3ae7d0b6d87bc75fL, "hasVerticallyAlignedParameters");
  }
}
