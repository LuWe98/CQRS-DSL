package CQRS.Kotlin.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import org.jetbrains.mps.openapi.model.SNode;
import CQRS.Kotlin.behavior.KotlinElementOutput__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class ParameterKotlinOutput_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    SNode mappedType = KotlinElementOutput__BehaviorDescriptor.mapper_id2Np_kya0npo.invoke(ctx.getPrimaryInput()).mapDataType(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.type$Phmg));

    // TODO Das noch anpassen.
    if (SPropertyOperations.getBoolean(ctx.getPrimaryInput(), PROPS.hideModifiers$4rph)) {
      tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$PbWT));
      tgs.append(" : ");
      tgs.appendNode(mappedType);
      return;
    }

    String modifier = (!(SEnumOperations.isMember(SPropertyOperations.getEnum(ctx.getPrimaryInput(), PROPS.modifier$a635), 0x6443e2542ec4851L)) ? SEnumOperations.getMemberPresentation(SPropertyOperations.getEnum(ctx.getPrimaryInput(), PROPS.modifier$a635)) + " " : "");
    String overrideKeyword = (SPropertyOperations.getBoolean(ctx.getPrimaryInput(), PROPS.isOverriding$4s$m) ? "override " : "");
    String keyword = (SPropertyOperations.getBoolean(ctx.getPrimaryInput(), PROPS.isMutable$a5m2) ? "var " : "val ");

    tgs.append(modifier);
    tgs.append(overrideKeyword);
    tgs.append(keyword);
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$PbWT));
    tgs.append(" : ");
    tgs.appendNode(mappedType);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink type$Phmg = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x1a77dd18dae31af5L, "type");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$PbWT = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x1a77dd18dae31af3L, "name");
    /*package*/ static final SProperty hideModifiers$4rph = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x6443e2542f2bf96L, "hideModifiers");
    /*package*/ static final SProperty modifier$a635 = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x6443e2542ec484bL, "modifier");
    /*package*/ static final SProperty isOverriding$4s$m = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x6443e2542f2bf9bL, "isOverriding");
    /*package*/ static final SProperty isMutable$a5m2 = MetaAdapterFactory.getProperty(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x48bafb85c0476b22L, 0x6443e2542ec4848L, "isMutable");
  }
}
