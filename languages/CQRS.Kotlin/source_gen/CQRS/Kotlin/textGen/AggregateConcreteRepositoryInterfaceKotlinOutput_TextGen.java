package CQRS.Kotlin.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import CQRS.Generation.generation.DependencyTextConverter;
import CQRS.Kotlin.behavior.KotlinFileOutput__BehaviorDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CQRS.behavior.AggregateRootRepository__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import CQRS.Generation.generation.DependencyUtils;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import CQRS.Generation.textGen.CqrsTextGenComponents;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class AggregateConcreteRepositoryInterfaceKotlinOutput_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    DependencyTextConverter converter = KotlinFileOutput__BehaviorDescriptor.converter_id4b$xqUBeLAT.invoke(ctx.getPrimaryInput());
    SNode repository = SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.repository$6gjW);
    SNode aggregate = SLinkOperations.getTarget(SLinkOperations.getTarget(repository, LINKS.aggregateReference$1ZNc), LINKS.aggregate$D_P$);
    String aggregateName = converter.convertAggregate(aggregate);
    String idType = converter.convertType(SLinkOperations.getTarget(aggregate, LINKS.idType$EoIp));

    KotlinTextGenComponents.header(ctx.getPrimaryInput(), ctx);

    KotlinTextGenComponents._interface("I" + AggregateRootRepository__BehaviorDescriptor.repositoryName_id5qxF18G6I2Y.invoke(repository), ctx);
    tgs.append(": ");

    if (SPropertyOperations.getBoolean(repository, PROPS.isIdRepository$Umet)) {
      tgs.append(DependencyUtils.AGGREGATE_ID_REPOSITORY_INTERFACE_NAME);
      tgs.append("<");
      tgs.append(idType);
      tgs.append(", ");
      tgs.append(aggregateName);
      tgs.append(">");
    } else {
      tgs.append(DependencyUtils.AGGREGATE_REPOSITORY_INTERFACE_NAME);
      tgs.append("<");
      tgs.append(aggregateName);
      tgs.append(">");
    }

    if (ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.methods$4Olc)).isEmpty()) {
      return;
    }

    tgs.append("{");
    CqrsTextGenComponents.newLines(2, ctx);
    ctx.getBuffer().area().increaseIndent();
    KotlinTextGenComponents.methods(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.methods$4Olc), ctx);
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink repository$6gjW = MetaAdapterFactory.getReferenceLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1eL, 0x507f100eefbcba7eL, "repository");
    /*package*/ static final SContainmentLink aggregateReference$1ZNc = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL, 0x5e223a0a09fe3269L, "aggregateReference");
    /*package*/ static final SReferenceLink aggregate$D_P$ = MetaAdapterFactory.getReferenceLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4f0a0db9ac16f8f2L, 0x4f0a0db9ac16f8f3L, "aggregate");
    /*package*/ static final SContainmentLink idType$EoIp = MetaAdapterFactory.getContainmentLink(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x4cfae7e929829c99L, 0x4cfae7e929829cc6L, "idType");
    /*package*/ static final SContainmentLink methods$4Olc = MetaAdapterFactory.getContainmentLink(0x273bc31819694c83L, 0x8484525ea753e78bL, 0x1a77dd18de31fc1eL, 0x1a77dd18de764d4bL, "methods");
  }

  private static final class PROPS {
    /*package*/ static final SProperty isIdRepository$Umet = MetaAdapterFactory.getProperty(0xfe04f903cef2451dL, 0x9401426cad0a8857L, 0x73da5086441fb19dL, 0x73da5086441fb1a2L, "isIdRepository");
  }
}
